{
  "abc-parser": {
    "Data.Abc.Accidentals": [
      "empty",
      "add",
      "fromKeySet",
      "lookup",
      "member",
      "fromKeySig",
      "implicitInKeySet"
    ],
    "Data.Abc.Canonical": [
      "fromTune",
      "fromEither",
      "abcNote",
      "abcChord",
      "tupletSignature",
      "bars",
      "keySignatureAccidental"
    ],
    "Data.Abc.KeySignature": [
      "getKeySig",
      "getKeyProps",
      "keySet",
      "inKeySet",
      "modifiedKeySet",
      "getKeySet",
      "notesInChromaticScale",
      "diatonicScale",
      "defaultKey",
      "isCOrSharpKey",
      "normaliseModalKey",
      "transposeKeySignatureBy",
      "pitchNumbers",
      "pitchNumber"
    ],
    "Data.Abc.Meter": [
      "getMeter",
      "getDefaultedMeter",
      "commonTime",
      "cutTime",
      "toRational"
    ],
    "Data.Abc.Midi.Pitch": [
      "toMidiPitch",
      "midiPitchOffset"
    ],
    "Data.Abc.Midi.RepeatSections": [
      "initialRepeatState",
      "indexBar",
      "finalBar"
    ],
    "Data.Abc.Midi.Types": [],
    "Data.Abc.Midi": [
      "toMidi",
      "toMidiAtBpm",
      "toMidiRecording",
      "toMidiRecordingAtBpm"
    ],
    "Data.Abc.Octave": [
      "move",
      "up",
      "down"
    ],
    "Data.Abc.Optics": [],
    "Data.Abc.Parser": [
      "parse",
      "parseKeySignature"
    ],
    "Data.Abc.Repeats.Section": [
      "hasFirstEnding",
      "isDeadSection",
      "isUnrepeated",
      "newSection",
      "nullSection",
      "setEndPos",
      "setMissingRepeatCount",
      "toOffsetZero"
    ],
    "Data.Abc.Repeats.Types": [],
    "Data.Abc.Repeats.Variant": [
      "activeVariants",
      "secondVariantPosition",
      "addVariants",
      "findEndingPosition",
      "normaliseVoltas",
      "variantPositionOf",
      "variantIndexMax",
      "variantCount"
    ],
    "Data.Abc.Tempo": [
      "defaultTempo",
      "defaultAbcTempo",
      "getTempoSig",
      "getAbcTempo",
      "midiTempo",
      "beatsPerSecond",
      "getBpm",
      "setBpm",
      "playedNoteDuration",
      "standardMidiTick",
      "noteTicks",
      "chordalNoteTicks"
    ],
    "Data.Abc.Transposition": [
      "defaultKey",
      "keyDistance",
      "transposeNote",
      "transposeTo"
    ],
    "Data.Abc.UnitNote": [
      "defaultUnitNoteLength",
      "getUnitNoteLength"
    ],
    "Data.Abc.Utils": [
      "getTitle",
      "dotFactor",
      "normaliseChord",
      "chordDuration",
      "tupletDuration",
      "isEmptyStave",
      "thumbnail",
      "removeRepeatMarkers"
    ],
    "Data.Abc.Voice": [
      "getVoiceLabels",
      "getVoiceMap",
      "partitionVoices",
      "partitionTuneBody"
    ],
    "Data.Abc": [
      "middlecOctave"
    ]
  },
  "ace": {
    "Ace.Anchor": [
      "onChange",
      "getPosition",
      "getDocument",
      "setPosition",
      "detach",
      "create",
      "getInsertRight",
      "setInsertRight"
    ],
    "Ace.BackgroundTokenizer": [
      "onUpdate",
      "setTokenizer",
      "setDocument",
      "fireUpdateEvent",
      "start",
      "stop",
      "getTokens",
      "getState",
      "create"
    ],
    "Ace.Command": [],
    "Ace.Config": [
      "set",
      "packaged",
      "workerPath",
      "modePath",
      "themePath",
      "basePath",
      "suffix"
    ],
    "Ace.Document": [
      "onChange",
      "setValue",
      "getValue",
      "createAnchor",
      "getNewLineCharacter",
      "setNewLineMode",
      "getNewLineMode",
      "isNewLine",
      "getLine",
      "getLines",
      "getAllLines",
      "getLength",
      "getTextRange",
      "insert",
      "insertNewLine",
      "insertInLine",
      "insertLines",
      "remove",
      "removeInLine",
      "removeNewLine",
      "removeLines",
      "replace",
      "indexToPosition",
      "positionToIndex",
      "create",
      "createFromLines"
    ],
    "Ace.Editor": [
      "blockIndent",
      "blockOutdent",
      "blur",
      "centerSelection",
      "clearSelection",
      "copyLinesDown",
      "copyLinesUp",
      "create",
      "destroy",
      "find",
      "findNext",
      "findPrevious",
      "focus",
      "getBehavioursEnabled",
      "getContainer",
      "getCopyText",
      "getCursorPosition",
      "getCursorPositionScreen",
      "getDragDelay",
      "getFirstVisibleRow",
      "getHighlightActiveLine",
      "getHighlightSelectedWord",
      "getKeyboardHandler",
      "getLastSearchOptions",
      "getLastVisibleRow",
      "getNumberAt",
      "getOverwrite",
      "getPasteEventText",
      "setPasteEventText",
      "getPrintMarginColumn",
      "getReadOnly",
      "getRenderer",
      "getScrollSpeed",
      "getSelection",
      "getSelectionRange",
      "getSelectionStyle",
      "getSession",
      "getShowFoldWidgets",
      "getShowInvisibles",
      "getShowPrintMargin",
      "getTheme",
      "getValue",
      "getWrapBehavioursEnabled",
      "gotoLine",
      "gotoPageDown",
      "gotoPageUp",
      "indent",
      "insert",
      "isFocused",
      "isInMultiSelectMode",
      "isRowFullyVisible",
      "isRowVisible",
      "jumpToMatching",
      "modifyNumber",
      "moveCursorTo",
      "moveCursorToPosition",
      "moveLinesDown",
      "moveLinesUp",
      "navigateDown",
      "navigateFileEnd",
      "navigateFileStart",
      "navigateLeft",
      "navigateLineEnd",
      "navigateLineStart",
      "navigateRight",
      "navigateTo",
      "navigateUp",
      "navigateWordLeft",
      "navigateWordRight",
      "onBlur",
      "onFocus",
      "onCopy",
      "onPaste",
      "onChangeSession",
      "onChangeSelectionStyle",
      "redo",
      "remove",
      "removeLines",
      "removeToLineEnd",
      "removeToLineStart",
      "removeWordLeft",
      "removeWordRight",
      "replaceAll",
      "replace",
      "resize",
      "scrollPageDown",
      "scrollPageUp",
      "scrollToLine",
      "scrollToRow",
      "selectAll",
      "selectMoreLines",
      "selectPageDown",
      "selectPageUp",
      "setBehavioursEnabled",
      "setDragDelay",
      "setFontSize",
      "setHighlightActiveLine",
      "setHighlightSelectedWord",
      "setKeyboardHandler",
      "setOverwrite",
      "setPrintMarginColumn",
      "setReadOnly",
      "setScrollSpeed",
      "setSelectionStyle",
      "setSession",
      "setShowFoldWidgets",
      "setShowInvisibles",
      "setShowPrintMargin",
      "setStyle",
      "setTheme",
      "setValue",
      "setWrapBehavioursEnabled",
      "splitLine",
      "toLowerCase",
      "toUpperCase",
      "toggleCommentLines",
      "toggleOverwrite",
      "transposeLetters",
      "undo",
      "unsetStyle",
      "setMinLines",
      "setMaxLines",
      "setAutoScrollEditorIntoView",
      "setEnableLiveAutocompletion",
      "setEnableBasicAutocompletion",
      "setEnableSnippets",
      "setNavigateWithinSoftTabs",
      "setPlaceholder",
      "getKeyBinding"
    ],
    "Ace.EditSession": [
      "addDynamicMarker",
      "addFold",
      "addGutterDecoration",
      "addMarker",
      "adjustWrapLimit",
      "clearAnnotations",
      "clearBreakpoint",
      "clearBreakpoints",
      "createWithMode",
      "createFromLines",
      "create",
      "detectNewLine",
      "documentToScreenColumn",
      "documentToScreenPosition",
      "documentToScreenRow",
      "duplicateLines",
      "findMatchingBracket",
      "getAWordRange",
      "getAnnotations",
      "getBackgroundTokenizer",
      "getBreakpoints",
      "getDisplayTokens",
      "getDocument",
      "getDocumentLastRowColumn",
      "getDocumentLastRowColumnPosition",
      "getLength",
      "getLine",
      "getLines",
      "getMode",
      "getNewLineMode",
      "getOverwrite",
      "getRowLength",
      "getRowSplitData",
      "getScreenLastRowColumn",
      "getScreenLength",
      "getScreenTabSize",
      "getScreenWidth",
      "getScrollLeft",
      "getScrollTop",
      "getSelection",
      "getState",
      "getStringScreenWidth",
      "getTabSize",
      "getTabString",
      "getTextRange",
      "getTokenAt",
      "getTokens",
      "getUndoManager",
      "getUseSoftTabs",
      "getUseWorker",
      "getUseWrapMode",
      "getValue",
      "getWordRange",
      "getWrapLimit",
      "getWrapLimitRange",
      "highlight",
      "indentRows",
      "insert",
      "isTabStop",
      "mode",
      "moveLinesDown",
      "moveLinesUp",
      "moveText",
      "onChange",
      "onChangeAnnotation",
      "onChangeBackMarker",
      "onChangeBreakpoint",
      "onChangeFold",
      "onChangeFrontMarker",
      "onChangeMode",
      "onChangeOverwrite",
      "onChangeScrollLeft",
      "onChangeScrollTop",
      "onChangeTabSize",
      "onChangeWrapLimit",
      "onChangeWrapMode",
      "onTokenizerUpdate",
      "onReloadTokenizer",
      "outdentRows",
      "remove",
      "removeGutterDecoration",
      "removeMarker",
      "replace",
      "resetRowCache",
      "screenToDocumentColumn",
      "screenToDocumentPosition",
      "setAnnotations",
      "setBreakpoint",
      "setBreakpoints",
      "setDocument",
      "setMode",
      "setNewLineMode",
      "setOverwrite",
      "setScrollLeft",
      "setScrollTop",
      "setTabSize",
      "setUndoManager",
      "setUndoSelect",
      "setUseSoftTabs",
      "setUseWorker",
      "setUseWrapMode",
      "setValue",
      "setWrapLimitRange",
      "toggleOverwrite",
      "getMarkers"
    ],
    "Ace.Ext.LanguageTools.Completer": [
      "mkCompleter"
    ],
    "Ace.Ext.LanguageTools": [],
    "Ace.KeyBinding": [],
    "Ace.Marker": [
      "getId",
      "getClazz",
      "getInFront",
      "getType",
      "getRange"
    ],
    "Ace.Range": [
      "clipRows",
      "clone",
      "collapseRows",
      "compare",
      "compareEnd",
      "compareInside",
      "comparePoint",
      "compareRange",
      "compareStart",
      "contains",
      "containsRange",
      "create",
      "extend",
      "fromPoints",
      "getEnd",
      "getEndRow",
      "getEndColumn",
      "getStartColumn",
      "getStartRow",
      "getStart",
      "inside",
      "insideEnd",
      "insideStart",
      "intersects",
      "isEmpty",
      "isEnd",
      "isEqual",
      "isMultiLine",
      "isStart",
      "setEnd",
      "setStart",
      "toScreenRange",
      "toString"
    ],
    "Ace.ScrollBar": [
      "create",
      "getWidth",
      "onScroll",
      "setHeight",
      "setInnerHeight",
      "setScrollTop"
    ],
    "Ace.Search": [
      "set",
      "find",
      "findAll",
      "replace",
      "create"
    ],
    "Ace.Selection": [
      "addRange",
      "clearSelection",
      "create",
      "fromOrientedRange",
      "getAllRanges",
      "getCursor",
      "getRange",
      "getSelectionAnchor",
      "getSelectionLead",
      "getWordRange",
      "isBackwards",
      "isEmpty",
      "isMultiLine",
      "moveCursorBy",
      "moveCursorDown",
      "moveCursorFileEnd",
      "moveCursorFileStart",
      "moveCursorLeft",
      "moveCursorLineEnd",
      "moveCursorLineStart",
      "moveCursorLongWordLeft",
      "moveCursorLongWordRight",
      "moveCursorRight",
      "moveCursorTo",
      "moveCursorToPosition",
      "moveCursorToScreen",
      "moveCursorUp",
      "moveCursorWordLeft",
      "moveCursorWordRight",
      "onChangeCursor",
      "onChangeSelection",
      "selectAWord",
      "selectAll",
      "selectDown",
      "selectFileEnd",
      "selectFileStart",
      "selectLeft",
      "selectLineEnd",
      "selectLine",
      "selectLineStart",
      "selectRight",
      "selectTo",
      "selectToPosition",
      "selectUp",
      "selectWord",
      "selectWordLeft",
      "selectWordRight",
      "setRange",
      "setSelectionAnchor",
      "setSelectionRange",
      "shiftSelection"
    ],
    "Ace.TokenIterator": [
      "create",
      "getCurrentToken",
      "getCurrentTokenColumn",
      "getCurrentTokenRow",
      "stepBackward",
      "stepForward"
    ],
    "Ace.Tokenizer": [
      "create",
      "getLineTokens"
    ],
    "Ace.Types": [],
    "Ace.UndoManager": [
      "create",
      "hasUndo",
      "hasRedo",
      "undo",
      "redo",
      "reset"
    ],
    "Ace.VirtualRenderer": [
      "addGutterDecoration",
      "adjustWrapLimit",
      "create",
      "destroy",
      "getAnimatedScroll",
      "getCharacterWidth",
      "getContainerElement",
      "getFirstFullyVisibleRow",
      "getFirstVisibleRow",
      "getHScrollBarAlwaysVisible",
      "getLastFullyVisibleRow",
      "getLastVisibleRow",
      "getMouseEventTarget",
      "getPrintMarginColumn",
      "getScrollBottomRow",
      "getScrollLeft",
      "getScrollTop",
      "getScrollTopRow",
      "getShowGutter",
      "getShowInvisibles",
      "getShowPrintMargin",
      "getTextAreaContainer",
      "getTheme",
      "hideComposition",
      "hideCursor",
      "isScrollableBy",
      "onResize",
      "removeGutterDecoration",
      "screenToTextCoordinates",
      "scrollBy",
      "scrollCursorIntoView",
      "scrollToLine",
      "scrollToRow",
      "scrollToX",
      "scrollToY",
      "setAnimatedScroll",
      "setAnnotations",
      "setCompositionText",
      "setHScrollBarAlwaysVisible",
      "setPadding",
      "setPrintMarginColumn",
      "setSession",
      "setShowGutter",
      "setShowInvisibles",
      "setShowPrintMargin",
      "setStyle",
      "setTheme",
      "showComposition",
      "showCursor",
      "textToScreenCoordinates",
      "unsetStyle",
      "updateBackMarkers",
      "updateBreakpoints",
      "updateCursor",
      "updateFontSize",
      "updateFrontMarkers",
      "updateFull",
      "updateLines",
      "updateText",
      "visualizeBlur",
      "visualizeFocus"
    ],
    "Ace": [
      "ace",
      "edit",
      "editNode",
      "createEditSession",
      "createEditSessionForDocument"
    ]
  },
  "aff": {
    "Effect.Aff.Class": [],
    "Effect.Aff.Compat": [
      "fromEffectFnAff"
    ],
    "Effect.Aff": [
      "makeAff",
      "launchAff",
      "launchAff_",
      "launchSuspendedAff",
      "runAff",
      "runAff_",
      "runSuspendedAff",
      "forkAff",
      "suspendAff",
      "supervise",
      "attempt",
      "apathize",
      "delay",
      "never",
      "finally",
      "invincible",
      "killFiber",
      "joinFiber",
      "cancelWith",
      "bracket",
      "generalBracket",
      "nonCanceler",
      "effectCanceler",
      "fiberCanceler"
    ]
  },
  "aff-bus": {
    "Effect.Aff.Bus": [
      "make",
      "read",
      "write",
      "split",
      "kill",
      "isKilled"
    ]
  },
  "aff-coroutines": {
    "Control.Coroutine.Aff": []
  },
  "aff-promise": {
    "Control.Promise": [
      "fromAff",
      "toAff",
      "toAff'",
      "toAffE"
    ]
  },
  "aff-retry": {
    "Effect.Aff.Retry": [
      "constantDelay",
      "exponentialBackoff",
      "fibonacciBackoff",
      "fullJitterBackoff",
      "capDelay",
      "defaultRetryStatus",
      "applyAndDelay",
      "applyPolicy",
      "retryPolicy",
      "limitRetries",
      "limitRetriesByDelay",
      "limitRetriesByCumulativeDelay",
      "retrying",
      "recovering"
    ]
  },
  "affjax": {
    "Affjax.RequestBody": [],
    "Affjax.RequestHeader": [],
    "Affjax.ResponseFormat": [],
    "Affjax.ResponseHeader": [],
    "Affjax.StatusCode": [],
    "Affjax": [
      "defaultRequest",
      "printError",
      "request",
      "get",
      "post",
      "post_",
      "put",
      "put_",
      "delete",
      "delete_",
      "patch",
      "patch_"
    ]
  },
  "affjax-node": {
    "Affjax.Node": [
      "driver",
      "request",
      "get",
      "post",
      "post_",
      "put",
      "put_",
      "delete",
      "delete_",
      "patch",
      "patch_"
    ]
  },
  "affjax-web": {
    "Affjax.Web": [
      "driver",
      "request",
      "get",
      "post",
      "post_",
      "put",
      "put_",
      "delete",
      "delete_",
      "patch",
      "patch_"
    ]
  },
  "ansi": {
    "Ansi.Codes": [],
    "Ansi.Output": []
  },
  "argonaut": {
    "Data.Argonaut": []
  },
  "argonaut-aeson-generic": {
    "Data.Argonaut.Aeson.Decode.Generic": [
      "decodeAeson",
      "decodeAeson'",
      "genericDecodeAeson"
    ],
    "Data.Argonaut.Aeson.Encode.Generic": [
      "encodeFields",
      "encodeAeson",
      "encodeAeson'",
      "encodeRepArgs",
      "genericEncodeAeson"
    ],
    "Data.Argonaut.Aeson.Helpers": [],
    "Data.Argonaut.Aeson.Options": [
      "defaultOptions"
    ]
  },
  "argonaut-codecs": {
    "Data.Argonaut.Decode.Class": [],
    "Data.Argonaut.Decode.Combinators": [
      "getField",
      "getFieldOptional",
      "getFieldOptional'",
      "defaultField"
    ],
    "Data.Argonaut.Decode.Decoders": [],
    "Data.Argonaut.Decode.Error": [],
    "Data.Argonaut.Decode.Parser": [],
    "Data.Argonaut.Decode": [
      "fromJsonString"
    ],
    "Data.Argonaut.Encode.Class": [],
    "Data.Argonaut.Encode.Combinators": [],
    "Data.Argonaut.Encode.Encoders": [],
    "Data.Argonaut.Encode": [
      "toJsonString"
    ]
  },
  "argonaut-core": {
    "Data.Argonaut.Core": [
      "caseJson",
      "caseJsonNull",
      "caseJsonBoolean",
      "caseJsonNumber",
      "caseJsonString",
      "caseJsonArray",
      "caseJsonObject",
      "isNull",
      "isBoolean",
      "isNumber",
      "isString",
      "isArray",
      "isObject",
      "fromBoolean",
      "fromNumber",
      "fromString",
      "fromArray",
      "fromObject",
      "toNull",
      "toBoolean",
      "toNumber",
      "toString",
      "toArray",
      "toObject",
      "jsonNull",
      "jsonTrue",
      "jsonFalse",
      "jsonZero",
      "jsonEmptyString",
      "jsonEmptyArray",
      "jsonSingletonArray",
      "jsonEmptyObject",
      "jsonSingletonObject",
      "stringify",
      "stringifyWithIndent"
    ],
    "Data.Argonaut.Gen": [],
    "Data.Argonaut.Parser": [
      "jsonParser"
    ]
  },
  "argonaut-generic": {
    "Data.Argonaut.Decode.Generic": [
      "decodeRep",
      "decodeRepWith",
      "decodeRepArgs",
      "genericDecodeJson",
      "genericDecodeJsonWith",
      "decodeLiteralSum",
      "decodeLiteralSumWithTransform",
      "decodeLiteral"
    ],
    "Data.Argonaut.Encode.Generic": [
      "encodeRep",
      "encodeRepWith",
      "encodeRepArgs",
      "genericEncodeJson",
      "genericEncodeJsonWith",
      "encodeLiteralSum",
      "encodeLiteralSumWithTransform",
      "encodeLiteral"
    ],
    "Data.Argonaut.Types.Generic": [
      "defaultEncoding"
    ]
  },
  "argonaut-traversals": {
    "Data.Argonaut.JCursor.Gen": [],
    "Data.Argonaut.JCursor": [],
    "Data.Argonaut.Prisms": [],
    "Data.Argonaut.Traversals": []
  },
  "argparse-basic": {
    "ArgParse.Basic": [
      "flag",
      "flagHelp",
      "flagInfo",
      "argument",
      "fromRecord",
      "unformat",
      "int",
      "number",
      "boolean",
      "separated",
      "many",
      "many1",
      "unfolded",
      "unfolded1",
      "folded",
      "folded1",
      "default",
      "optional",
      "choose",
      "command",
      "any",
      "anyNotFlag",
      "rest",
      "parseArgs",
      "printArgError",
      "printHelp",
      "parserHelp",
      "buildRecordArgs"
    ]
  },
  "array-builder": {
    "Data.Array.Builder": []
  },
  "arraybuffer": {
    "Data.ArrayBuffer.ArrayBuffer.Gen": [],
    "Data.ArrayBuffer.ArrayBuffer": [
      "empty",
      "byteLength",
      "slice"
    ],
    "Data.ArrayBuffer.Cast": [
      "fromInt8Array",
      "fromUint8Array",
      "fromUint8ClampedArray",
      "toInt8Array",
      "toUint8Array",
      "toUint8ClampedArray"
    ],
    "Data.ArrayBuffer.DataView.Gen": [],
    "Data.ArrayBuffer.DataView": [
      "buffer",
      "byteLength",
      "byteOffset",
      "get",
      "getBE",
      "getFloat32be",
      "getFloat32le",
      "getFloat64be",
      "getFloat64le",
      "getInt16be",
      "getInt16le",
      "getInt32be",
      "getInt32le",
      "getInt8",
      "getLE",
      "getUint16be",
      "getUint16le",
      "getUint32be",
      "getUint32le",
      "getUint8",
      "part",
      "remainder",
      "set",
      "setBE",
      "setFloat32be",
      "setFloat32le",
      "setFloat64be",
      "setFloat64le",
      "setInt16be",
      "setInt16le",
      "setInt32be",
      "setInt32le",
      "setInt8",
      "setLE",
      "setUint16be",
      "setUint16le",
      "setUint32be",
      "setUint32le",
      "setUint8",
      "whole"
    ],
    "Data.ArrayBuffer.Typed.Gen": [],
    "Data.ArrayBuffer.Typed": [
      "buffer",
      "byteOffset",
      "byteLength",
      "length",
      "compare",
      "eq",
      "create",
      "whole",
      "remainder",
      "part",
      "empty",
      "fromArray",
      "fill",
      "set",
      "setTyped",
      "copyWithin",
      "map",
      "traverse",
      "traverse_",
      "filter",
      "mapWithIndex",
      "traverseWithIndex",
      "traverseWithIndex_",
      "filterWithIndex",
      "sort",
      "reverse",
      "elem",
      "all",
      "any",
      "allWithIndex",
      "anyWithIndex",
      "unsafeAt",
      "hasIndex",
      "at",
      "reduce",
      "reduce1",
      "foldl",
      "foldl1",
      "reduceRight",
      "reduceRight1",
      "foldr",
      "foldr1",
      "foldlWithIndex",
      "foldrWithIndex",
      "find",
      "findIndex",
      "findWithIndex",
      "indexOf",
      "lastIndexOf",
      "slice",
      "subArray",
      "toString",
      "join",
      "toArray"
    ],
    "Data.ArrayBuffer.ValueMapping": [
      "byteWidth"
    ]
  },
  "arraybuffer-builder": {
    "Data.ArrayBuffer.Builder": [
      "execPutM",
      "execPut",
      "subBuilder",
      "putArrayBuffer",
      "putDataView",
      "putDataBuff",
      "putUint8",
      "putInt8",
      "putUint16be",
      "putUint16le",
      "putInt16be",
      "putInt16le",
      "putUint32be",
      "putUint32le",
      "putInt32be",
      "putInt32le",
      "putFloat32be",
      "putFloat32le",
      "putFloat64be",
      "putFloat64le"
    ],
    "Data.ArrayBuffer.Builder.Internal": [
      "toView",
      "execBuilder",
      "length",
      "foldl",
      "foldM",
      "singleton",
      "cons",
      "snoc",
      "encodeUint8",
      "encodeInt8",
      "encodeUint16be",
      "encodeUint16le",
      "encodeInt16be",
      "encodeInt16le",
      "encodeUint32be",
      "encodeUint32le",
      "encodeInt32be",
      "encodeInt32le",
      "encodeFloat32be",
      "encodeFloat32le",
      "encodeFloat64be",
      "encodeFloat64le"
    ]
  },
  "arraybuffer-types": {
    "Data.ArrayBuffer.Types": []
  },
  "arrays": {
    "Data.Array.NonEmpty.Internal": [],
    "Data.Array.NonEmpty": [
      "fromArray",
      "fromNonEmpty",
      "toArray",
      "toNonEmpty",
      "fromFoldable",
      "fromFoldable1",
      "toUnfoldable",
      "toUnfoldable1",
      "singleton",
      "range",
      "replicate",
      "some",
      "length",
      "cons",
      "cons'",
      "snoc",
      "snoc'",
      "appendArray",
      "prependArray",
      "insert",
      "insertBy",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "unsnoc",
      "index",
      "elem",
      "notElem",
      "elemIndex",
      "elemLastIndex",
      "find",
      "findMap",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "deleteAt",
      "updateAt",
      "updateAtIndices",
      "modifyAt",
      "modifyAtIndices",
      "alterAt",
      "intersperse",
      "reverse",
      "concat",
      "concatMap",
      "filter",
      "partition",
      "splitAt",
      "filterA",
      "mapMaybe",
      "catMaybes",
      "mapWithIndex",
      "foldl1",
      "foldr1",
      "foldMap1",
      "fold1",
      "intercalate",
      "transpose",
      "transpose'",
      "scanl",
      "scanr",
      "sort",
      "sortBy",
      "sortWith",
      "slice",
      "take",
      "takeEnd",
      "takeWhile",
      "drop",
      "dropEnd",
      "dropWhile",
      "span",
      "group",
      "groupAll",
      "groupBy",
      "groupAllBy",
      "nub",
      "nubBy",
      "nubEq",
      "nubByEq",
      "union",
      "union'",
      "unionBy",
      "unionBy'",
      "delete",
      "deleteBy",
      "difference",
      "difference'",
      "intersect",
      "intersect'",
      "intersectBy",
      "intersectBy'",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "any",
      "all",
      "foldM",
      "foldRecM",
      "unsafeIndex"
    ],
    "Data.Array.Partial": [
      "head",
      "tail",
      "last",
      "init"
    ],
    "Data.Array.ST.Iterator": [
      "iterator",
      "iterate",
      "next",
      "peek",
      "exhausted",
      "pushWhile",
      "pushAll"
    ],
    "Data.Array.ST.Partial": [
      "peek",
      "poke"
    ],
    "Data.Array.ST": [
      "run",
      "withArray",
      "new",
      "peek",
      "poke",
      "modify",
      "length",
      "pop",
      "push",
      "pushAll",
      "shift",
      "unshift",
      "unshiftAll",
      "splice",
      "sort",
      "sortBy",
      "sortWith",
      "freeze",
      "thaw",
      "unsafeFreeze",
      "unsafeThaw",
      "toAssocArray"
    ],
    "Data.Array": [
      "fromFoldable",
      "toUnfoldable",
      "singleton",
      "range",
      "replicate",
      "some",
      "many",
      "null",
      "length",
      "cons",
      "snoc",
      "insert",
      "insertBy",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "unsnoc",
      "index",
      "elem",
      "notElem",
      "elemIndex",
      "elemLastIndex",
      "find",
      "findMap",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "deleteAt",
      "updateAt",
      "updateAtIndices",
      "modifyAt",
      "modifyAtIndices",
      "alterAt",
      "intersperse",
      "reverse",
      "concat",
      "concatMap",
      "filter",
      "partition",
      "splitAt",
      "filterA",
      "mapMaybe",
      "catMaybes",
      "mapWithIndex",
      "foldl",
      "foldr",
      "foldMap",
      "fold",
      "intercalate",
      "transpose",
      "scanl",
      "scanr",
      "sort",
      "sortBy",
      "sortWith",
      "slice",
      "take",
      "takeEnd",
      "takeWhile",
      "drop",
      "dropEnd",
      "dropWhile",
      "span",
      "group",
      "groupAll",
      "groupBy",
      "groupAllBy",
      "nub",
      "nubEq",
      "nubBy",
      "nubByEq",
      "union",
      "unionBy",
      "delete",
      "deleteBy",
      "difference",
      "intersect",
      "intersectBy",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "any",
      "all",
      "foldM",
      "foldRecM",
      "unsafeIndex"
    ]
  },
  "arrays-zipper": {
    "Data.Zipper.ArrayZipper": [
      "asArrayZipper",
      "toArrayZipperFirst",
      "toArrayZipperLast",
      "toArrayZipperAt",
      "toArrayZipperAt'",
      "exposeArray",
      "exposeMaxIndex",
      "exposeFocusIndex",
      "hasPrev",
      "hasNext",
      "prev",
      "next",
      "shiftFocusBy",
      "shiftFocusBy'",
      "shiftFocusByFind",
      "shiftFocusByFind'",
      "shiftFocusTo",
      "shiftFocusTo'",
      "shiftFocusFirst",
      "shiftFocusLast",
      "getFocus",
      "setFocus",
      "modifyFocus",
      "pushPrev",
      "pushNext",
      "pushPrevRefocus",
      "pushNextRefocus"
    ]
  },
  "ask": {
    "Control.Ask": [
      "ask",
      "askFor",
      "provide",
      "local"
    ]
  },
  "assert": {
    "Test.Assert": [
      "assert",
      "assert'",
      "assertEqual",
      "assertEqual'",
      "assertFalse",
      "assertFalse'",
      "assertThrows",
      "assertThrows'",
      "assertTrue",
      "assertTrue'"
    ]
  },
  "avar": {
    "Effect.Aff.AVar": [
      "new",
      "empty",
      "status",
      "take",
      "tryTake",
      "put",
      "tryPut",
      "read",
      "tryRead",
      "kill"
    ],
    "Effect.AVar": [
      "new",
      "empty",
      "take",
      "tryTake",
      "put",
      "tryPut",
      "read",
      "tryRead",
      "kill",
      "status",
      "isEmpty",
      "isFilled",
      "isKilled"
    ]
  },
  "b64": {
    "Data.Binary.Base64": [
      "decode",
      "encode",
      "encodeUrl"
    ],
    "Data.String.Base64.Internal": [
      "atobIsDefined",
      "btoaIsDefined",
      "uint8ArrayToBtoaSafeString",
      "unsafeFromRight",
      "unsafeStringToUint8ArrayOfCharCodes",
      "toUrlSafe",
      "toRfc4648"
    ],
    "Data.String.Base64": [
      "atob",
      "btoa",
      "decode",
      "encode",
      "encodeUrl"
    ]
  },
  "barbies": {
    "Data.Barbie": []
  },
  "barlow-lens": {
    "Data.Lens.Barlow.Construction": [],
    "Data.Lens.Barlow.Generic": [],
    "Data.Lens.Barlow.Helpers": [],
    "Data.Lens.Barlow.Parser": [],
    "Data.Lens.Barlow.Types": [],
    "Data.Lens.Barlow": []
  },
  "basic-auth": {
    "Node.BasicAuth": [
      "authenticate"
    ]
  },
  "bifunctors": {
    "Control.Biapplicative": [],
    "Control.Biapply": [],
    "Data.Bifunctor.Join": [],
    "Data.Bifunctor": []
  },
  "bigints": {
    "Data.BigInt": [
      "fromString",
      "fromBase",
      "fromInt",
      "fromNumber",
      "fromTLInt",
      "toString",
      "toNonEmptyString",
      "toBase",
      "toBase'",
      "digitsInBase",
      "abs",
      "even",
      "odd",
      "prime",
      "pow",
      "not",
      "or",
      "xor",
      "and",
      "shl",
      "shr",
      "quot",
      "rem",
      "toInt",
      "toNumber"
    ]
  },
  "bolson": {
    "Bolson.Control": [
      "flatten",
      "globalPortalComplexComplex",
      "globalPortalSimpleComplex",
      "globalPortalComplexSimple",
      "portalComplexComplex",
      "portalSimpleComplex",
      "portalComplexSimple",
      "fixComplexComplex",
      "switcher"
    ],
    "Bolson.Core": []
  },
  "bower-json": {
    "Web.Bower.PackageMeta": [
      "readPackageMeta",
      "writePackageMeta"
    ]
  },
  "bucketchain": {
    "Bucketchain.Http": [
      "toRequest",
      "httpStream",
      "httpVersion",
      "requestHeaders",
      "requestMethod",
      "requestOriginalURL",
      "requestURL",
      "requestBody",
      "toReadable",
      "responseHeader",
      "responseHeaders",
      "statusCode",
      "setHeader",
      "setHeaders",
      "setRequestURL",
      "setStatusCode",
      "setStatusMessage",
      "toWritable",
      "onFinish"
    ],
    "Bucketchain.Middleware": [
      "runMiddleware"
    ],
    "Bucketchain.ResponseBody": [
      "toReadable",
      "fromReadable",
      "maybeToBody",
      "body"
    ],
    "Bucketchain.Stream": [],
    "Bucketchain.Test": [],
    "Bucketchain": [
      "createServer",
      "listen"
    ]
  },
  "bucketchain-basic-auth": {
    "Bucketchain.BasicAuth": []
  },
  "bucketchain-conditional": {
    "Bucketchain.Conditional": [
      "withConditionalGet"
    ]
  },
  "bucketchain-cors": {
    "Bucketchain.CORS": [
      "defaultOptions",
      "withCORS"
    ]
  },
  "bucketchain-csrf": {
    "Bucketchain.CSRF": [
      "withCSRFProtection"
    ]
  },
  "bucketchain-header-utils": {
    "Bucketchain.Header.Cookie": [
      "addCookie",
      "getCookies"
    ],
    "Bucketchain.Header.Vary": [
      "addVary"
    ]
  },
  "bucketchain-health": {
    "Bucketchain.Health": []
  },
  "bucketchain-history-api-fallback": {
    "Bucketchain.HistoryAPIFallback": [
      "defaultIndexDetector",
      "withHistoryAPIFallback"
    ]
  },
  "bucketchain-logger": {
    "Bucketchain.Logger.Error": [],
    "Bucketchain.Logger.HTTP.LTSV": [],
    "Bucketchain.Logger.HTTP.Token": [
      "token",
      "label",
      "tokenizer",
      "date",
      "httpVersion",
      "url",
      "method",
      "referrer",
      "userAgent",
      "remoteAddr",
      "status",
      "responseTime"
    ],
    "Bucketchain.Logger.HTTP.Tokenizer": [
      "runTokenizer"
    ]
  },
  "bucketchain-secure": {
    "Bucketchain.Secure.ContentTypeOptions": [],
    "Bucketchain.Secure.DownloadOptions": [],
    "Bucketchain.Secure.FrameOptions": [],
    "Bucketchain.Secure.HSTS": [
      "withHSTS"
    ],
    "Bucketchain.Secure.XSSProtection": [],
    "Bucketchain.Secure": []
  },
  "bucketchain-simple-api": {
    "Bucketchain.SimpleAPI.Auth.Class": [],
    "Bucketchain.SimpleAPI.Auth": [],
    "Bucketchain.SimpleAPI.Batch": [],
    "Bucketchain.SimpleAPI.Body": [
      "decodeBody"
    ],
    "Bucketchain.SimpleAPI.Class": [],
    "Bucketchain.SimpleAPI.FreeT.Class": [],
    "Bucketchain.SimpleAPI.JSON": [
      "success",
      "failure"
    ],
    "Bucketchain.SimpleAPI.Proc": [
      "askExtra",
      "askRaw",
      "runProc",
      "context"
    ],
    "Bucketchain.SimpleAPI.RawData": [],
    "Bucketchain.SimpleAPI.Response.Class": [],
    "Bucketchain.SimpleAPI.Response": [
      "response",
      "responseStatus",
      "responseBody",
      "fromResponses",
      "invalidRequestResponse",
      "unauthorizedResponse"
    ],
    "Bucketchain.SimpleAPI": []
  },
  "bucketchain-sslify": {
    "Bucketchain.SSLify": [
      "defaultOptions",
      "withForceHttps"
    ]
  },
  "bucketchain-static": {
    "Bucketchain.Static.ContentType": [
      "contentTypeFromPath"
    ],
    "Bucketchain.Static": [
      "withStatic"
    ]
  },
  "call-by-name": {
    "CallByName.Alt": [],
    "CallByName.Applicative": [],
    "CallByName.Class": [],
    "CallByName.Monoid": [],
    "CallByName.Syntax": []
  },
  "canvas": {
    "Graphics.Canvas": [
      "getCanvasElementById",
      "getContext2D",
      "getCanvasWidth",
      "setCanvasWidth",
      "getCanvasHeight",
      "setCanvasHeight",
      "getCanvasDimensions",
      "setCanvasDimensions",
      "canvasToDataURL",
      "setLineWidth",
      "setLineDash",
      "setFillStyle",
      "setStrokeStyle",
      "setShadowBlur",
      "setShadowOffsetX",
      "setShadowOffsetY",
      "setShadowColor",
      "setMiterLimit",
      "setLineCap",
      "setLineJoin",
      "setGlobalCompositeOperation",
      "setGlobalAlpha",
      "beginPath",
      "stroke",
      "fill",
      "clip",
      "lineTo",
      "moveTo",
      "closePath",
      "strokePath",
      "fillPath",
      "arc",
      "rect",
      "fillRect",
      "strokeRect",
      "clearRect",
      "scale",
      "rotate",
      "translate",
      "transform",
      "setTransform",
      "textAlign",
      "setTextAlign",
      "textBaseline",
      "setTextBaseline",
      "font",
      "setFont",
      "fillText",
      "strokeText",
      "measureText",
      "save",
      "restore",
      "withContext",
      "tryLoadImage",
      "getImageData",
      "putImageData",
      "putImageDataFull",
      "createImageData",
      "createImageDataCopy",
      "createImageDataWith",
      "imageDataWidth",
      "imageDataHeight",
      "imageDataBuffer",
      "canvasElementToImageSource",
      "drawImage",
      "drawImageScale",
      "drawImageFull",
      "createPattern",
      "setPatternFillStyle",
      "createLinearGradient",
      "createRadialGradient",
      "addColorStop",
      "setGradientFillStyle",
      "quadraticCurveTo",
      "bezierCurveTo"
    ]
  },
  "canvas-action": {
    "Graphics.CanvasAction.Class": [
      "liftCanvasAction",
      "liftCanvasAff"
    ],
    "Graphics.CanvasAction.CSSOM": [
      "devicePixelRatio",
      "fromEventTarget",
      "toEventTarget",
      "matchMedia",
      "fromEvent",
      "toEvent"
    ],
    "Graphics.CanvasAction.Path": [
      "getCursor",
      "getSubpathStart",
      "moveTo",
      "closePath",
      "lineTo",
      "quadraticCurveTo",
      "bezierCurveTo",
      "arcTo",
      "arcTo_",
      "ellipse",
      "arc",
      "rect",
      "addPath",
      "addPath'",
      "runPath",
      "fill",
      "fillWith",
      "stroke",
      "strokeWith",
      "clip",
      "moveBy",
      "lineBy",
      "line",
      "lines",
      "polygon",
      "circle",
      "arcBy",
      "arcBy_",
      "abortSubpath"
    ],
    "Graphics.CanvasAction.Run": [],
    "Graphics.CanvasAction.Transformation": [
      "multiplyDOMMatrix",
      "invertDOMMatrix",
      "fromRecord",
      "fromNumbers",
      "toRecord",
      "transform",
      "getTransform",
      "setTransform",
      "resetTransform",
      "transformedBy",
      "transformedTo",
      "transformPoint",
      "translate",
      "scale",
      "rotate",
      "rotateAround",
      "skew"
    ],
    "Graphics.CanvasAction.Types": [],
    "Graphics.CanvasAction": [
      "createCanvas",
      "createCanvas'",
      "getCanvasElementById",
      "querySelectCanvas",
      "getContext2D",
      "getContext2DById",
      "querySelectContext2D",
      "runActionOffscreen",
      "runActionOffscreen'",
      "asEffect",
      "launchCanvasAff",
      "launchCanvasAff_",
      "withFull",
      "withMidPos",
      "getCanvas",
      "getCtx",
      "fillRect",
      "fillRectFull",
      "strokeRect",
      "strokeRectFull",
      "clearRect",
      "clearRectFull",
      "styleIsString",
      "styleIsGradient",
      "styleIsPattern",
      "styleToString",
      "styleToGradient",
      "styleToPattern",
      "toStyleRep",
      "toColorRep",
      "toStyleRepDefault",
      "setFillStyle",
      "setStrokeStyle",
      "getFillStyle",
      "getStrokeStyle",
      "filled",
      "stroked",
      "setLineWidth",
      "setLineDash",
      "setShadowBlur",
      "setShadowOffsetX",
      "setShadowOffsetY",
      "setShadowOffset",
      "setShadowColor",
      "setMiterLimit",
      "setLineCap",
      "setLineJoin",
      "setGlobalCompositeOperation",
      "setGlobalAlpha",
      "getTextAlign",
      "setTextAlign",
      "getTextBaseline",
      "setTextBaseline",
      "getFont",
      "setFont",
      "fillText",
      "strokeText",
      "measureText",
      "getDimensions",
      "setDimensions",
      "getHeight",
      "setHeight",
      "getWidth",
      "setWidth",
      "toDataUrl",
      "getImageData",
      "putImageDataFull",
      "putImageData",
      "createImageData",
      "createImageDataCopy",
      "imageSource",
      "drawImage",
      "drawImageScale",
      "drawImageFull",
      "tryLoadImage",
      "tryLoadImage'",
      "loadImageAff",
      "setImageSmoothing",
      "getImageSmoothing",
      "createPattern",
      "linearGradient",
      "radialGradient",
      "createLinearGradient",
      "createRadialGradient",
      "addColorStop",
      "save",
      "restore",
      "restoreAfter"
    ]
  },
  "cartesian": {
    "Data.Complex": []
  },
  "catenable-lists": {
    "Data.CatList": [
      "empty",
      "null",
      "singleton",
      "length",
      "append",
      "cons",
      "snoc",
      "uncons",
      "fromFoldable"
    ],
    "Data.CatQueue": [
      "empty",
      "null",
      "singleton",
      "length",
      "cons",
      "snoc",
      "uncons",
      "unsnoc",
      "fromFoldable"
    ]
  },
  "channel": {
    "Concurrent.Channel": []
  },
  "checked-exceptions": {
    "Control.Monad.Except.Checked": [
      "handleError",
      "handleErrors",
      "safe"
    ]
  },
  "classless": {
    "Classless": [
      "init",
      "initProduct",
      "initRecord",
      "initSum",
      "mapProduct",
      "mapSum",
      "mapSumProp",
      "sequenceProduct",
      "sequenceRecord",
      "sequenceRecordRL",
      "noArgs",
      "pick"
    ]
  },
  "classless-arbitrary": {
    "Classless.Arbitrary": [
      "additive",
      "array",
      "boolean",
      "char",
      "conj",
      "disj",
      "dual",
      "either",
      "first",
      "identity",
      "int",
      "last",
      "list",
      "maybe",
      "multiplicative",
      "nonEmptyArray",
      "nonEmptyString",
      "number",
      "ordering",
      "record",
      "string",
      "sum",
      "tuple",
      "record'",
      "unit",
      "getCases",
      "homRecToNEA"
    ]
  },
  "classless-decode-json": {
    "Classless.DecodeJson.Generic": [
      "decodeRepWith",
      "decodeRepArgs",
      "sum"
    ],
    "Classless.DecodeJson": [
      "array",
      "boolean",
      "gDecodeJson",
      "either",
      "int",
      "record",
      "string",
      "tuple",
      "decodeJsonField",
      "maybe",
      "number"
    ]
  },
  "classless-encode-json": {
    "Classless.EncodeJson.Generic": [
      "encodeRepWith",
      "encodeRepArgs",
      "sum"
    ],
    "Classless.EncodeJson.Record": [
      "record",
      "gEncodeJson"
    ],
    "Classless.EncodeJson": [
      "array",
      "boolean",
      "char",
      "either",
      "int",
      "maybe",
      "string",
      "tuple"
    ]
  },
  "classnames": {
    "ClassNames": [
      "classNames'",
      "classNames",
      "recToClassNames"
    ]
  },
  "codec": {
    "Data.Codec": []
  },
  "codec-argonaut": {
    "Data.Codec.Argonaut.Common": [],
    "Data.Codec.Argonaut.Compat": [],
    "Data.Codec.Argonaut.Generic": [],
    "Data.Codec.Argonaut.Migration": [
      "addDefaultField",
      "updateField",
      "addDefaultOrUpdateField",
      "renameField",
      "nestForTagged"
    ],
    "Data.Codec.Argonaut.Record": [],
    "Data.Codec.Argonaut.Sum": [
      "enumSum",
      "taggedSum"
    ],
    "Data.Codec.Argonaut.Variant": [],
    "Data.Codec.Argonaut": [
      "printJsonDecodeError",
      "json",
      "null",
      "boolean",
      "number",
      "int",
      "string",
      "codePoint",
      "char",
      "jarray",
      "jobject",
      "void",
      "array",
      "indexedArray",
      "index",
      "object",
      "prop",
      "record",
      "recordProp",
      "recordPropOptional",
      "fix",
      "named",
      "coercible",
      "prismaticCodec"
    ]
  },
  "colors": {
    "Color.Blending": [
      "blend"
    ],
    "Color.Scale": [
      "colorStop",
      "stopRatio",
      "stopColor",
      "colorScale",
      "combineStops'",
      "combineStops",
      "reverseStops",
      "uniformScale",
      "uniformScale'",
      "addStop",
      "addStop'",
      "sample",
      "cubehelixSample",
      "mkSimpleSampler",
      "colors",
      "colors'",
      "modify",
      "modify'",
      "grayscale",
      "hot",
      "cool",
      "spectrum",
      "spectrumLCh",
      "blueToRed",
      "yellowToRed",
      "cubehelix",
      "minColorStops",
      "cssColorStops",
      "cssColorStopsRGB"
    ],
    "Color": [
      "rgba",
      "rgb",
      "rgba'",
      "rgb'",
      "hsla",
      "hsl",
      "hsva",
      "hsv",
      "xyz",
      "lab",
      "lch",
      "fromHexString",
      "fromInt",
      "toHSLA",
      "toHSVA",
      "toRGBA",
      "toRGBA'",
      "toXYZ",
      "toLab",
      "toLCh",
      "toHexString",
      "cssStringHSLA",
      "cssStringRGBA",
      "black",
      "white",
      "graytone",
      "rotateHue",
      "complementary",
      "lighten",
      "darken",
      "saturate",
      "desaturate",
      "toGray",
      "mix",
      "mixCubehelix",
      "brightness",
      "luminance",
      "contrast",
      "isLight",
      "isReadable",
      "textColor",
      "distance"
    ]
  },
  "concur-core": {
    "Concur.Core.DevTools": [],
    "Concur.Core.Discharge": [],
    "Concur.Core.DOM": [],
    "Concur.Core.ElementBuilder": [],
    "Concur.Core.FRP": [],
    "Concur.Core.Gen": [],
    "Concur.Core.IsWidget": [],
    "Concur.Core.LiftWidget": [],
    "Concur.Core.Patterns": [
      "loopState",
      "retryUntil",
      "retryUntilLoop",
      "tea",
      "remoteWidget",
      "forkAction",
      "forkActionState",
      "mapWire",
      "local",
      "with",
      "send"
    ],
    "Concur.Core.Props": [],
    "Concur.Core.Types": [],
    "Concur.Core": [],
    "Control.Cofree": [
      "buildCofree",
      "lazyCofree",
      "deferCofree",
      "explore",
      "exploreM",
      "head",
      "lazyHead",
      "hoistCofree",
      "mkCofree",
      "tail",
      "lazyTail",
      "mfix",
      "unfoldCofree"
    ],
    "Control.MonadFix": [],
    "Control.MultiAlternative": [],
    "Control.ShiftMap": []
  },
  "concur-react": {
    "Concur.React.DOM": [],
    "Concur.React.Props": [],
    "Concur.React.Run": [],
    "Concur.React.SVG": [],
    "Concur.React.Widgets": [],
    "Concur.React": []
  },
  "concurrent-queues": {
    "Concurrent.BoundedQueue.Internal": [],
    "Concurrent.BoundedQueue.Sync": [
      "new",
      "isEmpty",
      "tryRead",
      "tryWrite"
    ],
    "Concurrent.BoundedQueue": [
      "new",
      "write",
      "read",
      "isEmpty",
      "tryRead",
      "tryWrite"
    ],
    "Concurrent.Queue": [
      "new",
      "read",
      "write",
      "tryRead"
    ]
  },
  "console": {
    "Effect.Class.Console": [],
    "Effect.Console": []
  },
  "const": {
    "Data.Const": []
  },
  "contravariant": {
    "Data.Comparison": [],
    "Data.Decidable": [],
    "Data.Decide": [],
    "Data.Divide": [],
    "Data.Divisible": [],
    "Data.Equivalence": [],
    "Data.Functor.Contravariant": [],
    "Data.Op": [],
    "Data.Predicate": []
  },
  "control": {
    "Control.Alt": [
      "alt"
    ],
    "Control.Alternative": [
      "guard"
    ],
    "Control.Comonad": [
      "extract"
    ],
    "Control.Extend": [
      "extend",
      "extendFlipped",
      "composeCoKleisli",
      "composeCoKleisliFlipped",
      "duplicate"
    ],
    "Control.Lazy": [],
    "Control.MonadPlus": [],
    "Control.Plus": [
      "empty"
    ],
    "Data.Monoid.Alternate": []
  },
  "convertable-options": {
    "ConvertableOptions": []
  },
  "coroutines": {
    "Control.Coroutine": [
      "loop",
      "runProcess",
      "fuseWith",
      "fuseWithL",
      "emit",
      "producer",
      "await",
      "consumer",
      "transform",
      "cotransform",
      "connect",
      "pullFrom",
      "transformProducer",
      "transformConsumer",
      "composeTransformers",
      "composeCoTransformers",
      "fuseCoTransform",
      "transformCoTransformL",
      "transformCoTransformR",
      "joinProducers",
      "joinConsumers"
    ]
  },
  "crypto": {
    "Node.Crypto.Cipher": [
      "createCipheriv",
      "update",
      "final"
    ],
    "Node.Crypto.Decipher": [
      "createDecipheriv",
      "update",
      "final"
    ],
    "Node.Crypto.Hash": [
      "createHash",
      "update",
      "digest"
    ],
    "Node.Crypto.Hmac": [
      "createHmac",
      "update",
      "digest"
    ],
    "Node.Crypto": [
      "timingSafeEqual",
      "randomBytes",
      "scrypt",
      "scryptSync"
    ]
  },
  "css": {
    "CSS.Animation": [],
    "CSS.Background": [
      "background",
      "backgroundColor",
      "backgroundPosition",
      "backgroundPositions",
      "placed",
      "positioned",
      "backgroundSize",
      "backgroundSizes",
      "contain",
      "cover",
      "by",
      "backgroundRepeat",
      "backgroundRepeats",
      "repeat",
      "space",
      "round",
      "noRepeat",
      "xyRepeat",
      "repeatX",
      "repeatY",
      "backgroundOrigin",
      "backgroundOrigins",
      "origin",
      "backgroundClip",
      "backgroundClips",
      "boxClip",
      "backgroundAttachment",
      "backgroundAttachments",
      "attachFixed",
      "attachScroll",
      "backgroundImage",
      "backgroundImages",
      "url",
      "sideTop",
      "sideLeft",
      "sideRight",
      "sideBottom",
      "sideCenter",
      "sideMiddle",
      "straight",
      "angular",
      "location"
    ],
    "CSS.Border": [
      "solid",
      "dotted",
      "dashed",
      "double",
      "wavy",
      "groove",
      "ridge",
      "inset",
      "outset",
      "border",
      "borderTop",
      "borderLeft",
      "borderBottom",
      "borderRight",
      "borderColor",
      "outline",
      "outlineColor",
      "outlineStyle",
      "outlineWidth",
      "outlineOffset",
      "borderRadius",
      "borderSpacing"
    ],
    "CSS.Box": [
      "paddingBox",
      "borderBox",
      "contentBox",
      "boxSizing",
      "boxShadow",
      "shadow",
      "shadowWithBlur",
      "shadowWithSpread",
      "bsInset",
      "bsColor"
    ],
    "CSS.Color": [],
    "CSS.Common": [],
    "CSS.Cursor": [],
    "CSS.Display": [],
    "CSS.Elements": [],
    "CSS.Flexbox": [],
    "CSS.Font": [],
    "CSS.FontFace": [],
    "CSS.FontStyle": [],
    "CSS.Geometry": [],
    "CSS.Gradient": [
      "linearGradient",
      "hGradient",
      "vGradient",
      "circle",
      "ellipse",
      "circular",
      "elliptical",
      "closestSide",
      "closestCorner",
      "farthestSide",
      "farthestCorner",
      "radialGradient",
      "repeatingLinearGradient",
      "hRepeatingGradient",
      "vRepeatingGradient",
      "repeatingRadialGradient"
    ],
    "CSS.ListStyle.Image": [],
    "CSS.ListStyle.Position": [],
    "CSS.ListStyle.Type": [],
    "CSS.ListStyle": [],
    "CSS.Media": [],
    "CSS.Overflow": [],
    "CSS.Property": [],
    "CSS.Pseudo": [],
    "CSS.Render": [],
    "CSS.Selector": [],
    "CSS.Size": [],
    "CSS.String": [],
    "CSS.Stylesheet": [],
    "CSS.Text.Direction": [],
    "CSS.Text.Overflow": [
      "textOverflow",
      "clip",
      "ellipsis",
      "custom"
    ],
    "CSS.Text.Shadow": [],
    "CSS.Text.Transform": [
      "textTransform",
      "lowercase",
      "uppercase",
      "capitalize"
    ],
    "CSS.Text.Whitespace": [
      "whitespaceNormal",
      "whitespacePre",
      "whitespaceNoWrap",
      "whitespacePreWrap",
      "whitespacePreLine",
      "textWhitespace"
    ],
    "CSS.Text": [],
    "CSS.TextAlign": [],
    "CSS.Time": [],
    "CSS.Transform": [],
    "CSS.Transition": [],
    "CSS.VerticalAlign": [],
    "CSS": []
  },
  "datetime": {
    "Data.Date.Component.Gen": [],
    "Data.Date.Component": [],
    "Data.Date.Gen": [
      "genDate"
    ],
    "Data.Date": [
      "canonicalDate",
      "exactDate",
      "year",
      "month",
      "day",
      "weekday",
      "diff",
      "isLeapYear",
      "lastDayOfMonth",
      "adjust"
    ],
    "Data.DateTime.Gen": [
      "genDateTime"
    ],
    "Data.DateTime.Instant": [
      "instant",
      "unInstant",
      "fromDateTime",
      "fromDate",
      "toDateTime",
      "diff"
    ],
    "Data.DateTime": [
      "date",
      "modifyDate",
      "modifyDateF",
      "time",
      "modifyTime",
      "modifyTimeF",
      "adjust",
      "diff"
    ],
    "Data.Interval.Duration.Iso": [
      "unIsoDuration",
      "mkIsoDuration",
      "prettyError"
    ],
    "Data.Interval.Duration": [
      "year",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ],
    "Data.Interval": [],
    "Data.Time.Component.Gen": [],
    "Data.Time.Component": [],
    "Data.Time.Duration.Gen": [],
    "Data.Time.Duration": [],
    "Data.Time.Gen": [
      "genTime"
    ],
    "Data.Time": [
      "hour",
      "setHour",
      "minute",
      "setMinute",
      "second",
      "setSecond",
      "millisecond",
      "setMillisecond",
      "adjust",
      "diff"
    ]
  },
  "datetime-parsing": {
    "Data.DateTime.Parsing": [
      "parseFullDateTime",
      "fromString",
      "toUTC"
    ]
  },
  "debug": {
    "Debug": [
      "trace",
      "traceM",
      "traceTime",
      "spy",
      "spyWith",
      "debugger"
    ]
  },
  "decimals": {
    "Data.Decimal": [
      "fromString",
      "fromInt",
      "fromNumber",
      "toNumber",
      "toString",
      "toPrecision",
      "toFixed",
      "isFinite",
      "isInteger",
      "toSignificantDigits",
      "abs",
      "acos",
      "acosh",
      "acot",
      "acoth",
      "acsc",
      "acsch",
      "asec",
      "asech",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "ceil",
      "clamp",
      "cos",
      "cosh",
      "cot",
      "coth",
      "csc",
      "csch",
      "exp",
      "floor",
      "ln",
      "log2",
      "log10",
      "max",
      "min",
      "modulo",
      "pow",
      "round",
      "sec",
      "sech",
      "sin",
      "sinh",
      "sqrt",
      "tan",
      "tanh",
      "truncated",
      "e",
      "pi",
      "gamma",
      "factorial"
    ]
  },
  "default-values": {
    "Data.Default": [
      "defaultValue",
      "defaultRecord"
    ]
  },
  "deku": {
    "Deku.Attribute": [
      "attr",
      "unsafeUnAttribute",
      "unsafeAttribute",
      "prop'",
      "cb'",
      "unset'",
      "cb",
      "xdata",
      "pureAttr",
      "maybeAttr",
      "mapAttr"
    ],
    "Deku.Attributes": [
      "href",
      "href_",
      "id",
      "id_",
      "klass",
      "klass_",
      "style",
      "style_"
    ],
    "Deku.Control": [
      "blank",
      "deku",
      "elementify",
      "ezDyn",
      "globalPortal",
      "globalPortal1",
      "guard",
      "portal",
      "portal1",
      "switcher",
      "switcherFlipped",
      "text",
      "text_"
    ],
    "Deku.Core": [
      "bus",
      "busUncurried",
      "bussed",
      "bussedUncurried",
      "insert",
      "insert_",
      "remove",
      "sendToPos",
      "sendToTop",
      "vbussed",
      "vbussedUncurried",
      "dyn",
      "fixed",
      "envy",
      "unsafeSetPos"
    ],
    "Deku.CSS": [],
    "Deku.Do": [
      "bind",
      "discard"
    ],
    "Deku.DOM.Attr.Accelerate": [],
    "Deku.DOM.Attr.Accept": [],
    "Deku.DOM.Attr.AcceptCharset": [],
    "Deku.DOM.Attr.Accesskey": [],
    "Deku.DOM.Attr.Accumulate": [],
    "Deku.DOM.Attr.Action": [],
    "Deku.DOM.Attr.Additive": [],
    "Deku.DOM.Attr.Align": [],
    "Deku.DOM.Attr.AlignmentBaseline": [],
    "Deku.DOM.Attr.Allow": [],
    "Deku.DOM.Attr.Alt": [],
    "Deku.DOM.Attr.Amplitude": [],
    "Deku.DOM.Attr.AriaActivedescendant": [],
    "Deku.DOM.Attr.AriaAtomic": [],
    "Deku.DOM.Attr.AriaAutocomplete": [],
    "Deku.DOM.Attr.AriaBusy": [],
    "Deku.DOM.Attr.AriaChecked": [],
    "Deku.DOM.Attr.AriaColcount": [],
    "Deku.DOM.Attr.AriaColindex": [],
    "Deku.DOM.Attr.AriaColspan": [],
    "Deku.DOM.Attr.AriaControls": [],
    "Deku.DOM.Attr.AriaCurrent": [],
    "Deku.DOM.Attr.AriaDescribedby": [],
    "Deku.DOM.Attr.AriaDetails": [],
    "Deku.DOM.Attr.AriaDisabled": [],
    "Deku.DOM.Attr.AriaDropeffect": [],
    "Deku.DOM.Attr.AriaErrormessage": [],
    "Deku.DOM.Attr.AriaExpanded": [],
    "Deku.DOM.Attr.AriaFlowto": [],
    "Deku.DOM.Attr.AriaGrabbed": [],
    "Deku.DOM.Attr.AriaHaspopup": [],
    "Deku.DOM.Attr.AriaHidden": [],
    "Deku.DOM.Attr.AriaInvalid": [],
    "Deku.DOM.Attr.AriaKeyshortcuts": [],
    "Deku.DOM.Attr.AriaLabel": [],
    "Deku.DOM.Attr.AriaLabelledby": [],
    "Deku.DOM.Attr.AriaLevel": [],
    "Deku.DOM.Attr.AriaLive": [],
    "Deku.DOM.Attr.AriaModal": [],
    "Deku.DOM.Attr.AriaMultiline": [],
    "Deku.DOM.Attr.AriaMultiselectable": [],
    "Deku.DOM.Attr.AriaOrientation": [],
    "Deku.DOM.Attr.AriaOwns": [],
    "Deku.DOM.Attr.AriaPlaceholder": [],
    "Deku.DOM.Attr.AriaPosinset": [],
    "Deku.DOM.Attr.AriaPressed": [],
    "Deku.DOM.Attr.AriaReadonly": [],
    "Deku.DOM.Attr.AriaRelevant": [],
    "Deku.DOM.Attr.AriaRequired": [],
    "Deku.DOM.Attr.AriaRoledescription": [],
    "Deku.DOM.Attr.AriaRowcount": [],
    "Deku.DOM.Attr.AriaRowindex": [],
    "Deku.DOM.Attr.AriaRowspan": [],
    "Deku.DOM.Attr.AriaSelected": [],
    "Deku.DOM.Attr.AriaSetsize": [],
    "Deku.DOM.Attr.AriaSort": [],
    "Deku.DOM.Attr.AriaValuemax": [],
    "Deku.DOM.Attr.AriaValuemin": [],
    "Deku.DOM.Attr.AriaValuenow": [],
    "Deku.DOM.Attr.AriaValuetext": [],
    "Deku.DOM.Attr.Async": [],
    "Deku.DOM.Attr.AttributeName": [],
    "Deku.DOM.Attr.AttributeType": [],
    "Deku.DOM.Attr.Autocapitalize": [],
    "Deku.DOM.Attr.Autocomplete": [],
    "Deku.DOM.Attr.Autofocus": [],
    "Deku.DOM.Attr.Autoplay": [],
    "Deku.DOM.Attr.AutoReverse": [],
    "Deku.DOM.Attr.Azimuth": [],
    "Deku.DOM.Attr.Background": [],
    "Deku.DOM.Attr.BaseFrequency": [],
    "Deku.DOM.Attr.BaselineShift": [],
    "Deku.DOM.Attr.BaseProfile": [],
    "Deku.DOM.Attr.Begin": [],
    "Deku.DOM.Attr.Bgcolor": [],
    "Deku.DOM.Attr.Bias": [],
    "Deku.DOM.Attr.Border": [],
    "Deku.DOM.Attr.Buffered": [],
    "Deku.DOM.Attr.By": [],
    "Deku.DOM.Attr.CalcMode": [],
    "Deku.DOM.Attr.Capture": [],
    "Deku.DOM.Attr.Challenge": [],
    "Deku.DOM.Attr.Charset": [],
    "Deku.DOM.Attr.Checked": [],
    "Deku.DOM.Attr.Cite": [],
    "Deku.DOM.Attr.Class": [],
    "Deku.DOM.Attr.Clip": [],
    "Deku.DOM.Attr.ClipPath": [],
    "Deku.DOM.Attr.ClipPathUnits": [],
    "Deku.DOM.Attr.ClipRule": [],
    "Deku.DOM.Attr.Code": [],
    "Deku.DOM.Attr.Codebase": [],
    "Deku.DOM.Attr.Color": [],
    "Deku.DOM.Attr.ColorInterpolation": [],
    "Deku.DOM.Attr.ColorInterpolationFilters": [],
    "Deku.DOM.Attr.ColorProfile": [],
    "Deku.DOM.Attr.ColorRendering": [],
    "Deku.DOM.Attr.Cols": [],
    "Deku.DOM.Attr.Colspan": [],
    "Deku.DOM.Attr.Content": [],
    "Deku.DOM.Attr.Contenteditable": [],
    "Deku.DOM.Attr.ContentScriptType": [],
    "Deku.DOM.Attr.ContentStyleType": [],
    "Deku.DOM.Attr.Contextmenu": [],
    "Deku.DOM.Attr.Controls": [],
    "Deku.DOM.Attr.Coords": [],
    "Deku.DOM.Attr.Crossorigin": [],
    "Deku.DOM.Attr.Csp": [],
    "Deku.DOM.Attr.Cursor": [],
    "Deku.DOM.Attr.Cx": [],
    "Deku.DOM.Attr.Cy": [],
    "Deku.DOM.Attr.D": [],
    "Deku.DOM.Attr.Data": [],
    "Deku.DOM.Attr.Datetime": [],
    "Deku.DOM.Attr.Decelerate": [],
    "Deku.DOM.Attr.Decoding": [],
    "Deku.DOM.Attr.Default": [],
    "Deku.DOM.Attr.Defer": [],
    "Deku.DOM.Attr.DiffuseConstant": [],
    "Deku.DOM.Attr.Dir": [],
    "Deku.DOM.Attr.Direction": [],
    "Deku.DOM.Attr.Dirname": [],
    "Deku.DOM.Attr.Disabled": [],
    "Deku.DOM.Attr.Display": [],
    "Deku.DOM.Attr.Divisor": [],
    "Deku.DOM.Attr.DominantBaseline": [],
    "Deku.DOM.Attr.Download": [],
    "Deku.DOM.Attr.Draggable": [],
    "Deku.DOM.Attr.Dur": [],
    "Deku.DOM.Attr.Dx": [],
    "Deku.DOM.Attr.Dy": [],
    "Deku.DOM.Attr.EdgeMode": [],
    "Deku.DOM.Attr.Elevation": [],
    "Deku.DOM.Attr.EnableBackground": [],
    "Deku.DOM.Attr.Enctype": [],
    "Deku.DOM.Attr.End": [],
    "Deku.DOM.Attr.Enterkeyhint": [],
    "Deku.DOM.Attr.Exponent": [],
    "Deku.DOM.Attr.Fill": [],
    "Deku.DOM.Attr.FillOpacity": [],
    "Deku.DOM.Attr.FillRule": [],
    "Deku.DOM.Attr.Filter": [],
    "Deku.DOM.Attr.FilterRes": [],
    "Deku.DOM.Attr.FilterUnits": [],
    "Deku.DOM.Attr.FloodColor": [],
    "Deku.DOM.Attr.FloodOpacity": [],
    "Deku.DOM.Attr.FontFamily": [],
    "Deku.DOM.Attr.FontSize": [],
    "Deku.DOM.Attr.FontSizeAdjust": [],
    "Deku.DOM.Attr.FontStretch": [],
    "Deku.DOM.Attr.FontStyle": [],
    "Deku.DOM.Attr.FontVariant": [],
    "Deku.DOM.Attr.FontWeight": [],
    "Deku.DOM.Attr.For": [],
    "Deku.DOM.Attr.Form": [],
    "Deku.DOM.Attr.Formaction": [],
    "Deku.DOM.Attr.Formenctype": [],
    "Deku.DOM.Attr.Formmethod": [],
    "Deku.DOM.Attr.Formnovalidate": [],
    "Deku.DOM.Attr.Formtarget": [],
    "Deku.DOM.Attr.Fr": [],
    "Deku.DOM.Attr.From": [],
    "Deku.DOM.Attr.Fx": [],
    "Deku.DOM.Attr.Fy": [],
    "Deku.DOM.Attr.GlyphOrientationHorizontal": [],
    "Deku.DOM.Attr.GlyphOrientationVertical": [],
    "Deku.DOM.Attr.GradientTransform": [],
    "Deku.DOM.Attr.GradientUnits": [],
    "Deku.DOM.Attr.Headers": [],
    "Deku.DOM.Attr.Height": [],
    "Deku.DOM.Attr.Hidden": [],
    "Deku.DOM.Attr.High": [],
    "Deku.DOM.Attr.Href": [],
    "Deku.DOM.Attr.Hreflang": [],
    "Deku.DOM.Attr.HttpEquiv": [],
    "Deku.DOM.Attr.Icon": [],
    "Deku.DOM.Attr.Id": [],
    "Deku.DOM.Attr.ImageRendering": [],
    "Deku.DOM.Attr.Importance": [],
    "Deku.DOM.Attr.In": [],
    "Deku.DOM.Attr.In2": [],
    "Deku.DOM.Attr.Inputmode": [],
    "Deku.DOM.Attr.Integrity": [],
    "Deku.DOM.Attr.Intercept": [],
    "Deku.DOM.Attr.Intrinsicsize": [],
    "Deku.DOM.Attr.Ismap": [],
    "Deku.DOM.Attr.Itemprop": [],
    "Deku.DOM.Attr.K1": [],
    "Deku.DOM.Attr.K2": [],
    "Deku.DOM.Attr.K3": [],
    "Deku.DOM.Attr.K4": [],
    "Deku.DOM.Attr.KernelMatrix": [],
    "Deku.DOM.Attr.KernelUnitLength": [],
    "Deku.DOM.Attr.Kerning": [],
    "Deku.DOM.Attr.KeyPoints": [],
    "Deku.DOM.Attr.KeySplines": [],
    "Deku.DOM.Attr.KeyTimes": [],
    "Deku.DOM.Attr.Keytype": [],
    "Deku.DOM.Attr.Kind": [],
    "Deku.DOM.Attr.Label": [],
    "Deku.DOM.Attr.Lang": [],
    "Deku.DOM.Attr.Language": [],
    "Deku.DOM.Attr.LengthAdjust": [],
    "Deku.DOM.Attr.LetterSpacing": [],
    "Deku.DOM.Attr.LightingColor": [],
    "Deku.DOM.Attr.LimitingConeAngle": [],
    "Deku.DOM.Attr.List": [],
    "Deku.DOM.Attr.Loading": [],
    "Deku.DOM.Attr.Loop": [],
    "Deku.DOM.Attr.Low": [],
    "Deku.DOM.Attr.Manifest": [],
    "Deku.DOM.Attr.MarkerEnd": [],
    "Deku.DOM.Attr.MarkerHeight": [],
    "Deku.DOM.Attr.MarkerMid": [],
    "Deku.DOM.Attr.MarkerStart": [],
    "Deku.DOM.Attr.MarkerUnits": [],
    "Deku.DOM.Attr.MarkerWidth": [],
    "Deku.DOM.Attr.Mask": [],
    "Deku.DOM.Attr.MaskContentUnits": [],
    "Deku.DOM.Attr.MaskUnits": [],
    "Deku.DOM.Attr.Max": [],
    "Deku.DOM.Attr.Maxlength": [],
    "Deku.DOM.Attr.Media": [],
    "Deku.DOM.Attr.Method": [],
    "Deku.DOM.Attr.Min": [],
    "Deku.DOM.Attr.Minlength": [],
    "Deku.DOM.Attr.Mode": [],
    "Deku.DOM.Attr.Multiple": [],
    "Deku.DOM.Attr.Muted": [],
    "Deku.DOM.Attr.Name": [],
    "Deku.DOM.Attr.Novalidate": [],
    "Deku.DOM.Attr.NumOctaves": [],
    "Deku.DOM.Attr.Offset": [],
    "Deku.DOM.Attr.OnAbort": [],
    "Deku.DOM.Attr.OnAnimationcancel": [],
    "Deku.DOM.Attr.OnAnimationend": [],
    "Deku.DOM.Attr.OnAnimationiteration": [],
    "Deku.DOM.Attr.OnAnimationstart": [],
    "Deku.DOM.Attr.OnAuxclick": [],
    "Deku.DOM.Attr.OnBlur": [],
    "Deku.DOM.Attr.OnCancel": [],
    "Deku.DOM.Attr.OnCanplay": [],
    "Deku.DOM.Attr.OnCanplaythrough": [],
    "Deku.DOM.Attr.OnChange": [],
    "Deku.DOM.Attr.OnClick": [],
    "Deku.DOM.Attr.OnClose": [],
    "Deku.DOM.Attr.OnContextmenu": [],
    "Deku.DOM.Attr.OnDblclick": [],
    "Deku.DOM.Attr.OnDrag": [],
    "Deku.DOM.Attr.OnDragend": [],
    "Deku.DOM.Attr.OnDragenter": [],
    "Deku.DOM.Attr.OnDragleave": [],
    "Deku.DOM.Attr.OnDragover": [],
    "Deku.DOM.Attr.OnDragstart": [],
    "Deku.DOM.Attr.OnDrop": [],
    "Deku.DOM.Attr.OnDurationchange": [],
    "Deku.DOM.Attr.OnEmptied": [],
    "Deku.DOM.Attr.OnEnded": [],
    "Deku.DOM.Attr.OnError": [],
    "Deku.DOM.Attr.OnFocus": [],
    "Deku.DOM.Attr.OnFormdata": [],
    "Deku.DOM.Attr.OnGotpointercapture": [],
    "Deku.DOM.Attr.OnInput": [],
    "Deku.DOM.Attr.OnInvalid": [],
    "Deku.DOM.Attr.OnKeydown": [],
    "Deku.DOM.Attr.OnKeypress": [],
    "Deku.DOM.Attr.OnKeyup": [],
    "Deku.DOM.Attr.OnLoad": [],
    "Deku.DOM.Attr.OnLoadeddata": [],
    "Deku.DOM.Attr.OnLoadedmetadata": [],
    "Deku.DOM.Attr.OnLoadend": [],
    "Deku.DOM.Attr.OnLoadstart": [],
    "Deku.DOM.Attr.OnLostpointercapture": [],
    "Deku.DOM.Attr.OnMousedown": [],
    "Deku.DOM.Attr.OnMouseenter": [],
    "Deku.DOM.Attr.OnMouseleave": [],
    "Deku.DOM.Attr.OnMousemove": [],
    "Deku.DOM.Attr.OnMouseout": [],
    "Deku.DOM.Attr.OnMouseover": [],
    "Deku.DOM.Attr.OnMouseup": [],
    "Deku.DOM.Attr.OnMousewheel": [],
    "Deku.DOM.Attr.OnPause": [],
    "Deku.DOM.Attr.OnPlay": [],
    "Deku.DOM.Attr.OnPlaying": [],
    "Deku.DOM.Attr.OnPointercancel": [],
    "Deku.DOM.Attr.OnPointerdown": [],
    "Deku.DOM.Attr.OnPointerenter": [],
    "Deku.DOM.Attr.OnPointerleave": [],
    "Deku.DOM.Attr.OnPointerlockchange": [],
    "Deku.DOM.Attr.OnPointerlockerror": [],
    "Deku.DOM.Attr.OnPointermove": [],
    "Deku.DOM.Attr.OnPointerout": [],
    "Deku.DOM.Attr.OnPointerover": [],
    "Deku.DOM.Attr.OnPointerup": [],
    "Deku.DOM.Attr.OnProgress": [],
    "Deku.DOM.Attr.OnRatechange": [],
    "Deku.DOM.Attr.OnReset": [],
    "Deku.DOM.Attr.OnResize": [],
    "Deku.DOM.Attr.OnScroll": [],
    "Deku.DOM.Attr.OnSecuritypolicyviolation": [],
    "Deku.DOM.Attr.OnSeeked": [],
    "Deku.DOM.Attr.OnSeeking": [],
    "Deku.DOM.Attr.OnSelect": [],
    "Deku.DOM.Attr.OnSelectionchange": [],
    "Deku.DOM.Attr.OnSelectstart": [],
    "Deku.DOM.Attr.OnShow": [],
    "Deku.DOM.Attr.OnSlotchange": [],
    "Deku.DOM.Attr.OnStalled": [],
    "Deku.DOM.Attr.OnSubmit": [],
    "Deku.DOM.Attr.OnSuspend": [],
    "Deku.DOM.Attr.OnTimeupdate": [],
    "Deku.DOM.Attr.OnTouchcancel": [],
    "Deku.DOM.Attr.OnTouchend": [],
    "Deku.DOM.Attr.OnTouchmove": [],
    "Deku.DOM.Attr.OnTouchstart": [],
    "Deku.DOM.Attr.OnTransitioncancel": [],
    "Deku.DOM.Attr.OnTransitionend": [],
    "Deku.DOM.Attr.OnTransitionrun": [],
    "Deku.DOM.Attr.OnTransitionstart": [],
    "Deku.DOM.Attr.OnVolumechange": [],
    "Deku.DOM.Attr.OnWaiting": [],
    "Deku.DOM.Attr.OnWheel": [],
    "Deku.DOM.Attr.Opacity": [],
    "Deku.DOM.Attr.Open": [],
    "Deku.DOM.Attr.Operator": [],
    "Deku.DOM.Attr.Optimum": [],
    "Deku.DOM.Attr.Order": [],
    "Deku.DOM.Attr.Orient": [],
    "Deku.DOM.Attr.Overflow": [],
    "Deku.DOM.Attr.Path": [],
    "Deku.DOM.Attr.PathLength": [],
    "Deku.DOM.Attr.Pattern": [],
    "Deku.DOM.Attr.PatternContentUnits": [],
    "Deku.DOM.Attr.PatternTransform": [],
    "Deku.DOM.Attr.PatternUnits": [],
    "Deku.DOM.Attr.Ping": [],
    "Deku.DOM.Attr.Placeholder": [],
    "Deku.DOM.Attr.PointerEvents": [],
    "Deku.DOM.Attr.Points": [],
    "Deku.DOM.Attr.PointsAtX": [],
    "Deku.DOM.Attr.PointsAtY": [],
    "Deku.DOM.Attr.PointsAtZ": [],
    "Deku.DOM.Attr.Poster": [],
    "Deku.DOM.Attr.Preload": [],
    "Deku.DOM.Attr.PreserveAlpha": [],
    "Deku.DOM.Attr.PreserveAspectRatio": [],
    "Deku.DOM.Attr.PrimitiveUnits": [],
    "Deku.DOM.Attr.R": [],
    "Deku.DOM.Attr.Radiogroup": [],
    "Deku.DOM.Attr.Radius": [],
    "Deku.DOM.Attr.Readonly": [],
    "Deku.DOM.Attr.Referrerpolicy": [],
    "Deku.DOM.Attr.RefX": [],
    "Deku.DOM.Attr.RefY": [],
    "Deku.DOM.Attr.Rel": [],
    "Deku.DOM.Attr.RepeatCount": [],
    "Deku.DOM.Attr.RepeatDur": [],
    "Deku.DOM.Attr.Required": [],
    "Deku.DOM.Attr.RequiredExtensions": [],
    "Deku.DOM.Attr.RequiredFeatures": [],
    "Deku.DOM.Attr.Restart": [],
    "Deku.DOM.Attr.Result": [],
    "Deku.DOM.Attr.Reversed": [],
    "Deku.DOM.Attr.Role": [],
    "Deku.DOM.Attr.Rotate": [],
    "Deku.DOM.Attr.Rows": [],
    "Deku.DOM.Attr.Rowspan": [],
    "Deku.DOM.Attr.Rx": [],
    "Deku.DOM.Attr.Ry": [],
    "Deku.DOM.Attr.Sandbox": [],
    "Deku.DOM.Attr.Scale": [],
    "Deku.DOM.Attr.Scope": [],
    "Deku.DOM.Attr.Scoped": [],
    "Deku.DOM.Attr.Seed": [],
    "Deku.DOM.Attr.Selected": [],
    "Deku.DOM.Attr.Shape": [],
    "Deku.DOM.Attr.ShapeRendering": [],
    "Deku.DOM.Attr.Side": [],
    "Deku.DOM.Attr.Size": [],
    "Deku.DOM.Attr.Sizes": [],
    "Deku.DOM.Attr.Slope": [],
    "Deku.DOM.Attr.Slot": [],
    "Deku.DOM.Attr.Spacing": [],
    "Deku.DOM.Attr.Span": [],
    "Deku.DOM.Attr.SpecularConstant": [],
    "Deku.DOM.Attr.SpecularExponent": [],
    "Deku.DOM.Attr.Spellcheck": [],
    "Deku.DOM.Attr.SpreadMethod": [],
    "Deku.DOM.Attr.Src": [],
    "Deku.DOM.Attr.Srcdoc": [],
    "Deku.DOM.Attr.Srclang": [],
    "Deku.DOM.Attr.Srcset": [],
    "Deku.DOM.Attr.Start": [],
    "Deku.DOM.Attr.StartOffset": [],
    "Deku.DOM.Attr.StdDeviation": [],
    "Deku.DOM.Attr.Step": [],
    "Deku.DOM.Attr.StitchTiles": [],
    "Deku.DOM.Attr.StopColor": [],
    "Deku.DOM.Attr.StopOpacity": [],
    "Deku.DOM.Attr.Stroke": [],
    "Deku.DOM.Attr.StrokeDasharray": [],
    "Deku.DOM.Attr.StrokeDashoffset": [],
    "Deku.DOM.Attr.StrokeLinecap": [],
    "Deku.DOM.Attr.StrokeLinejoin": [],
    "Deku.DOM.Attr.StrokeMiterlimit": [],
    "Deku.DOM.Attr.StrokeOpacity": [],
    "Deku.DOM.Attr.StrokeWidth": [],
    "Deku.DOM.Attr.Style": [],
    "Deku.DOM.Attr.Summary": [],
    "Deku.DOM.Attr.SurfaceScale": [],
    "Deku.DOM.Attr.SystemLanguage": [],
    "Deku.DOM.Attr.Tabindex": [],
    "Deku.DOM.Attr.TableValues": [],
    "Deku.DOM.Attr.Target": [],
    "Deku.DOM.Attr.TargetX": [],
    "Deku.DOM.Attr.TargetY": [],
    "Deku.DOM.Attr.TextAnchor": [],
    "Deku.DOM.Attr.TextDecoration": [],
    "Deku.DOM.Attr.TextLength": [],
    "Deku.DOM.Attr.TextRendering": [],
    "Deku.DOM.Attr.Title": [],
    "Deku.DOM.Attr.To": [],
    "Deku.DOM.Attr.Transform": [],
    "Deku.DOM.Attr.TransformOrigin": [],
    "Deku.DOM.Attr.Translate": [],
    "Deku.DOM.Attr.Type": [],
    "Deku.DOM.Attr.UnicodeBidi": [],
    "Deku.DOM.Attr.Usemap": [],
    "Deku.DOM.Attr.Value": [],
    "Deku.DOM.Attr.Values": [],
    "Deku.DOM.Attr.VectorEffect": [],
    "Deku.DOM.Attr.Version": [],
    "Deku.DOM.Attr.ViewBox": [],
    "Deku.DOM.Attr.ViewTarget": [],
    "Deku.DOM.Attr.Visibility": [],
    "Deku.DOM.Attr.Width": [],
    "Deku.DOM.Attr.WordSpacing": [],
    "Deku.DOM.Attr.WritingMode": [],
    "Deku.DOM.Attr.X": [],
    "Deku.DOM.Attr.X1": [],
    "Deku.DOM.Attr.X2": [],
    "Deku.DOM.Attr.XChannelSelector": [],
    "Deku.DOM.Attr.XlinkActuate": [],
    "Deku.DOM.Attr.XlinkArcrole": [],
    "Deku.DOM.Attr.XlinkHref": [],
    "Deku.DOM.Attr.XlinkRole": [],
    "Deku.DOM.Attr.XlinkShow": [],
    "Deku.DOM.Attr.XlinkTitle": [],
    "Deku.DOM.Attr.XlinkType": [],
    "Deku.DOM.Attr.XmlBase": [],
    "Deku.DOM.Attr.XmlLang": [],
    "Deku.DOM.Attr.XmlSpace": [],
    "Deku.DOM.Attr.Xtype": [],
    "Deku.DOM.Attr.Y": [],
    "Deku.DOM.Attr.Y1": [],
    "Deku.DOM.Attr.Y2": [],
    "Deku.DOM.Attr.YChannelSelector": [],
    "Deku.DOM.Attr.Z": [],
    "Deku.DOM.Attr.ZoomAndPan": [],
    "Deku.DOM.Elt.A": [],
    "Deku.DOM.Elt.Abbr": [],
    "Deku.DOM.Elt.Acronym": [],
    "Deku.DOM.Elt.Address": [],
    "Deku.DOM.Elt.Animate": [],
    "Deku.DOM.Elt.AnimateMotion": [],
    "Deku.DOM.Elt.AnimateTransform": [],
    "Deku.DOM.Elt.Applet": [],
    "Deku.DOM.Elt.Area": [],
    "Deku.DOM.Elt.Article": [],
    "Deku.DOM.Elt.Aside": [],
    "Deku.DOM.Elt.Audio": [],
    "Deku.DOM.Elt.B": [],
    "Deku.DOM.Elt.Base": [],
    "Deku.DOM.Elt.Basefont": [],
    "Deku.DOM.Elt.Bdi": [],
    "Deku.DOM.Elt.Bdo": [],
    "Deku.DOM.Elt.Big": [],
    "Deku.DOM.Elt.Blockquote": [],
    "Deku.DOM.Elt.Body": [],
    "Deku.DOM.Elt.Br": [],
    "Deku.DOM.Elt.Button": [],
    "Deku.DOM.Elt.Canvas": [],
    "Deku.DOM.Elt.Caption": [],
    "Deku.DOM.Elt.Center": [],
    "Deku.DOM.Elt.Circle": [],
    "Deku.DOM.Elt.Cite": [],
    "Deku.DOM.Elt.ClipPath": [],
    "Deku.DOM.Elt.Code": [],
    "Deku.DOM.Elt.Col": [],
    "Deku.DOM.Elt.Colgroup": [],
    "Deku.DOM.Elt.Datalist": [],
    "Deku.DOM.Elt.Dd": [],
    "Deku.DOM.Elt.Defs": [],
    "Deku.DOM.Elt.Del": [],
    "Deku.DOM.Elt.Desc": [],
    "Deku.DOM.Elt.Details": [],
    "Deku.DOM.Elt.Dfn": [],
    "Deku.DOM.Elt.Dialog": [],
    "Deku.DOM.Elt.Dir": [],
    "Deku.DOM.Elt.Discard": [],
    "Deku.DOM.Elt.Div": [],
    "Deku.DOM.Elt.Dl": [],
    "Deku.DOM.Elt.Dt": [],
    "Deku.DOM.Elt.Ellipse": [],
    "Deku.DOM.Elt.Em": [],
    "Deku.DOM.Elt.Embed": [],
    "Deku.DOM.Elt.FeBlend": [],
    "Deku.DOM.Elt.FeColorMatrix": [],
    "Deku.DOM.Elt.FeComponentTransfer": [],
    "Deku.DOM.Elt.FeComposite": [],
    "Deku.DOM.Elt.FeConvolveMatrix": [],
    "Deku.DOM.Elt.FeDiffuseLighting": [],
    "Deku.DOM.Elt.FeDisplacementMap": [],
    "Deku.DOM.Elt.FeDistantLight": [],
    "Deku.DOM.Elt.FeDropShadow": [],
    "Deku.DOM.Elt.FeFlood": [],
    "Deku.DOM.Elt.FeFuncA": [],
    "Deku.DOM.Elt.FeFuncB": [],
    "Deku.DOM.Elt.FeFuncG": [],
    "Deku.DOM.Elt.FeFuncR": [],
    "Deku.DOM.Elt.FeGaussianBlur": [],
    "Deku.DOM.Elt.FeImage": [],
    "Deku.DOM.Elt.FeMerge": [],
    "Deku.DOM.Elt.FeMergeNode": [],
    "Deku.DOM.Elt.FeMorphology": [],
    "Deku.DOM.Elt.FeOffset": [],
    "Deku.DOM.Elt.FePointLight": [],
    "Deku.DOM.Elt.FeSpecularLighting": [],
    "Deku.DOM.Elt.FeSpotLight": [],
    "Deku.DOM.Elt.FeTile": [],
    "Deku.DOM.Elt.FeTurbulence": [],
    "Deku.DOM.Elt.Fieldset": [],
    "Deku.DOM.Elt.Figcaption": [],
    "Deku.DOM.Elt.Figure": [],
    "Deku.DOM.Elt.Filter": [],
    "Deku.DOM.Elt.Font": [],
    "Deku.DOM.Elt.Footer": [],
    "Deku.DOM.Elt.ForeignObject": [],
    "Deku.DOM.Elt.Form": [],
    "Deku.DOM.Elt.Frame": [],
    "Deku.DOM.Elt.Frameset": [],
    "Deku.DOM.Elt.G": [],
    "Deku.DOM.Elt.H1": [],
    "Deku.DOM.Elt.H2": [],
    "Deku.DOM.Elt.H3": [],
    "Deku.DOM.Elt.H4": [],
    "Deku.DOM.Elt.H5": [],
    "Deku.DOM.Elt.H6": [],
    "Deku.DOM.Elt.Head": [],
    "Deku.DOM.Elt.Header": [],
    "Deku.DOM.Elt.Hr": [],
    "Deku.DOM.Elt.Html": [],
    "Deku.DOM.Elt.I": [],
    "Deku.DOM.Elt.Iframe": [],
    "Deku.DOM.Elt.Image": [],
    "Deku.DOM.Elt.Img": [],
    "Deku.DOM.Elt.Input": [],
    "Deku.DOM.Elt.Ins": [],
    "Deku.DOM.Elt.Kbd": [],
    "Deku.DOM.Elt.Label": [],
    "Deku.DOM.Elt.Legend": [],
    "Deku.DOM.Elt.Li": [],
    "Deku.DOM.Elt.Line": [],
    "Deku.DOM.Elt.LinearGradient": [],
    "Deku.DOM.Elt.Link": [],
    "Deku.DOM.Elt.Main": [],
    "Deku.DOM.Elt.Map": [],
    "Deku.DOM.Elt.Mark": [],
    "Deku.DOM.Elt.Marker": [],
    "Deku.DOM.Elt.Mask": [],
    "Deku.DOM.Elt.Meta": [],
    "Deku.DOM.Elt.Metadata": [],
    "Deku.DOM.Elt.Meter": [],
    "Deku.DOM.Elt.Mpath": [],
    "Deku.DOM.Elt.Nav": [],
    "Deku.DOM.Elt.Noframes": [],
    "Deku.DOM.Elt.Noscript": [],
    "Deku.DOM.Elt.Object": [],
    "Deku.DOM.Elt.Ol": [],
    "Deku.DOM.Elt.Optgroup": [],
    "Deku.DOM.Elt.Option": [],
    "Deku.DOM.Elt.Output": [],
    "Deku.DOM.Elt.P": [],
    "Deku.DOM.Elt.Param": [],
    "Deku.DOM.Elt.Path": [],
    "Deku.DOM.Elt.Pattern": [],
    "Deku.DOM.Elt.Picture": [],
    "Deku.DOM.Elt.Polygon": [],
    "Deku.DOM.Elt.Polyline": [],
    "Deku.DOM.Elt.Pre": [],
    "Deku.DOM.Elt.Progress": [],
    "Deku.DOM.Elt.Q": [],
    "Deku.DOM.Elt.RadialGradient": [],
    "Deku.DOM.Elt.Rect": [],
    "Deku.DOM.Elt.Rp": [],
    "Deku.DOM.Elt.Rt": [],
    "Deku.DOM.Elt.Ruby": [],
    "Deku.DOM.Elt.S": [],
    "Deku.DOM.Elt.Samp": [],
    "Deku.DOM.Elt.Script": [],
    "Deku.DOM.Elt.Section": [],
    "Deku.DOM.Elt.Select": [],
    "Deku.DOM.Elt.Set": [],
    "Deku.DOM.Elt.Small": [],
    "Deku.DOM.Elt.Source": [],
    "Deku.DOM.Elt.Span": [],
    "Deku.DOM.Elt.Stop": [],
    "Deku.DOM.Elt.Strike": [],
    "Deku.DOM.Elt.Strong": [],
    "Deku.DOM.Elt.Style": [],
    "Deku.DOM.Elt.Sub": [],
    "Deku.DOM.Elt.Summary": [],
    "Deku.DOM.Elt.Sup": [],
    "Deku.DOM.Elt.Svg": [],
    "Deku.DOM.Elt.Switch": [],
    "Deku.DOM.Elt.Symbol": [],
    "Deku.DOM.Elt.Table": [],
    "Deku.DOM.Elt.Tbody": [],
    "Deku.DOM.Elt.Td": [],
    "Deku.DOM.Elt.Template": [],
    "Deku.DOM.Elt.Text": [],
    "Deku.DOM.Elt.Textarea": [],
    "Deku.DOM.Elt.TextPath": [],
    "Deku.DOM.Elt.Tfoot": [],
    "Deku.DOM.Elt.Th": [],
    "Deku.DOM.Elt.Thead": [],
    "Deku.DOM.Elt.Time": [],
    "Deku.DOM.Elt.Title": [],
    "Deku.DOM.Elt.Tr": [],
    "Deku.DOM.Elt.Track": [],
    "Deku.DOM.Elt.Tspan": [],
    "Deku.DOM.Elt.Tt": [],
    "Deku.DOM.Elt.U": [],
    "Deku.DOM.Elt.Ul": [],
    "Deku.DOM.Elt.Use": [],
    "Deku.DOM.Elt.Var": [],
    "Deku.DOM.Elt.Video": [],
    "Deku.DOM.Elt.View": [],
    "Deku.DOM.Elt.Wbr": [],
    "Deku.DOM.Elt.Xdata": [],
    "Deku.DOM": [
      "unsafeCustomElement"
    ],
    "Deku.Hooks": [
      "useState'",
      "useState",
      "useStates'",
      "useStates",
      "useMemoized'",
      "useMemoized",
      "useMailboxed",
      "useHot",
      "useHot'",
      "initializeEvents'",
      "useDyn",
      "useDyn_"
    ],
    "Deku.Interpret": [
      "fullDOMInterpret",
      "makeFFIDOMSnapshot",
      "ssrDOMInterpret",
      "hydratingDOMInterpret",
      "setHydrating",
      "unSetHydrating",
      "getAllComments"
    ],
    "Deku.Lifecycle": [],
    "Deku.Listeners": [
      "slider",
      "slider_",
      "numeric",
      "numeric_",
      "checkbox",
      "checkbox_",
      "click",
      "click_",
      "click'",
      "keyUp",
      "keyUp_",
      "keyDown",
      "keyDown_",
      "keyPress",
      "keyPress_",
      "textInput",
      "textInput_",
      "injectElement",
      "injectElementT"
    ],
    "Deku.Pursx.Anonymous": [],
    "Deku.Pursx": [],
    "Deku.SSR": [],
    "Deku.Toplevel": []
  },
  "deno": {
    "Deno.Crypto": [
      "encrypt",
      "decrypt",
      "sign",
      "verify",
      "generateKey",
      "makeAesCbcAlgorithm",
      "makeAesGcmAlgorithm"
    ],
    "Deno.DateTime": [
      "difference",
      "differenceUnitToString",
      "format",
      "isLeap",
      "parse",
      "parseDifferenceUnit",
      "toIMF",
      "weekOfYear"
    ],
    "Deno.Dotenv": [
      "config",
      "configSync"
    ],
    "Deno.Fs": [
      "copy",
      "copySync",
      "move",
      "moveSync"
    ],
    "Deno.Http.Request": [
      "body",
      "bodyUsed",
      "cache",
      "credentials",
      "destination",
      "headers",
      "integrity",
      "json",
      "method",
      "mode",
      "priority",
      "redirect",
      "referrer",
      "referrerPolicy",
      "text",
      "url"
    ],
    "Deno.Http": [
      "createResponse",
      "deleteCookie",
      "getCookies",
      "hContentTypeHtml",
      "hContentTypeJson",
      "serve",
      "serveListener",
      "setCookies"
    ],
    "Deno.Internal": [
      "maybeToUndefined"
    ],
    "Deno.Log": [
      "appendLogMode",
      "createConsoleHandler",
      "createFileHandler",
      "createRotatingFileHandler",
      "createWriterHandler",
      "critical",
      "debug",
      "error",
      "exclusiveCreationLogMode",
      "getLogger",
      "info",
      "setup",
      "warning",
      "writeLogMode"
    ],
    "Deno.Uuid.Type": [],
    "Deno.Uuid.V1": [
      "generate",
      "validate"
    ],
    "Deno.Uuid.V4": [
      "validate"
    ],
    "Deno.Uuid.V5": [
      "validate",
      "generate"
    ],
    "Deno.Uuid": [
      "isNil",
      "validate",
      "version",
      "nil_uuid"
    ],
    "Deno": [
      "listen",
      "listenTls",
      "env"
    ]
  },
  "dissect": {
    "Dissect.Class": [],
    "Dissect.Generic": [],
    "Dissect.Record": [],
    "Dissect.Variant": []
  },
  "distributive": {
    "Data.Distributive": []
  },
  "dodo-printer": {
    "Dodo.Ansi": [],
    "Dodo.Box": [
      "valign",
      "halign",
      "vappend",
      "happend",
      "vertical",
      "verticalWithAlign",
      "horizontal",
      "horizontalWithAlign",
      "resize",
      "fill",
      "vpadding",
      "hpadding",
      "sizeOf",
      "isEmpty",
      "empty",
      "toDoc",
      "docBox"
    ],
    "Dodo.Common": [],
    "Dodo.Internal.Buffer": [],
    "Dodo.Internal": [],
    "Dodo": [
      "indent",
      "align",
      "alignCurrentColumn",
      "annotate",
      "withPosition",
      "text",
      "break",
      "spaceBreak",
      "softBreak",
      "space",
      "lines",
      "words",
      "appendBreak",
      "appendSpace",
      "appendSpaceBreak",
      "flexAlt",
      "flexGroup",
      "flexSelect",
      "paragraph",
      "textParagraph",
      "enclose",
      "encloseEmptyAlt",
      "encloseWithSeparator",
      "foldWithSeparator",
      "foldWith",
      "locally",
      "withLocalOptions",
      "print",
      "plainText",
      "twoSpaces",
      "fourSpaces",
      "tabs"
    ]
  },
  "dom-filereader": {
    "Web.File.FileReader.Aff": [
      "readAsText",
      "readAsArrayBuffer",
      "readAsDataURL"
    ]
  },
  "dom-indexed": {
    "DOM.HTML.Indexed.AutocompleteType": [],
    "DOM.HTML.Indexed.ButtonType": [],
    "DOM.HTML.Indexed.CrossOriginValue": [],
    "DOM.HTML.Indexed.DirValue": [],
    "DOM.HTML.Indexed.FormMethod": [],
    "DOM.HTML.Indexed.InputAcceptType": [],
    "DOM.HTML.Indexed.InputType": [],
    "DOM.HTML.Indexed.KindValue": [],
    "DOM.HTML.Indexed.MenuitemType": [],
    "DOM.HTML.Indexed.MenuType": [],
    "DOM.HTML.Indexed.OrderedListType": [],
    "DOM.HTML.Indexed.PreloadValue": [],
    "DOM.HTML.Indexed.ScopeValue": [],
    "DOM.HTML.Indexed.StepValue": [],
    "DOM.HTML.Indexed.WrapValue": [],
    "DOM.HTML.Indexed": []
  },
  "dotenv": {
    "Dotenv.Internal.Apply": [
      "applySettings"
    ],
    "Dotenv.Internal.ChildProcess": [
      "_childProcess",
      "handleChildProcess",
      "spawn"
    ],
    "Dotenv.Internal.Environment": [
      "_environment",
      "handleEnvironment",
      "lookupEnv",
      "setEnv"
    ],
    "Dotenv.Internal.Parse": [],
    "Dotenv.Internal.Resolve": [
      "resolveValues"
    ],
    "Dotenv.Internal.Types": [],
    "Dotenv": [
      "loadFile",
      "loadContents"
    ]
  },
  "droplet": {
    "Droplet.Driver.Internal.Migration": [],
    "Droplet.Driver.Internal.Pool": [
      "defaultConfiguration",
      "newPool"
    ],
    "Droplet.Driver.Internal.Query": [
      "connect",
      "execute",
      "query",
      "single",
      "toResult",
      "unsafeExecute",
      "unsafeQuery",
      "unsafeSingle",
      "withConnection",
      "withTransaction"
    ],
    "Droplet.Driver.Migration": [
      "migrate"
    ],
    "Droplet.Driver.Unsafe": [],
    "Droplet.Driver": [],
    "Droplet.Language.Internal.Condition": [
      "isNotNull",
      "isNull",
      "in_",
      "and",
      "not",
      "equals",
      "notEquals",
      "greaterThan",
      "lesserThan",
      "greaterEqualsThan",
      "lesserEqualsThan",
      "or"
    ],
    "Droplet.Language.Internal.Definition": [
      "star",
      "toType",
      "toParameters",
      "fromValue",
      "toValue",
      "path"
    ],
    "Droplet.Language.Internal.Function": [
      "count",
      "random",
      "function'",
      "string_agg",
      "array_agg",
      "function",
      "coalesce"
    ],
    "Droplet.Language.Internal.Syntax": [
      "join",
      "create",
      "table",
      "leftJoin",
      "resume",
      "exists",
      "defaultValues",
      "on",
      "union",
      "groupBy",
      "alter",
      "drop",
      "unionAll",
      "distinct",
      "orderBy",
      "offset",
      "as",
      "add",
      "delete",
      "asc",
      "desc",
      "from",
      "insert",
      "limit",
      "into",
      "prepare",
      "select",
      "set",
      "update",
      "values",
      "returning",
      "wher"
    ],
    "Droplet.Language.Internal.Token": [],
    "Droplet.Language.Internal.Translate": [
      "translateSource",
      "toQuery",
      "toConstraintDefinition",
      "toCompositeConstraintDefinition",
      "argumentList",
      "translateNakedColumn",
      "toReferenceDefinition",
      "toNullableDefinition",
      "translateColumn",
      "compositeFieldList",
      "translateCompositeConstraint",
      "toJoinType",
      "translateFieldDefinition",
      "nameList",
      "translateConditions",
      "nameValuePairs",
      "valueList",
      "translate",
      "buildQuery",
      "unsafeBuildQuery"
    ],
    "Droplet.Language": [
      "spyQuery"
    ]
  },
  "dynamic-buffer": {
    "DynamicBuffer": [
      "create",
      "addByte",
      "addBuffer",
      "setByte",
      "fromUtf8",
      "contents",
      "unsafeContents",
      "size",
      "debugToString"
    ]
  },
  "echarts-simple": {
    "ECharts": []
  },
  "effect": {
    "Effect.Class": [],
    "Effect.Uncurried": [],
    "Effect.Unsafe": [],
    "Effect": [
      "untilE",
      "whileE",
      "forE",
      "foreachE"
    ]
  },
  "either": {
    "Data.Either.Inject": [],
    "Data.Either.Nested": [
      "in1",
      "in2",
      "in3",
      "in4",
      "in5",
      "in6",
      "in7",
      "in8",
      "in9",
      "in10",
      "at1",
      "at2",
      "at3",
      "at4",
      "at5",
      "at6",
      "at7",
      "at8",
      "at9",
      "at10",
      "either1",
      "either2",
      "either3",
      "either4",
      "either5",
      "either6",
      "either7",
      "either8",
      "either9",
      "either10"
    ],
    "Data.Either": []
  },
  "elmish": {
    "Elmish.Boot": [
      "boot",
      "defaultMain"
    ],
    "Elmish.Component": [
      "transition",
      "fork",
      "forks",
      "forkVoid",
      "forkMaybe",
      "withTrace",
      "nat",
      "construct",
      "wrapWithLocalState"
    ],
    "Elmish.Dispatch": [
      "handle",
      "handleMaybe"
    ],
    "Elmish.Foreign": [
      "validateForeignType",
      "readForeign",
      "readForeign'",
      "showForeign",
      "argumentsToArray_",
      "getArgument",
      "mkVarArgEff_",
      "validateJsRecord"
    ],
    "Elmish.Opaque": [
      "wrap",
      "unwrap"
    ],
    "Elmish.React.DOM": [
      "empty",
      "text",
      "fragment"
    ],
    "Elmish.React.Import": [],
    "Elmish.React.Ref": [
      "callbackRef"
    ],
    "Elmish.React": [
      "asReactChildren",
      "assignState",
      "createElement",
      "createElement'",
      "getState",
      "hydrate",
      "setState",
      "render",
      "renderToString"
    ],
    "Elmish.State": [
      "dedicatedStorage",
      "localState"
    ],
    "Elmish.Trace": [
      "traceTime"
    ],
    "Elmish": []
  },
  "elmish-enzyme": {
    "Elmish.Enzyme.Adapter": [
      "unofficialReact_17",
      "react_16_4",
      "react_16_3",
      "react_16_2",
      "react_16_1",
      "react_15_5",
      "react_15_4",
      "react_14",
      "react_13"
    ],
    "Elmish.Enzyme.Foreign": [
      "configure",
      "mount",
      "mountComponent",
      "at",
      "childAt",
      "children",
      "count",
      "debug",
      "exists",
      "find",
      "forEach",
      "is",
      "length",
      "name",
      "parent",
      "prop",
      "simulate",
      "simulate'",
      "simulateCustom'",
      "state",
      "text",
      "toArray",
      "unmount",
      "unsafeSetState",
      "update"
    ],
    "Elmish.Enzyme": [
      "testComponent",
      "testElement",
      "at",
      "childAt",
      "children",
      "clickOn",
      "count",
      "debug",
      "exists",
      "find",
      "findAll",
      "forEach",
      "is",
      "length",
      "mapEach",
      "name",
      "parent",
      "prop",
      "simulate",
      "simulate'",
      "simulateCustom'",
      "spy",
      "state",
      "text",
      "toArray",
      "trace",
      "unsafeSetState",
      "update",
      "waitUntil",
      "waitUntil'",
      "waitWhile",
      "waitWhile'",
      "withElement",
      "withElementM",
      "withSelector"
    ]
  },
  "elmish-hooks": {
    "Elmish.Hooks.Type": [
      "bind",
      "component",
      "discard",
      "mkHook",
      "pure",
      "withHook",
      "withHookCurried"
    ],
    "Elmish.Hooks.UseEffect": [
      "traced",
      "traced'",
      "useEffect",
      "useEffect'"
    ],
    "Elmish.Hooks.UseRef": [
      "useRef"
    ],
    "Elmish.Hooks.UseState": [
      "traced",
      "useState"
    ],
    "Elmish.Hooks": []
  },
  "elmish-html": {
    "Elmish.HTML.Generated": [],
    "Elmish.HTML.Internal": [],
    "Elmish.HTML.Styled.Generated": [],
    "Elmish.HTML.Styled": [],
    "Elmish.HTML": []
  },
  "elmish-testing-library": {
    "Elmish.Test.Bootstrap": [
      "testComponent",
      "testElement"
    ],
    "Elmish.Test.Combinators": [],
    "Elmish.Test.Discover": [
      "childAt",
      "children",
      "find",
      "findAll",
      "findFirst",
      "findNth"
    ],
    "Elmish.Test.DomProps": [],
    "Elmish.Test.Events": [
      "change",
      "click",
      "clickOn",
      "fireEvent"
    ],
    "Elmish.Test.Query": [
      "attr",
      "count",
      "exists",
      "html",
      "nearestEnclosingReactComponentName",
      "prop",
      "tagName",
      "text"
    ],
    "Elmish.Test.SpinWait": [],
    "Elmish.Test.State": [],
    "Elmish.Test": []
  },
  "email-validate": {
    "Text.Email.Parser": [
      "addrSpec",
      "domainPart",
      "localPart",
      "toString"
    ],
    "Text.Email.Validate": [
      "isValid",
      "validate",
      "emailAddress",
      "canonicalizeEmail",
      "runEmailParser"
    ]
  },
  "encoding": {
    "Data.TextDecoder": [
      "decode",
      "decodeUtf8"
    ],
    "Data.TextEncoder": [
      "encode",
      "encodeUtf8"
    ]
  },
  "enums": {
    "Data.Enum.Gen": [],
    "Data.Enum.Generic": [],
    "Data.Enum": [
      "succ",
      "pred",
      "cardinality",
      "toEnum",
      "fromEnum",
      "toEnumWithDefaults",
      "enumFromTo",
      "enumFromThenTo",
      "upFrom",
      "upFromIncluding",
      "downFrom",
      "downFromIncluding",
      "defaultSucc",
      "defaultPred",
      "defaultCardinality",
      "defaultToEnum",
      "defaultFromEnum"
    ]
  },
  "error": {
    "Error.Class": [],
    "Error": []
  },
  "exceptions": {
    "Effect.Exception.Unsafe": [],
    "Effect.Exception": [
      "error",
      "message",
      "name",
      "stack",
      "throwException",
      "catchException",
      "throw",
      "try"
    ]
  },
  "exists": {
    "Data.Exists": []
  },
  "exitcodes": {
    "ExitCodes": []
  },
  "expect-inferred": {
    "ExpectInferred": []
  },
  "fahrtwind": {
    "Fahrtwind.Animation": [],
    "Fahrtwind.Icon.BrandIcon": [],
    "Fahrtwind.Icon.Common": [],
    "Fahrtwind.Icon.Heroicons": [],
    "Fahrtwind.Layer": [],
    "Fahrtwind.Style.BlendMode.Types": [],
    "Fahrtwind.Style.BlendMode": [],
    "Fahrtwind.Style.Border": [],
    "Fahrtwind.Style.BoxModel": [],
    "Fahrtwind.Style.BoxShadow": [],
    "Fahrtwind.Style.Breakpoint": [],
    "Fahrtwind.Style.Child": [],
    "Fahrtwind.Style.Color.Background": [],
    "Fahrtwind.Style.Color.Tailwind": [
      "amber",
      "black",
      "blue",
      "blueGray",
      "coolGray",
      "cyan",
      "emerald",
      "fuchsia",
      "gray",
      "green",
      "indigo",
      "lightBlue",
      "lime",
      "orange",
      "pink",
      "purple",
      "red",
      "rose",
      "teal",
      "trueGray",
      "violet",
      "warmGray",
      "white",
      "yellow"
    ],
    "Fahrtwind.Style.Color.Text": [],
    "Fahrtwind.Style.Color.Util": [],
    "Fahrtwind.Style.Cursor": [],
    "Fahrtwind.Style.Display.Flex": [],
    "Fahrtwind.Style.Display.Grid": [],
    "Fahrtwind.Style.Display": [],
    "Fahrtwind.Style.Divide": [
      "divideX",
      "divideXReverse",
      "divideY",
      "divideYReverse",
      "divideCol'",
      "divideCol"
    ],
    "Fahrtwind.Style.Global": [],
    "Fahrtwind.Style.Input": [],
    "Fahrtwind.Style.Inset": [],
    "Fahrtwind.Style.Isolation": [],
    "Fahrtwind.Style.Nesting": [],
    "Fahrtwind.Style.Opacity": [],
    "Fahrtwind.Style.Overflow": [],
    "Fahrtwind.Style.PointerEvents": [],
    "Fahrtwind.Style.Position": [],
    "Fahrtwind.Style.PseudoClasses": [
      "active",
      "checked",
      "default",
      "disabled",
      "empty",
      "enabled",
      "first",
      "firstChild",
      "firstOfType",
      "evenChild",
      "oddChild",
      "focus",
      "focusWithin",
      "fullscreen",
      "hover",
      "inRange",
      "indeterminate",
      "invalid",
      "lastChild",
      "lastOfType",
      "pseudoLeft",
      "link",
      "nthChild",
      "nthOfType",
      "onlyChild",
      "onlyOfType",
      "optional",
      "outOfRange",
      "readOnly",
      "readWrite",
      "required",
      "pseudoRight",
      "root",
      "scope",
      "target",
      "valid",
      "visited"
    ],
    "Fahrtwind.Style.PseudoElements": [],
    "Fahrtwind.Style.ScrollBar": [],
    "Fahrtwind.Style.Size": [],
    "Fahrtwind.Style.Text": [],
    "Fahrtwind.Style.Transform": [],
    "Fahrtwind.Style.Transition": [],
    "Fahrtwind.Style.UserSelect": [],
    "Fahrtwind.Style.Visibility": [],
    "Fahrtwind.Style": [],
    "Fahrtwind": []
  },
  "fallback": {
    "Fallback.Fallback": []
  },
  "fast-vect": {
    "Data.FastVect.Common.Matrix": [],
    "Data.FastVect.Common": [
      "term",
      "toInt"
    ],
    "Data.FastVect.FastVect.Matrix": [
      "diag",
      "dotProduct",
      "empty",
      "fromArrayArray",
      "fromVect",
      "fromVectArray",
      "fromVectVect",
      "generate",
      "index",
      "mapWithTerm",
      "modify",
      "outerMap",
      "outerProduct",
      "product",
      "replicate",
      "set",
      "singleton",
      "toArrayArray",
      "toVect",
      "toVectArray",
      "toVectVect",
      "trace",
      "traced",
      "transform",
      "transpose"
    ],
    "Data.FastVect.FastVect": [
      "adjust",
      "adjustM",
      "append",
      "cons",
      "drop",
      "empty",
      "fromArray",
      "generate",
      "head",
      "last",
      "index",
      "indexModulo",
      "mapWithTerm",
      "modify",
      "reifyVect",
      "replicate",
      "set",
      "singleton",
      "snoc",
      "splitAt",
      "take",
      "toArray",
      "toNonEmptyArray"
    ],
    "Data.FastVect.Sparse.Read": [
      "append",
      "cons",
      "drop",
      "empty",
      "fromMap",
      "generate",
      "head",
      "index",
      "indexModulo",
      "mapWithTerm",
      "modify",
      "replicate",
      "set",
      "singleton",
      "snoc",
      "sparse",
      "splitAt",
      "take",
      "toMap"
    ],
    "Data.FastVect.Sparse.Write": [
      "append",
      "cons",
      "drop",
      "empty",
      "fromMap",
      "generate",
      "head",
      "index",
      "indexModulo",
      "mapWithTerm",
      "modify",
      "replicate",
      "set",
      "singleton",
      "snoc",
      "sparse",
      "splitAt",
      "take",
      "toList"
    ]
  },
  "fetch": {
    "Fetch.Internal.Request": [
      "new",
      "convert",
      "convertImpl",
      "convertHelper"
    ],
    "Fetch.Internal.RequestBody": [],
    "Fetch.Internal.Response": [
      "arrayBuffer",
      "blob",
      "body",
      "convert",
      "json",
      "promiseToPromise",
      "text"
    ],
    "Fetch": [
      "fetch",
      "fetchBody"
    ]
  },
  "fetch-argonaut": {
    "Fetch.Argonaut.Json": []
  },
  "fetch-core": {
    "Fetch.Core.AbortController": [],
    "Fetch.Core.Headers": [
      "fromFoldable",
      "fromRecord",
      "fromObject",
      "toArray",
      "toUnfoldable",
      "empty"
    ],
    "Fetch.Core.Integrity": [],
    "Fetch.Core.Referrer": [],
    "Fetch.Core.ReferrerPolicy": [],
    "Fetch.Core.Request": [
      "_unsafeNew",
      "convert",
      "convertHelper",
      "convertImpl",
      "new",
      "unsafeNew"
    ],
    "Fetch.Core.RequestBody": [],
    "Fetch.Core.RequestCache": [],
    "Fetch.Core.RequestCredentials": [],
    "Fetch.Core.RequestMode": [],
    "Fetch.Core.RequestRedirect": [],
    "Fetch.Core.Response": [
      "arrayBuffer",
      "blob",
      "body",
      "headers",
      "json",
      "ok",
      "redirected",
      "status",
      "statusText",
      "text",
      "url"
    ],
    "Fetch.Core": [
      "fetch",
      "fetchWithOptions"
    ]
  },
  "fetch-yoga-json": {
    "Fetch.Yoga.Json": [
      "fromJSON"
    ]
  },
  "filterable": {
    "Data.Compactable": [
      "compact",
      "separate",
      "compactDefault",
      "separateDefault",
      "applyMaybe",
      "applyEither",
      "bindMaybe",
      "bindEither"
    ],
    "Data.Filterable": [
      "partitionMap",
      "partition",
      "filterMap",
      "filter",
      "eitherBool",
      "partitionDefault",
      "partitionDefaultFilter",
      "partitionDefaultFilterMap",
      "partitionMapDefault",
      "maybeBool",
      "filterDefault",
      "filterDefaultPartition",
      "filterDefaultPartitionMap",
      "filterMapDefault",
      "cleared"
    ],
    "Data.Witherable": [
      "wilt",
      "wither",
      "partitionMapByWilt",
      "filterMapByWither",
      "traverseByWither",
      "wilted",
      "withered",
      "witherDefault",
      "wiltDefault"
    ]
  },
  "fixed-points": {
    "Data.Functor.Mu": [
      "roll",
      "unroll",
      "transMu"
    ],
    "Data.Functor.Nu": [
      "unfold",
      "observe"
    ],
    "Data.TacitString": [
      "hush"
    ]
  },
  "fixed-precision": {
    "Data.Fixed": [
      "fromInt",
      "fromBigInt",
      "fromNumber",
      "toNumber",
      "fromString",
      "toString",
      "toStringWithPrecision",
      "numerator",
      "denominator",
      "floor",
      "ceil",
      "round",
      "rescale",
      "approxDiv",
      "reflectPrecision",
      "reflectPrecisionDecimalPlaces",
      "reifyPrecision"
    ]
  },
  "flame": {
    "Flame.Application.Effectful": [
      "mount",
      "mount_",
      "resumeMount",
      "resumeMount_",
      "noChanges",
      "diff'",
      "diff"
    ],
    "Flame.Application.EffectList": [
      "noMessages",
      "mount",
      "mount_",
      "resumeMount",
      "resumeMount_"
    ],
    "Flame.Application.Internal.Dom": [
      "querySelector",
      "textContent",
      "removeElement",
      "createWindowListener",
      "createDocumentListener",
      "createCustomListener",
      "dispatchCustomEvent"
    ],
    "Flame.Application.Internal.PreMount": [],
    "Flame.Application.NoEffects": [
      "mount",
      "mount_",
      "resumeMount",
      "resumeMount_"
    ],
    "Flame.Html.Event": [
      "createEvent",
      "createEventMessage",
      "createRawEvent",
      "onBlur",
      "onBlur'",
      "onCheck",
      "onClick",
      "onClick'",
      "onChange",
      "onChange'",
      "onContextmenu",
      "onContextmenu'",
      "onDblclick",
      "onDblclick'",
      "onDrag",
      "onDrag'",
      "onDragend",
      "onDragend'",
      "onDragenter",
      "onDragenter'",
      "onDragleave",
      "onDragleave'",
      "onDragover",
      "onDragover'",
      "onDragstart",
      "onDragstart'",
      "onDrop",
      "onDrop'",
      "onError",
      "onError'",
      "onFocus",
      "onFocus'",
      "onFocusin",
      "onFocusin'",
      "onFocusout",
      "onFocusout'",
      "onInput",
      "onInput'",
      "onKeydown",
      "onKeydown'",
      "onKeypress",
      "onKeypress'",
      "onKeyup",
      "onKeyup'",
      "onMousedown",
      "onMousedown'",
      "onMouseenter",
      "onMouseenter'",
      "onMouseleave",
      "onMouseleave'",
      "onMousemove",
      "onMousemove'",
      "onMouseout",
      "onMouseout'",
      "onLoad",
      "onLoad'",
      "onUnload",
      "onUnload'",
      "onMouseover",
      "onMouseover'",
      "onMouseup",
      "onMouseup'",
      "onReset",
      "onReset'",
      "onScroll",
      "onScroll'",
      "onSelect",
      "onSelect'",
      "onSubmit",
      "onSubmit'",
      "onWheel",
      "onWheel'"
    ],
    "Flame.Html.Attribute.Internal": [
      "accentHeight",
      "accept",
      "acceptCharset",
      "accessKey",
      "accumulate",
      "action",
      "additive",
      "align",
      "alignmentBaseline",
      "alt",
      "ascent",
      "autocomplete",
      "autofocus",
      "autoplay",
      "azimuth",
      "baseFrequency",
      "baseProfile",
      "baselineShift",
      "begin",
      "bias",
      "calcMode",
      "charset",
      "checked",
      "class'",
      "clipPathAttr",
      "clipPathUnits",
      "clipRule",
      "color",
      "colorInterpolation",
      "colorInterpolationFilters",
      "colorProfileAttr",
      "colorRendering",
      "cols",
      "colspan",
      "content",
      "contentEditable",
      "contentScriptType",
      "contentStyleType",
      "contextmenu",
      "controls",
      "coords",
      "createAttribute",
      "createAttributeName",
      "createAttributeType",
      "createProperty",
      "cursorAttr",
      "cx",
      "cy",
      "d",
      "datetime",
      "default",
      "diffuseConstant",
      "dir",
      "direction",
      "disabled",
      "display",
      "divisor",
      "dominantBaseline",
      "download",
      "downloadAs",
      "draggable",
      "dropzone",
      "dur",
      "dx",
      "dy",
      "edgeMode",
      "elevation",
      "enctype",
      "end",
      "externalResourcesRequired",
      "fill",
      "fillOpacity",
      "fillRule",
      "filterAttr",
      "filterUnits",
      "floodColor",
      "floodOpacity",
      "fontFamily",
      "fontSize",
      "fontSizeAdjust",
      "fontStretch",
      "fontStyle",
      "fontVariant",
      "fontWeight",
      "for",
      "fr",
      "from",
      "fx",
      "fy",
      "gradientTransform",
      "gradientUnits",
      "headers",
      "height",
      "hidden",
      "href",
      "hreflang",
      "id",
      "imageRendering",
      "in'",
      "in2",
      "isMap",
      "itemprop",
      "k1",
      "k2",
      "k3",
      "k4",
      "kernelMatrix",
      "kernelUnitLength",
      "kerning",
      "key",
      "keySplines",
      "keyTimes",
      "kind",
      "lang",
      "lengthAdjust",
      "letterSpacing",
      "lightingColor",
      "limitingConeAngle",
      "list",
      "local",
      "loop",
      "manifest",
      "markerEnd",
      "markerHeight",
      "markerMid",
      "markerStart",
      "markerUnits",
      "markerWidth",
      "maskAttr",
      "maskContentUnits",
      "maskUnits",
      "max",
      "maxlength",
      "media",
      "method",
      "min",
      "minlength",
      "mode",
      "multiple",
      "name",
      "noValidate",
      "numOctaves",
      "opacity",
      "operator",
      "order",
      "overflow",
      "overlinePosition",
      "overlineThickness",
      "paintOrder",
      "pathLength",
      "pattern",
      "patternContentUnits",
      "patternTransform",
      "patternUnits",
      "ping",
      "placeholder",
      "pointerEvents",
      "points",
      "pointsAtX",
      "pointsAtY",
      "pointsAtZ",
      "poster",
      "preload",
      "preserveAlpha",
      "preserveAspectRatio",
      "primitiveUnits",
      "pubdate",
      "r",
      "radius",
      "readOnly",
      "refX",
      "refY",
      "rel",
      "repeatCount",
      "repeatDur",
      "required",
      "requiredFeatures",
      "restart",
      "result",
      "reversed",
      "rows",
      "rowspan",
      "rx",
      "ry",
      "sandbox",
      "scale",
      "scope",
      "seed",
      "selected",
      "shape",
      "shapeRendering",
      "size",
      "specularConstant",
      "specularExponent",
      "spellcheck",
      "src",
      "srcdoc",
      "srclang",
      "start",
      "stdDeviation",
      "step",
      "stitchTiles",
      "stopColor",
      "stopOpacity",
      "strikethroughPosition",
      "strikethroughThickness",
      "stroke",
      "strokeDasharray",
      "strokeDashoffset",
      "strokeLinecap",
      "strokeLinejoin",
      "strokeMiterlimit",
      "strokeOpacity",
      "strokeWidth",
      "style",
      "style1",
      "styleAttr",
      "surfaceScale",
      "tabindex",
      "target",
      "targetX",
      "targetY",
      "textAnchor",
      "textDecoration",
      "textLength",
      "textRendering",
      "title",
      "to",
      "toStyleList",
      "transform",
      "type'",
      "underlinePosition",
      "underlineThickness",
      "useMap",
      "value",
      "values",
      "vectorEffect",
      "version",
      "viewBox",
      "visibility",
      "width",
      "wordSpacing",
      "wrap",
      "writingMode",
      "x",
      "x1",
      "x2",
      "xChannelSelector",
      "y",
      "y1",
      "y2",
      "yChannelSelector",
      "innerHtml"
    ],
    "Flame.Html.Attribute": [],
    "Flame.Html.Element": [],
    "Flame.Internal.Equality": [],
    "Flame.Internal.Fragment": [],
    "Flame.Renderer.Internal.Dom": [
      "start",
      "startFrom",
      "resume"
    ],
    "Flame.Renderer.String": [
      "render"
    ],
    "Flame.Serialization": [
      "serialize",
      "unserialize",
      "unsafeUnserialize"
    ],
    "Flame.Subscription.Document": [
      "onBlur",
      "onBlur'",
      "onClick",
      "onClick'",
      "onContextmenu",
      "onContextmenu'",
      "onDblclick",
      "onDblclick'",
      "onDrag",
      "onDrag'",
      "onDragend",
      "onDragend'",
      "onDragenter",
      "onDragenter'",
      "onDragleave",
      "onDragleave'",
      "onDragover",
      "onDragover'",
      "onDragstart",
      "onDragstart'",
      "onDrop",
      "onDrop'",
      "onFocus",
      "onFocus'",
      "onKeydown",
      "onKeydown'",
      "onKeypress",
      "onKeypress'",
      "onKeyup",
      "onKeyup'",
      "onScroll",
      "onScroll'",
      "onWheel",
      "onWheel'"
    ],
    "Flame.Subscription.Internal.Listener": [
      "createMessageListener",
      "createSubscription"
    ],
    "Flame.Subscription.Internal.Create": [
      "createSubscription",
      "createRawSubscription"
    ],
    "Flame.Subscription.Unsafe.CustomEvent": [
      "broadcast",
      "broadcast'"
    ],
    "Flame.Subscription.Window": [
      "onError",
      "onError'",
      "onLoad",
      "onLoad'",
      "onOffline",
      "onOffline'",
      "onOnline",
      "onOnline'",
      "onResize",
      "onResize'",
      "onUnload",
      "onUnload'",
      "onFocus",
      "onFocus'",
      "onPopstate",
      "onPopstate'"
    ],
    "Flame.Subscription": [
      "send",
      "onCustomEvent",
      "onCustomEvent'"
    ],
    "Flame.Types": [],
    "Flame": []
  },
  "float32": {
    "Data.Float32.Gen": [],
    "Data.Float32": [
      "fromNumber",
      "fromNumber'",
      "toNumber"
    ]
  },
  "foldable-traversable": {
    "Data.Bifoldable": [],
    "Data.Bitraversable": [
      "bitraverse",
      "bisequence",
      "bitraverseDefault",
      "bisequenceDefault",
      "ltraverse",
      "rtraverse",
      "bifor",
      "lfor",
      "rfor"
    ],
    "Data.Foldable": [
      "foldr",
      "foldl",
      "foldMap",
      "foldrDefault",
      "foldlDefault",
      "foldMapDefaultL",
      "foldMapDefaultR",
      "fold",
      "foldM",
      "traverse_",
      "for_",
      "sequence_",
      "oneOf",
      "oneOfMap",
      "intercalate",
      "surroundMap",
      "surround",
      "and",
      "or",
      "all",
      "any",
      "sum",
      "product",
      "elem",
      "notElem",
      "indexl",
      "indexr",
      "find",
      "findMap",
      "maximum",
      "maximumBy",
      "minimum",
      "minimumBy",
      "null",
      "length",
      "lookup"
    ],
    "Data.FoldableWithIndex": [
      "foldrWithIndex",
      "foldlWithIndex",
      "foldMapWithIndex",
      "foldrWithIndexDefault",
      "foldlWithIndexDefault",
      "foldMapWithIndexDefaultR",
      "foldMapWithIndexDefaultL",
      "foldWithIndexM",
      "traverseWithIndex_",
      "forWithIndex_",
      "surroundMapWithIndex",
      "allWithIndex",
      "anyWithIndex",
      "findWithIndex",
      "findMapWithIndex",
      "foldrDefault",
      "foldlDefault",
      "foldMapDefault"
    ],
    "Data.FunctorWithIndex": [
      "mapWithIndex",
      "mapDefault"
    ],
    "Data.Semigroup.Foldable": [
      "foldMap1",
      "fold1",
      "foldr1",
      "foldl1",
      "traverse1_",
      "for1_",
      "sequence1_",
      "foldr1Default",
      "foldl1Default",
      "foldMap1DefaultR",
      "foldMap1DefaultL",
      "intercalate",
      "intercalateMap",
      "maximum",
      "maximumBy",
      "minimum",
      "minimumBy"
    ],
    "Data.Semigroup.Traversable": [],
    "Data.Traversable.Accum.Internal": [
      "stateL",
      "stateR"
    ],
    "Data.Traversable.Accum": [],
    "Data.Traversable": [
      "traverse",
      "sequence",
      "traverseDefault",
      "sequenceDefault",
      "for",
      "scanl",
      "scanr",
      "mapAccumL",
      "mapAccumR"
    ],
    "Data.TraversableWithIndex": [
      "traverseWithIndex",
      "traverseWithIndexDefault",
      "forWithIndex",
      "scanlWithIndex",
      "mapAccumLWithIndex",
      "scanrWithIndex",
      "mapAccumRWithIndex",
      "traverseDefault"
    ]
  },
  "foreign": {
    "Foreign.Index": [
      "readProp",
      "readIndex",
      "ix",
      "index",
      "hasProperty",
      "hasOwnProperty",
      "errorAt"
    ],
    "Foreign.Keys": [
      "keys"
    ],
    "Foreign": [
      "renderForeignError",
      "unsafeToForeign",
      "unsafeFromForeign",
      "unsafeReadTagged",
      "typeOf",
      "tagOf",
      "isNull",
      "isUndefined",
      "isArray",
      "readString",
      "readChar",
      "readBoolean",
      "readNumber",
      "readInt",
      "readArray",
      "readNull",
      "readUndefined",
      "readNullOrUndefined",
      "fail"
    ]
  },
  "foreign-object": {
    "Foreign.Object.Gen": [],
    "Foreign.Object.ST.Unsafe": [],
    "Foreign.Object.ST": [
      "new",
      "peek",
      "poke",
      "delete"
    ],
    "Foreign.Object.Unsafe": [
      "unsafeIndex"
    ],
    "Foreign.Object": [
      "empty",
      "isEmpty",
      "size",
      "singleton",
      "insert",
      "lookup",
      "toUnfoldable",
      "toAscUnfoldable",
      "fromFoldable",
      "fromFoldableWith",
      "fromFoldableWithIndex",
      "fromHomogeneous",
      "delete",
      "pop",
      "member",
      "alter",
      "update",
      "mapWithKey",
      "filterWithKey",
      "filterKeys",
      "filter",
      "keys",
      "values",
      "union",
      "unionWith",
      "unions",
      "isSubmap",
      "fold",
      "foldMap",
      "foldM",
      "foldMaybe",
      "all",
      "thawST",
      "freezeST",
      "runST",
      "toArrayWithKey"
    ]
  },
  "foreign-readwrite": {
    "Foreign.ReadWrite": [
      "readForeign",
      "writeForeign",
      "undefined",
      "default",
      "readForeignRecordImpl",
      "readForeignRecord",
      "writeForeignRecordImpl",
      "writeForeignRecord"
    ]
  },
  "fork": {
    "Control.Monad.Fork.Class": []
  },
  "form-urlencoded": {
    "Data.FormURLEncoded": []
  },
  "formatters": {
    "Data.Formatter.DateTime": [
      "printFormatter",
      "printFormatterCommand",
      "parseFormatString",
      "format",
      "formatDateTime",
      "unformat",
      "unformatDateTime",
      "unformatParser"
    ],
    "Data.Formatter.Internal": [],
    "Data.Formatter.Interval": [
      "unformatRecurringInterval",
      "unformatInterval",
      "formatRecurringInterval",
      "formatInterval"
    ],
    "Data.Formatter.Number": [
      "printFormatter",
      "parseFormatString",
      "format",
      "unformat",
      "formatNumber",
      "formatOrShowNumber",
      "unformatNumber"
    ],
    "Data.Formatter.Parser.Interval": [
      "parseRecurringInterval",
      "parseInterval",
      "parseIsoDuration",
      "parseDateTime",
      "extendedDateTimeFormatInUTC"
    ],
    "Data.Formatter.Parser.Number": [
      "parseInteger",
      "parseMaybeInteger",
      "parseNumber",
      "parseDigit"
    ],
    "Data.Formatter.Parser.Utils": [
      "oneOfAs",
      "runP"
    ]
  },
  "framer-motion": {
    "Framer.Motion.Hook": [
      "useViewportScroll",
      "useAnimation",
      "useTransform",
      "useSpringWithMotionValue",
      "useSpringWithNumber"
    ],
    "Framer.Motion.MotionComponent": [],
    "Framer.Motion.Types": [],
    "Framer.Motion": [
      "motion",
      "withMotion",
      "animatePresence",
      "startAnimation",
      "startAnimationDynamic",
      "startAnimationVariant",
      "stopAnimation"
    ],
    "MotionValue": []
  },
  "free": {
    "Control.Comonad.Cofree.Class": [
      "unwrapCofree"
    ],
    "Control.Comonad.Cofree": [
      "deferCofree",
      "mkCofree",
      "head",
      "tail",
      "hoistCofree",
      "buildCofree",
      "explore",
      "exploreM"
    ],
    "Control.Monad.Free.Class": [
      "wrapFree"
    ],
    "Control.Monad.Free": [
      "suspendF",
      "wrap",
      "liftF",
      "hoistFree",
      "foldFree",
      "substFree",
      "runFree",
      "runFreeM",
      "resume",
      "resume'"
    ],
    "Control.Monad.Trampoline": [
      "done",
      "delay",
      "runTrampoline"
    ],
    "Data.Coyoneda": [
      "coyoneda",
      "unCoyoneda",
      "liftCoyoneda",
      "lowerCoyoneda",
      "hoistCoyoneda"
    ],
    "Data.Yoneda": [
      "runYoneda",
      "liftYoneda",
      "lowerYoneda",
      "hoistYoneda"
    ]
  },
  "freeap": {
    "Control.Applicative.Free.Gen": [],
    "Control.Applicative.Free": [
      "liftFreeAp",
      "retractFreeAp",
      "foldFreeAp",
      "hoistFreeAp",
      "analyzeFreeAp"
    ]
  },
  "freer-free": {
    "Control.Monad.Freer.Free": []
  },
  "freet": {
    "Control.Comonad.Cofree.Trans": [],
    "Control.Monad.Free.Trans": [
      "freeT",
      "liftFreeT",
      "hoistFreeT",
      "interpret",
      "bimapFreeT",
      "substFreeT",
      "resume",
      "runFreeT"
    ]
  },
  "functions": {
    "Data.Function.Uncurried": []
  },
  "functor1": {
    "Data.Foldable1": [],
    "Data.Functor1": [],
    "Data.Identity1": [],
    "Data.Traversable1": []
  },
  "functors": {
    "Data.Functor.App": [],
    "Data.Functor.Clown": [],
    "Data.Functor.Compose": [],
    "Data.Functor.Coproduct.Inject": [],
    "Data.Functor.Coproduct.Nested": [],
    "Data.Functor.Coproduct": [],
    "Data.Functor.Costar": [],
    "Data.Functor.Flip": [],
    "Data.Functor.Joker": [],
    "Data.Functor.Product.Nested": [],
    "Data.Functor.Product": [],
    "Data.Functor.Product2": []
  },
  "fuzzy": {
    "Data.Fuzzy": [
      "matchStr",
      "match"
    ]
  },
  "gen": {
    "Control.Monad.Gen.Class": [],
    "Control.Monad.Gen.Common": [],
    "Control.Monad.Gen": [
      "choose",
      "oneOf",
      "frequency",
      "elements",
      "unfoldable",
      "suchThat",
      "filtered"
    ]
  },
  "generate-values": {
    "Control.Monad.Gen.Trans": [
      "runGenT",
      "runGenT'",
      "withGenT",
      "mapGenT",
      "execGenT",
      "evalGenT",
      "perturbGenT",
      "resizeGenT",
      "runGen",
      "withGen",
      "mapGen",
      "execGen",
      "evalGen",
      "perturbGen",
      "resizeGen",
      "repeatable",
      "stateful",
      "variant",
      "suchThat",
      "suchThat'",
      "sized",
      "choose",
      "chooseInt",
      "oneOf",
      "frequency",
      "arrayOf",
      "arrayOf'",
      "arrayOf1",
      "arrayOf1'",
      "enum",
      "listOf",
      "listOf'",
      "vectorOf",
      "vectorOf'",
      "elements",
      "shuffle",
      "shuffle'",
      "uniform",
      "sample",
      "sample'",
      "randomSample1",
      "randomSampleN",
      "randomSampleN'"
    ]
  },
  "generic-router": {
    "Router.Method": [
      "fromString"
    ],
    "Router": [
      "makeRouter",
      "makeRoute",
      "route"
    ]
  },
  "geometry-plane": {
    "Data.Geometry.Plane": []
  },
  "github-actions-toolkit": {
    "GitHub.Actions.Cache": [
      "defaultDownloadOptions",
      "defaultUploadOptions",
      "restoreCache",
      "restoreCache'",
      "saveCache",
      "saveCache'"
    ],
    "GitHub.Actions.Core": [
      "exportVariable",
      "setSecret",
      "addPath",
      "getInput",
      "getInput'",
      "setOutput",
      "setCommandEcho",
      "setFailed",
      "isDebug",
      "debug",
      "error",
      "warning",
      "info",
      "startGroup",
      "endGroup",
      "saveState",
      "getState",
      "group"
    ],
    "GitHub.Actions.Exec": [
      "exec",
      "exec'",
      "defaultExecOptions",
      "defaultExecListeners"
    ],
    "GitHub.Actions.IO": [
      "defaultCopyOptions",
      "defaultMoveOptions",
      "mv",
      "mv'",
      "cp",
      "cp'",
      "mkdirP",
      "which",
      "which'",
      "rmRF"
    ],
    "GitHub.Actions.ToolCache": [
      "downloadTool",
      "downloadTool'",
      "extract7z",
      "extract7z'",
      "extractTar",
      "extractTar'",
      "extractXar",
      "extractXar'",
      "extractZip",
      "extractZip'",
      "cacheDir",
      "cacheDir'",
      "cacheFile",
      "cacheFile'",
      "find",
      "find'",
      "findAllVersions",
      "findAllVersions'",
      "getManifestFromRepo",
      "getManifestFromRepo'",
      "findFromManifest"
    ]
  },
  "grain": {
    "Grain.Class.GProxy": [
      "initialState",
      "typeRefOf"
    ],
    "Grain.Class.KGProxy": [
      "stringifyKey",
      "initialState",
      "typeRefOf"
    ],
    "Grain.Class.LProxy": [
      "initialState",
      "typeRefOf"
    ],
    "Grain.Class": [],
    "Grain.Internal.Diff": [
      "diff"
    ],
    "Grain.Internal.Element": [
      "allocElement",
      "updateElement"
    ],
    "Grain.Internal.Emitter": [
      "createEmitter",
      "subscribe",
      "unsubscribe",
      "emit"
    ],
    "Grain.Internal.Handler": [
      "allocHandlers",
      "updateHandlers"
    ],
    "Grain.Internal.MArray": [],
    "Grain.Internal.MMap": [
      "new",
      "get",
      "set",
      "del",
      "unsafeGet"
    ],
    "Grain.Internal.MObject": [
      "new",
      "keys",
      "values",
      "has",
      "get",
      "set",
      "del",
      "unsafeGet"
    ],
    "Grain.Internal.Prop": [
      "allocProps",
      "updateProps"
    ],
    "Grain.Internal.PropDiff": [
      "diff"
    ],
    "Grain.Internal.Ref": [],
    "Grain.Internal.SpecialProp": [
      "allocSpecialProps",
      "updateSpecialProps"
    ],
    "Grain.Internal.Store": [
      "createStore",
      "readGrain",
      "subscribeGrain",
      "unsubscribeGrain",
      "updateGrain"
    ],
    "Grain.Internal.Styler": [
      "mountStyler",
      "registerStyle"
    ],
    "Grain.Internal.Util": [
      "nonNull",
      "byIdx",
      "byIdxNullable",
      "keyNullable",
      "mapNullable",
      "eqNullable",
      "shouldAttribute",
      "raf",
      "head",
      "nodeIndexOf",
      "createTextNode",
      "createElement",
      "createElementNS",
      "unsafeParentNode",
      "appendChild",
      "removeChild",
      "replaceChild",
      "putChild",
      "setTextContent",
      "setAny",
      "setAttribute",
      "removeAttribute",
      "isProperty",
      "isBoolean",
      "mkEventListener",
      "whenE",
      "forE",
      "foreachE",
      "sequenceE",
      "tailRecE"
    ],
    "Grain.Markup.Element": [],
    "Grain.Markup.Handler": [],
    "Grain.Markup.Prop": [],
    "Grain.Markup": [],
    "Grain.TypeRef": [
      "fromConstructor"
    ],
    "Grain.UI": [
      "key",
      "fingerprint",
      "component",
      "element",
      "text",
      "kids",
      "prop",
      "handle",
      "css",
      "className",
      "didCreate",
      "didUpdate",
      "didDelete",
      "runRender",
      "useValue",
      "useFinder",
      "useUpdater",
      "useKeyedValue",
      "useKeyedFinder",
      "useKeyedUpdater",
      "usePortal",
      "mount"
    ],
    "Grain": []
  },
  "grain-router": {
    "Grain.Router.Parser": [
      "match",
      "lit",
      "str",
      "num",
      "int",
      "bool",
      "param",
      "params",
      "any",
      "end"
    ],
    "Grain.Router": [
      "parse",
      "useRouter",
      "initialRouter",
      "link",
      "navigateTo",
      "redirectTo",
      "goForward",
      "goBack"
    ]
  },
  "grain-virtualized": {
    "Grain.Virtualized": [
      "virtualList"
    ]
  },
  "graphql-client": {
    "Data.GraphQL.AST": [],
    "Data.GraphQL.Parser": [],
    "GraphQL.Client.Alias.Dynamic": [],
    "GraphQL.Client.Alias": [],
    "GraphQL.Client.Args": [],
    "GraphQL.Client.BaseClients.Affjax.Internal": [],
    "GraphQL.Client.BaseClients.Affjax.Node": [],
    "GraphQL.Client.BaseClients.Affjax.Web": [],
    "GraphQL.Client.BaseClients.Apollo.ErrorPolicy": [],
    "GraphQL.Client.BaseClients.Apollo.FetchPolicy": [],
    "GraphQL.Client.BaseClients.Apollo": [
      "createClient",
      "createSubscriptionClient",
      "updateCacheJson",
      "updateCache",
      "readQuery",
      "writeQuery"
    ],
    "GraphQL.Client.BaseClients.Urql": [
      "createClient",
      "createGlobalClientUnsafe",
      "createSubscriptionClient"
    ],
    "GraphQL.Client.CodeGen.GetSymbols": [],
    "GraphQL.Client.CodeGen.Js": [],
    "GraphQL.Client.CodeGen.Lines": [],
    "GraphQL.Client.CodeGen.Query": [
      "queryFromGqlToPurs"
    ],
    "GraphQL.Client.CodeGen.Schema": [
      "schemaFromGqlToPurs",
      "schemasFromGqlToPurs"
    ],
    "GraphQL.Client.CodeGen.Template.Enum": [],
    "GraphQL.Client.CodeGen.Template.Schema": [],
    "GraphQL.Client.CodeGen.Transform.NullableOverrides": [],
    "GraphQL.Client.CodeGen.Types": [
      "defaultInputOptions"
    ],
    "GraphQL.Client.ID": [],
    "GraphQL.Client.Query": [
      "query",
      "queryWithDecoder",
      "queryOptsWithDecoder",
      "queryOpts",
      "query_",
      "mutation",
      "mutationWithDecoder",
      "mutationOptsWithDecoder",
      "mutationOpts",
      "mutation_",
      "decodeGqlRes",
      "queryFullRes",
      "mutationFullRes",
      "getFullRes",
      "addErrorInfo",
      "decodeErrorsMaybe",
      "decodeError"
    ],
    "GraphQL.Client.QueryReturns": [
      "queryReturns",
      "queryReturnsImpl"
    ],
    "GraphQL.Client.SafeQueryName": [
      "safeQueryName"
    ],
    "GraphQL.Client.Subscription": [],
    "GraphQL.Client.ToGqlString": [
      "dateString",
      "emptyKeyVals",
      "gqlArgStringRecord",
      "gqlArgStringRecordBody",
      "gqlArgStringRecordTopLevel",
      "gqlQueryStringRecord",
      "indent",
      "isIgnoreArg",
      "padMilli",
      "padl",
      "padl'",
      "removeTrailingZeros",
      "showInt",
      "timeString",
      "toGqlAndArgsStringImpl",
      "toGqlArgString",
      "toGqlArgStringImpl",
      "toGqlQueryString",
      "toGqlQueryStringFormatted",
      "toGqlQueryStringImpl",
      "toLines"
    ],
    "GraphQL.Client.Types": [],
    "GraphQL.Client.Union": [],
    "GraphQL.Client.Variable": [],
    "GraphQL.Client.Variables.TypeName": [],
    "GraphQL.Client.Variables": [
      "getVarsJson",
      "getVarsTypeNames",
      "getQuery",
      "getQueryVars",
      "getVar",
      "withVars",
      "withVarsEncode"
    ],
    "GraphQL.Client.WatchQuery": [],
    "GraphQL.Hasura.Array": [],
    "GraphQL.Hasura.ComparisonExp": [],
    "GraphQL.Hasura.Decode": [
      "decodeHasura",
      "decodeHasuraFields",
      "decodeHasuraField"
    ],
    "GraphQL.Hasura.DecodeLiberal": [],
    "GraphQL.Hasura.Encode": [
      "encodeHasura"
    ]
  },
  "graphs": {
    "Data.Graph": [
      "unfoldGraph",
      "fromMap",
      "toMap",
      "vertices",
      "edges",
      "lookup",
      "outEdges",
      "topologicalSort"
    ]
  },
  "group": {
    "Data.Group.Action": [
      "lact",
      "ract"
    ],
    "Data.Group.Free": [
      "free",
      "foldFree"
    ],
    "Data.Group": [],
    "Data.Semigroup.Commutative": []
  },
  "halogen": {
    "Halogen.Aff.Driver.Eval": [
      "evalF",
      "evalQ",
      "evalM",
      "handleLifecycle",
      "queueOrRun",
      "handleAff"
    ],
    "Halogen.Aff.Driver.State": [
      "mapDriverState",
      "unDriverStateX",
      "mkDriverStateXRef",
      "renderStateX",
      "renderStateX_",
      "unRenderStateX",
      "initDriverState"
    ],
    "Halogen.Aff.Driver": [
      "runUI"
    ],
    "Halogen.Aff.Util": [
      "awaitLoad",
      "awaitBody",
      "selectElement",
      "runHalogenAff"
    ],
    "Halogen.Aff": [],
    "Halogen.Component.Profunctor": [],
    "Halogen.Component": [
      "mkComponent",
      "unComponent",
      "hoist",
      "mkEval",
      "defaultEval",
      "componentSlot",
      "mkComponentSlot",
      "unComponentSlot",
      "hoistSlot"
    ],
    "Halogen.Data.OrdBox": [
      "mkOrdBox",
      "unOrdBox"
    ],
    "Halogen.Data.Slot": [
      "empty",
      "lookup",
      "insert",
      "pop",
      "slots",
      "foreachSlot"
    ],
    "Halogen.HTML.Core": [
      "renderWidget",
      "widget",
      "text",
      "element",
      "keyed",
      "prop",
      "attr",
      "handler",
      "ref",
      "toPropValue"
    ],
    "Halogen.HTML.Elements.Keyed": [
      "article",
      "article_",
      "colgroup",
      "colgroup_",
      "dialog",
      "dialog_",
      "div",
      "div_",
      "dl",
      "dl_",
      "fieldset",
      "fieldset_",
      "footer",
      "footer_",
      "form",
      "form_",
      "header",
      "header_",
      "menu",
      "menu_",
      "ol",
      "ol_",
      "table",
      "table_",
      "tbody",
      "tbody_",
      "tfoot",
      "tfoot_",
      "thead",
      "thead_",
      "tr",
      "tr_",
      "ul",
      "ul_"
    ],
    "Halogen.HTML.Elements": [
      "element",
      "elementNS",
      "keyed",
      "keyedNS",
      "withKeys",
      "withKeys_",
      "a",
      "a_",
      "abbr",
      "abbr_",
      "address",
      "address_",
      "area",
      "article",
      "article_",
      "aside",
      "aside_",
      "audio",
      "audio_",
      "b",
      "b_",
      "base",
      "bdi",
      "bdi_",
      "bdo",
      "bdo_",
      "blockquote",
      "blockquote_",
      "body",
      "body_",
      "br",
      "br_",
      "button",
      "button_",
      "canvas",
      "caption",
      "caption_",
      "cite",
      "cite_",
      "code",
      "code_",
      "col",
      "colgroup",
      "colgroup_",
      "command",
      "datalist",
      "datalist_",
      "dd",
      "dd_",
      "del",
      "del_",
      "details",
      "details_",
      "dfn",
      "dfn_",
      "dialog",
      "dialog_",
      "div",
      "div_",
      "dl",
      "dl_",
      "dt",
      "dt_",
      "em",
      "em_",
      "embed",
      "embed_",
      "fieldset",
      "fieldset_",
      "figcaption",
      "figcaption_",
      "figure",
      "figure_",
      "footer",
      "footer_",
      "form",
      "form_",
      "h1",
      "h1_",
      "h2",
      "h2_",
      "h3",
      "h3_",
      "h4",
      "h4_",
      "h5",
      "h5_",
      "h6",
      "h6_",
      "head",
      "head_",
      "header",
      "header_",
      "hr",
      "hr_",
      "html",
      "html_",
      "i",
      "i_",
      "iframe",
      "img",
      "input",
      "ins",
      "ins_",
      "kbd",
      "kbd_",
      "label",
      "label_",
      "legend",
      "legend_",
      "li",
      "li_",
      "link",
      "main",
      "main_",
      "map",
      "map_",
      "mark",
      "mark_",
      "menu",
      "menu_",
      "menuitem",
      "menuitem_",
      "meta",
      "meter",
      "meter_",
      "nav",
      "nav_",
      "noscript",
      "noscript_",
      "object",
      "object_",
      "ol",
      "ol_",
      "optgroup",
      "optgroup_",
      "option",
      "option_",
      "output",
      "output_",
      "p",
      "p_",
      "param",
      "pre",
      "pre_",
      "progress",
      "progress_",
      "q",
      "q_",
      "rp",
      "rp_",
      "rt",
      "rt_",
      "ruby",
      "ruby_",
      "samp",
      "samp_",
      "script",
      "script_",
      "section",
      "section_",
      "select",
      "select_",
      "small",
      "small_",
      "source",
      "span",
      "span_",
      "strong",
      "strong_",
      "style",
      "style_",
      "sub",
      "sub_",
      "summary",
      "summary_",
      "sup",
      "sup_",
      "table",
      "table_",
      "tbody",
      "tbody_",
      "td",
      "td_",
      "textarea",
      "tfoot",
      "tfoot_",
      "th",
      "th_",
      "thead",
      "thead_",
      "time",
      "time_",
      "title",
      "title_",
      "tr",
      "tr_",
      "track",
      "u",
      "u_",
      "ul",
      "ul_",
      "var",
      "var_",
      "video",
      "video_",
      "wbr"
    ],
    "Halogen.HTML.Events": [
      "handler",
      "handler'",
      "onAbort",
      "onError",
      "onLoad",
      "onScroll",
      "onChange",
      "onFileUpload",
      "onInput",
      "onInvalid",
      "onReset",
      "onSelect",
      "onSubmit",
      "onTransitionEnd",
      "onCopy",
      "onPaste",
      "onCut",
      "onAuxClick",
      "onClick",
      "onDoubleClick",
      "onMouseDown",
      "onMouseEnter",
      "onMouseLeave",
      "onMouseMove",
      "onMouseOver",
      "onMouseOut",
      "onMouseUp",
      "onWheel",
      "onKeyDown",
      "onKeyUp",
      "onBlur",
      "onFocus",
      "onFocusIn",
      "onFocusOut",
      "onDrag",
      "onDragEnd",
      "onDragExit",
      "onDragEnter",
      "onDragLeave",
      "onDragOver",
      "onDragStart",
      "onDrop",
      "onTouchCancel",
      "onTouchEnd",
      "onTouchEnter",
      "onTouchLeave",
      "onTouchMove",
      "onTouchStart",
      "onResize",
      "onValueChange",
      "onValueInput",
      "onSelectedIndexChange",
      "onChecked"
    ],
    "Halogen.HTML.Properties.ARIA": [],
    "Halogen.HTML.Properties": [
      "prop",
      "attr",
      "attrNS",
      "ref",
      "expand",
      "alt",
      "charset",
      "class_",
      "classes",
      "cols",
      "rows",
      "colSpan",
      "rowSpan",
      "for",
      "height",
      "width",
      "href",
      "id",
      "name",
      "rel",
      "src",
      "srcDoc",
      "style",
      "scope",
      "target",
      "title",
      "download",
      "method",
      "action",
      "enctype",
      "noValidate",
      "type_",
      "value",
      "min",
      "max",
      "step",
      "disabled",
      "enabled",
      "required",
      "readOnly",
      "spellcheck",
      "checked",
      "selected",
      "selectedIndex",
      "placeholder",
      "autocomplete",
      "list",
      "autofocus",
      "multiple",
      "pattern",
      "accept",
      "autoplay",
      "controls",
      "loop",
      "muted",
      "poster",
      "preload",
      "draggable",
      "tabIndex"
    ],
    "Halogen.HTML": [
      "fromPlainHTML",
      "slot",
      "slot_",
      "memoized",
      "lazy",
      "lazy2",
      "lazy3"
    ],
    "Halogen.Query.ChildQuery": [],
    "Halogen.Query.Event": [],
    "Halogen.Query.HalogenM": [],
    "Halogen.Query.HalogenQ": [],
    "Halogen.Query.Input": [],
    "Halogen.Query": [
      "mkTell",
      "tell",
      "tellAll",
      "mkRequest",
      "request",
      "requestAll",
      "getHTMLElementRef"
    ],
    "Halogen.VDom.Driver": [
      "runUI"
    ],
    "Halogen": []
  },
  "halogen-bootstrap5": {
    "Halogen.Themes.Bootstrap5": []
  },
  "halogen-css": {
    "Halogen.HTML.CSS": [
      "style",
      "stylesheet"
    ]
  },
  "halogen-echarts-simple": {
    "Halogen.ECharts": []
  },
  "halogen-formless": {
    "Formless": [
      "formless",
      "validate",
      "validateM",
      "eval",
      "raise",
      "handleSubmitValidate",
      "handleSubmitValidateM",
      "mkConfig",
      "mkFieldStates",
      "mkFieldActions",
      "mkFieldResults",
      "mkFieldOutputs"
    ]
  },
  "halogen-hooks": {
    "Halogen.Hooks.Component": [],
    "Halogen.Hooks.Hook": [
      "bind",
      "discard",
      "pure",
      "unsafeFromHook",
      "unsafeToHook"
    ],
    "Halogen.Hooks.HookM": [],
    "Halogen.Hooks.Internal.Eval.Types": [],
    "Halogen.Hooks.Internal.Eval": [],
    "Halogen.Hooks.Internal.Types": [],
    "Halogen.Hooks.Internal.UseHookF": [],
    "Halogen.Hooks.Types": [],
    "Halogen.Hooks": [
      "useState",
      "useLifecycleEffect",
      "useTickEffect",
      "useQuery",
      "useMemo",
      "useRef",
      "captures",
      "capturesWith",
      "wrap"
    ]
  },
  "halogen-hooks-extra": {
    "Halogen.Hooks.Extra.Actions.Events": [],
    "Halogen.Hooks.Extra.Hooks.UseDebouncer": [
      "useDebouncer"
    ],
    "Halogen.Hooks.Extra.Hooks.UseEvent": [
      "useEvent"
    ],
    "Halogen.Hooks.Extra.Hooks.UseGet": [
      "useGet"
    ],
    "Halogen.Hooks.Extra.Hooks.UseStateFn": [
      "useStateFn",
      "useModifyState_",
      "useModifyState",
      "usePutState"
    ],
    "Halogen.Hooks.Extra.Hooks.UseThrottle": [
      "useThrottle"
    ],
    "Halogen.Hooks.Extra.Hooks": []
  },
  "halogen-store": {
    "Halogen.Store.Connect": [
      "connect",
      "subscribe"
    ],
    "Halogen.Store.Monad": [],
    "Halogen.Store.Select": [],
    "Halogen.Store.UseSelector": []
  },
  "halogen-storybook": {
    "Halogen.Storybook.Proxy": [
      "proxy"
    ],
    "Halogen.Storybook": [
      "runStorybook"
    ]
  },
  "halogen-subscriptions": {
    "Halogen.Subscription": [
      "create",
      "notify",
      "makeEmitter",
      "subscribe",
      "unsubscribe",
      "fold",
      "filter",
      "fix"
    ]
  },
  "halogen-svg-elems": {
    "Halogen.Svg.Attributes.Align": [
      "printAlign"
    ],
    "Halogen.Svg.Attributes.Baseline": [
      "printBaseline"
    ],
    "Halogen.Svg.Attributes.Color": [
      "printColor"
    ],
    "Halogen.Svg.Attributes.CSSLength": [
      "printCSSLength"
    ],
    "Halogen.Svg.Attributes.Duration": [],
    "Halogen.Svg.Attributes.FillState": [
      "printFillState"
    ],
    "Halogen.Svg.Attributes.FontSize": [
      "printFontSize"
    ],
    "Halogen.Svg.Attributes.FontStretch": [
      "printFontStretch"
    ],
    "Halogen.Svg.Attributes.FontStyle": [
      "printFontStyle"
    ],
    "Halogen.Svg.Attributes.FontWeight": [
      "printFontWeight"
    ],
    "Halogen.Svg.Attributes.MarkerUnit": [
      "printMarkerUnit"
    ],
    "Halogen.Svg.Attributes.MaskUnit": [
      "printMaskUnit"
    ],
    "Halogen.Svg.Attributes.MeetOrSlice": [
      "printMeetOrSlice"
    ],
    "Halogen.Svg.Attributes.Orient": [
      "printOrient"
    ],
    "Halogen.Svg.Attributes.Path": [
      "toArrayString",
      "m",
      "l",
      "h",
      "v",
      "c",
      "s",
      "q",
      "t",
      "a",
      "z"
    ],
    "Halogen.Svg.Attributes.StrokeLineCap": [
      "printStrokeLineCap"
    ],
    "Halogen.Svg.Attributes.StrokeLineJoin": [
      "printStrokeLineJoin"
    ],
    "Halogen.Svg.Attributes.TextAnchor": [
      "printTextAnchor"
    ],
    "Halogen.Svg.Attributes.Transform": [
      "printTransform"
    ],
    "Halogen.Svg.Attributes": [
      "attributeName",
      "begin",
      "class_",
      "classes",
      "cx",
      "cy",
      "d",
      "dominantBaseline",
      "dur",
      "fill",
      "fillAnim",
      "fillOpacity",
      "fontFamily",
      "fontSize",
      "fontSizeAdjust",
      "fontStretch",
      "fontStyle",
      "fontVariant",
      "fontWeight",
      "from",
      "to",
      "href",
      "id",
      "markerStart",
      "markerMid",
      "markerEnd",
      "markerUnits",
      "markerWidth",
      "markerHeight",
      "mask",
      "maskUnits",
      "maskContentUnits",
      "orient",
      "path",
      "points",
      "pathLength",
      "preserveAspectRatio",
      "r",
      "refX",
      "refY",
      "repeatCount",
      "rx",
      "ry",
      "stroke",
      "strokeDashArray",
      "strokeDashOffset",
      "strokeLineCap",
      "strokeLineJoin",
      "strokeMiterLimit",
      "strokeOpacity",
      "strokeWidth",
      "textAnchor",
      "transform",
      "viewBox",
      "width",
      "height",
      "x",
      "y",
      "x1",
      "y1",
      "x2",
      "y2",
      "xlinkHref"
    ],
    "Halogen.Svg.Elements": [
      "element",
      "svg",
      "g",
      "circle",
      "image",
      "ellipse",
      "rect",
      "path",
      "line",
      "polyline",
      "polygon",
      "text",
      "foreignObject",
      "defs",
      "mask",
      "marker",
      "animate",
      "animateMotion",
      "circleNode",
      "mpath",
      "title",
      "use"
    ],
    "Halogen.Svg.Indexed": []
  },
  "halogen-vdom": {
    "Halogen.VDom.DOM.Prop": [
      "propFromString",
      "propFromBoolean",
      "propFromInt",
      "propFromNumber",
      "buildProp"
    ],
    "Halogen.VDom.DOM": [
      "buildVDom",
      "buildText",
      "buildElem",
      "buildKeyed",
      "buildWidget"
    ],
    "Halogen.VDom.Machine": [
      "mkStep",
      "unStep",
      "extract",
      "step",
      "halt"
    ],
    "Halogen.VDom.Thunk": [
      "buildThunk",
      "runThunk",
      "hoist",
      "mapThunk",
      "thunked",
      "thunk1",
      "thunk2",
      "thunk3"
    ],
    "Halogen.VDom.Types": [
      "renderWidget",
      "graft",
      "unGraft",
      "runGraft"
    ],
    "Halogen.VDom.Util": [
      "newMutMap",
      "pokeMutMap",
      "deleteMutMap",
      "unsafeFreeze",
      "unsafeLookup",
      "unsafeGetAny",
      "unsafeHasAny",
      "unsafeSetAny",
      "unsafeDeleteAny",
      "forE",
      "forEachE",
      "forInE",
      "replicateE",
      "diffWithIxE",
      "diffWithKeyAndIxE",
      "strMapWithIxE",
      "refEq",
      "createTextNode",
      "setTextContent",
      "createElement",
      "insertChildIx",
      "removeChild",
      "parentNode",
      "setAttribute",
      "removeAttribute",
      "hasAttribute",
      "addEventListener",
      "removeEventListener",
      "jsUndefined"
    ],
    "Halogen.VDom": []
  },
  "halogen-vdom-string-renderer": {
    "Halogen.VDom.DOM.StringRenderer": [
      "render"
    ],
    "Halogen.VDom.StringRenderer.Util": [
      "escape"
    ],
    "Halogen.VDom.StringRenderer": [
      "render"
    ]
  },
  "heckin": {
    "Data.String.Casing": [
      "toCamelCase",
      "toPascalCase",
      "toSnakeCase",
      "toScreamingSnakeCase",
      "toKebabCase",
      "toTitleCase"
    ]
  },
  "heterogeneous": {
    "Heterogeneous.Folding": [],
    "Heterogeneous.Mapping": []
  },
  "homogeneous": {
    "Data.Homogeneous.Record": [
      "homogeneous",
      "homogeneous'",
      "fromHomogeneous",
      "modify",
      "get"
    ],
    "Data.Homogeneous.Variant": [
      "homogeneous",
      "homogeneous'",
      "fromHomogeneous"
    ],
    "Data.Homogeneous": []
  },
  "http-methods": {
    "Data.HTTP.Method": [
      "unCustomMethod",
      "fromString",
      "print"
    ]
  },
  "httpure": {
    "HTTPure.Body": [
      "defaultHeaders",
      "write",
      "read",
      "toBuffer",
      "toStream",
      "toString"
    ],
    "HTTPure.Headers": [
      "empty",
      "headers",
      "header",
      "read",
      "toString",
      "write"
    ],
    "HTTPure.Lookup": [
      "at",
      "has",
      "lookup"
    ],
    "HTTPure.Method": [
      "read"
    ],
    "HTTPure.MultiHeaders": [
      "empty",
      "fromHeaders",
      "header",
      "header'",
      "headers",
      "headers'",
      "read",
      "toString",
      "write"
    ],
    "HTTPure.Path": [
      "read"
    ],
    "HTTPure.Query": [
      "read"
    ],
    "HTTPure.Request": [
      "fromHTTPRequest",
      "fullPath"
    ],
    "HTTPure.Response": [
      "send",
      "response",
      "response'",
      "emptyResponse",
      "emptyResponse'",
      "continue",
      "continue'",
      "switchingProtocols",
      "switchingProtocols'",
      "processing",
      "processing'",
      "ok",
      "ok'",
      "created",
      "created'",
      "accepted",
      "accepted'",
      "nonAuthoritativeInformation",
      "nonAuthoritativeInformation'",
      "noContent",
      "noContent'",
      "resetContent",
      "resetContent'",
      "partialContent",
      "partialContent'",
      "multiStatus",
      "multiStatus'",
      "alreadyReported",
      "alreadyReported'",
      "iMUsed",
      "iMUsed'",
      "multipleChoices",
      "multipleChoices'",
      "movedPermanently",
      "movedPermanently'",
      "found",
      "found'",
      "seeOther",
      "seeOther'",
      "notModified",
      "notModified'",
      "useProxy",
      "useProxy'",
      "temporaryRedirect",
      "temporaryRedirect'",
      "permanentRedirect",
      "permanentRedirect'",
      "badRequest",
      "badRequest'",
      "unauthorized",
      "unauthorized'",
      "paymentRequired",
      "paymentRequired'",
      "forbidden",
      "forbidden'",
      "notFound",
      "notFound'",
      "methodNotAllowed",
      "methodNotAllowed'",
      "notAcceptable",
      "notAcceptable'",
      "proxyAuthenticationRequired",
      "proxyAuthenticationRequired'",
      "requestTimeout",
      "requestTimeout'",
      "conflict",
      "conflict'",
      "gone",
      "gone'",
      "lengthRequired",
      "lengthRequired'",
      "preconditionFailed",
      "preconditionFailed'",
      "payloadTooLarge",
      "payloadTooLarge'",
      "uRITooLong",
      "uRITooLong'",
      "unsupportedMediaType",
      "unsupportedMediaType'",
      "rangeNotSatisfiable",
      "rangeNotSatisfiable'",
      "expectationFailed",
      "expectationFailed'",
      "imATeapot",
      "imATeapot'",
      "misdirectedRequest",
      "misdirectedRequest'",
      "unprocessableEntity",
      "unprocessableEntity'",
      "locked",
      "locked'",
      "failedDependency",
      "failedDependency'",
      "upgradeRequired",
      "upgradeRequired'",
      "preconditionRequired",
      "preconditionRequired'",
      "tooManyRequests",
      "tooManyRequests'",
      "requestHeaderFieldsTooLarge",
      "requestHeaderFieldsTooLarge'",
      "unavailableForLegalReasons",
      "unavailableForLegalReasons'",
      "internalServerError",
      "internalServerError'",
      "notImplemented",
      "notImplemented'",
      "badGateway",
      "badGateway'",
      "serviceUnavailable",
      "serviceUnavailable'",
      "gatewayTimeout",
      "gatewayTimeout'",
      "hTTPVersionNotSupported",
      "hTTPVersionNotSupported'",
      "variantAlsoNegotiates",
      "variantAlsoNegotiates'",
      "insufficientStorage",
      "insufficientStorage'",
      "loopDetected",
      "loopDetected'",
      "notExtended",
      "notExtended'",
      "networkAuthenticationRequired",
      "networkAuthenticationRequired'"
    ],
    "HTTPure.Server": [
      "serve",
      "serve'",
      "serveSecure",
      "serveSecure'"
    ],
    "HTTPure.Status": [
      "write",
      "continue",
      "switchingProtocols",
      "processing",
      "ok",
      "created",
      "accepted",
      "nonAuthoritativeInformation",
      "noContent",
      "resetContent",
      "partialContent",
      "multiStatus",
      "alreadyReported",
      "iMUsed",
      "multipleChoices",
      "movedPermanently",
      "found",
      "seeOther",
      "notModified",
      "useProxy",
      "temporaryRedirect",
      "permanentRedirect",
      "badRequest",
      "unauthorized",
      "paymentRequired",
      "forbidden",
      "notFound",
      "methodNotAllowed",
      "notAcceptable",
      "proxyAuthenticationRequired",
      "requestTimeout",
      "conflict",
      "gone",
      "lengthRequired",
      "preconditionFailed",
      "payloadTooLarge",
      "uRITooLong",
      "unsupportedMediaType",
      "rangeNotSatisfiable",
      "expectationFailed",
      "imATeapot",
      "misdirectedRequest",
      "unprocessableEntity",
      "locked",
      "failedDependency",
      "upgradeRequired",
      "preconditionRequired",
      "tooManyRequests",
      "requestHeaderFieldsTooLarge",
      "unavailableForLegalReasons",
      "internalServerError",
      "notImplemented",
      "badGateway",
      "serviceUnavailable",
      "gatewayTimeout",
      "hTTPVersionNotSupported",
      "variantAlsoNegotiates",
      "insufficientStorage",
      "loopDetected",
      "notExtended",
      "networkAuthenticationRequired"
    ],
    "HTTPure.Utils": [
      "encodeURIComponent",
      "replacePlus",
      "urlDecode"
    ],
    "HTTPure.Version": [
      "read"
    ],
    "HTTPure": []
  },
  "httpurple": {
    "HTTPurple": [],
    "HTTPurple.Body": [
      "defaultHeaders",
      "write",
      "read",
      "toBuffer",
      "toStream",
      "toString"
    ],
    "HTTPurple.Cont": [
      "usingCont"
    ],
    "HTTPurple.Headers": [
      "empty",
      "header",
      "headers",
      "headersImpl",
      "mkRequestHeader",
      "mkRequestHeaders",
      "read",
      "toResponseHeaders",
      "write"
    ],
    "HTTPurple.Json": [
      "fromJson",
      "fromJsonE",
      "jsonHeaders",
      "toJson"
    ],
    "HTTPurple.Lookup": [
      "at",
      "has",
      "lookup"
    ],
    "HTTPurple.Method": [
      "read"
    ],
    "HTTPurple.Middleware": [],
    "HTTPurple.NodeMiddleware": [
      "usingMiddleware",
      "callNext",
      "callNextWithError",
      "dontCallNext"
    ],
    "HTTPurple.Path": [
      "read"
    ],
    "HTTPurple.Query": [
      "read"
    ],
    "HTTPurple.Request": [
      "fromHTTPRequest",
      "fromHTTPRequestExt",
      "fromHTTPRequestUnit",
      "fullPath"
    ],
    "HTTPurple.Response": [
      "send",
      "response",
      "response'",
      "emptyResponse",
      "emptyResponse'",
      "continue",
      "continue'",
      "switchingProtocols",
      "switchingProtocols'",
      "processing",
      "processing'",
      "ok",
      "ok'",
      "created",
      "created'",
      "accepted",
      "accepted'",
      "nonAuthoritativeInformation",
      "nonAuthoritativeInformation'",
      "noContent",
      "noContent'",
      "resetContent",
      "resetContent'",
      "partialContent",
      "partialContent'",
      "multiStatus",
      "multiStatus'",
      "alreadyReported",
      "alreadyReported'",
      "iMUsed",
      "iMUsed'",
      "multipleChoices",
      "multipleChoices'",
      "movedPermanently",
      "movedPermanently'",
      "found",
      "found'",
      "seeOther",
      "seeOther'",
      "notModified",
      "notModified'",
      "useProxy",
      "useProxy'",
      "temporaryRedirect",
      "temporaryRedirect'",
      "permanentRedirect",
      "permanentRedirect'",
      "badRequest",
      "badRequest'",
      "unauthorized",
      "unauthorized'",
      "paymentRequired",
      "paymentRequired'",
      "forbidden",
      "forbidden'",
      "notFound",
      "notFound'",
      "methodNotAllowed",
      "methodNotAllowed'",
      "notAcceptable",
      "notAcceptable'",
      "proxyAuthenticationRequired",
      "proxyAuthenticationRequired'",
      "requestTimeout",
      "requestTimeout'",
      "conflict",
      "conflict'",
      "gone",
      "gone'",
      "lengthRequired",
      "lengthRequired'",
      "preconditionFailed",
      "preconditionFailed'",
      "payloadTooLarge",
      "payloadTooLarge'",
      "uRITooLong",
      "uRITooLong'",
      "unsupportedMediaType",
      "unsupportedMediaType'",
      "rangeNotSatisfiable",
      "rangeNotSatisfiable'",
      "expectationFailed",
      "expectationFailed'",
      "imATeapot",
      "imATeapot'",
      "misdirectedRequest",
      "misdirectedRequest'",
      "unprocessableEntity",
      "unprocessableEntity'",
      "locked",
      "locked'",
      "failedDependency",
      "failedDependency'",
      "upgradeRequired",
      "upgradeRequired'",
      "preconditionRequired",
      "preconditionRequired'",
      "tooManyRequests",
      "tooManyRequests'",
      "requestHeaderFieldsTooLarge",
      "requestHeaderFieldsTooLarge'",
      "unavailableForLegalReasons",
      "unavailableForLegalReasons'",
      "internalServerError",
      "internalServerError'",
      "notImplemented",
      "notImplemented'",
      "badGateway",
      "badGateway'",
      "serviceUnavailable",
      "serviceUnavailable'",
      "gatewayTimeout",
      "gatewayTimeout'",
      "hTTPVersionNotSupported",
      "hTTPVersionNotSupported'",
      "variantAlsoNegotiates",
      "variantAlsoNegotiates'",
      "insufficientStorage",
      "insufficientStorage'",
      "loopDetected",
      "loopDetected'",
      "notExtended",
      "notExtended'",
      "networkAuthenticationRequired",
      "networkAuthenticationRequired'"
    ],
    "HTTPurple.Routes": [
      "catchAll",
      "combineRoutes",
      "mkRoute",
      "orElse"
    ],
    "HTTPurple.Server": [
      "defaultMiddlewareErrorHandler",
      "serve",
      "serveNodeMiddleware"
    ],
    "HTTPurple.Status": [
      "write",
      "continue",
      "switchingProtocols",
      "processing",
      "ok",
      "created",
      "accepted",
      "nonAuthoritativeInformation",
      "noContent",
      "resetContent",
      "partialContent",
      "multiStatus",
      "alreadyReported",
      "iMUsed",
      "multipleChoices",
      "movedPermanently",
      "found",
      "seeOther",
      "notModified",
      "useProxy",
      "temporaryRedirect",
      "permanentRedirect",
      "badRequest",
      "unauthorized",
      "paymentRequired",
      "forbidden",
      "notFound",
      "methodNotAllowed",
      "notAcceptable",
      "proxyAuthenticationRequired",
      "requestTimeout",
      "conflict",
      "gone",
      "lengthRequired",
      "preconditionFailed",
      "payloadTooLarge",
      "uRITooLong",
      "unsupportedMediaType",
      "rangeNotSatisfiable",
      "expectationFailed",
      "imATeapot",
      "misdirectedRequest",
      "unprocessableEntity",
      "locked",
      "failedDependency",
      "upgradeRequired",
      "preconditionRequired",
      "tooManyRequests",
      "requestHeaderFieldsTooLarge",
      "unavailableForLegalReasons",
      "internalServerError",
      "notImplemented",
      "badGateway",
      "serviceUnavailable",
      "gatewayTimeout",
      "hTTPVersionNotSupported",
      "variantAlsoNegotiates",
      "insufficientStorage",
      "loopDetected",
      "notExtended",
      "networkAuthenticationRequired"
    ],
    "HTTPurple.Utils": [
      "encodeURIComponent",
      "replacePlus",
      "urlDecode"
    ],
    "HTTPurple.Validation": [
      "fromValidated",
      "fromValidatedE"
    ],
    "HTTPurple.Version": [
      "read"
    ]
  },
  "httpurple-argonaut": {
    "HTTPurple.Json.Argonaut": []
  },
  "httpurple-yoga-json": {
    "HTTPurple.Json.Yoga": []
  },
  "humdrum": {
    "HumDrum": []
  },
  "hyrule": {
    "FRP.Behavior.Keyboard": [
      "keys",
      "key"
    ],
    "FRP.Behavior.Mouse": [
      "position",
      "buttons"
    ],
    "FRP.Behavior.Time": [
      "instant",
      "seconds"
    ],
    "FRP.Behavior": [
      "behavior",
      "step",
      "sample",
      "sampleBy",
      "sample_",
      "gate",
      "gateBy",
      "unfold",
      "switcher",
      "integral",
      "integral'",
      "derivative",
      "derivative'",
      "solve",
      "solve'",
      "solve2",
      "solve2'",
      "fixB",
      "animate"
    ],
    "FRP.Event.AnimationFrame": [
      "animationFrame"
    ],
    "FRP.Event.Class": [
      "fold",
      "folded",
      "count",
      "mapAccum",
      "withLast",
      "sampleOnRight",
      "sampleOnRightOp",
      "sampleOnRight_",
      "sampleOnLeft",
      "sampleOnLeftOp",
      "sampleOnLeft_",
      "applyOp",
      "keepLatest",
      "fix",
      "gate",
      "gateBy"
    ],
    "FRP.Event.Keyboard": [
      "getKeyboard",
      "disposeKeyboard",
      "down",
      "up",
      "withKeys"
    ],
    "FRP.Event.Mouse": [
      "getMouse",
      "disposeMouse",
      "move",
      "down",
      "up",
      "withPosition",
      "withButtons"
    ],
    "FRP.Event.Time": [
      "interval",
      "withTime",
      "debounce",
      "debounceWith"
    ],
    "FRP.Event.VBus": [
      "vbus",
      "vb",
      "vbackdoor"
    ],
    "FRP.Event": [
      "backdoor",
      "burning",
      "bus",
      "create",
      "createO",
      "createPure",
      "createPureO",
      "delay",
      "hot",
      "mailbox",
      "mailboxed",
      "makeEvent",
      "makeEventO",
      "makeLemmingEvent",
      "makeLemmingEventO",
      "makePureEvent",
      "memoize",
      "subscribe",
      "subscribeO",
      "subscribePure",
      "subscribePureO"
    ]
  },
  "identity": {
    "Data.Identity": []
  },
  "identy": {
    "Identy.Normalizer": [
      "normalize"
    ],
    "Identy.ObjectMap": [
      "fromFoldable",
      "toUnfoldable",
      "keys",
      "values",
      "update",
      "union",
      "size",
      "singleton",
      "member",
      "lookup",
      "isEmpty",
      "insert",
      "empty",
      "delete",
      "alter"
    ],
    "Identy.Populater": [
      "populateObjects",
      "unionObject",
      "populate"
    ],
    "Identy.Selector": []
  },
  "indexed-monad": {
    "Control.Applicative.Indexed": [
      "ipure",
      "iwhen",
      "iunless"
    ],
    "Control.Apply.Indexed": [
      "iapply",
      "iapplyFirst",
      "iapplySecond"
    ],
    "Control.Bind.Indexed": [
      "ibind",
      "ibindFlipped",
      "composeiKleisli",
      "composeiKleisliFlipped",
      "idiscard",
      "ijoin"
    ],
    "Control.Monad.Indexed": [
      "iap",
      "iwhenM",
      "iunlessM"
    ],
    "Control.Monad.Indexed.Qualified": [],
    "Data.Functor.Indexed": [],
    "Data.Indexed": []
  },
  "int64": {
    "Data.Int64.Internal": [
      "add_",
      "and",
      "and_",
      "compare_",
      "complement",
      "divide_",
      "equals_",
      "even",
      "ffiSignedness",
      "fromBits_",
      "fromBytesBE_",
      "fromBytesLE_",
      "fromBytes_",
      "fromInt_",
      "fromLowHighBits",
      "fromNumber",
      "fromNumber_",
      "fromString",
      "fromStringAs",
      "fromString_",
      "getHighBitsUnsigned_",
      "getHighBits_",
      "getLowBitsUnsigned_",
      "getLowBits_",
      "greaterThanOrEqual_",
      "greaterThan_",
      "highBits",
      "isEven_",
      "isLong_",
      "isNegative_",
      "isOdd_",
      "isPositive_",
      "isZero_",
      "lessThanOrEqual_",
      "lessThan_",
      "lowBits",
      "maxUnsignedValue_",
      "maxValue_",
      "minValue_",
      "modulo_",
      "multiply_",
      "negOne_",
      "negate_",
      "negative",
      "notEquals_",
      "not_",
      "numberBitsToInt",
      "odd",
      "one_",
      "or",
      "or_",
      "parity",
      "positive",
      "quot",
      "rem",
      "rotateLeft_",
      "rotateRight_",
      "shiftLeft_",
      "shiftRightUnsigned_",
      "shiftRight_",
      "shl",
      "shr",
      "signedLongFromInt",
      "signedToUnsigned",
      "subtract_",
      "toBytes_",
      "toInt",
      "toInt_",
      "toNumber",
      "toNumber_",
      "toSigned_",
      "toString",
      "toStringAs",
      "toString_",
      "toUnsigned_",
      "unsafeFromInt",
      "unsignedLongFromInt",
      "unsignedToSigned",
      "unsigned_",
      "uone_",
      "uzero_",
      "xor",
      "xor_",
      "zero_",
      "zshr"
    ],
    "Data.Int64.Gen": [
      "chooseInt64"
    ],
    "Data.Int64": [
      "fromInt",
      "fromLowHighBits",
      "fromNumber",
      "fromString",
      "fromStringAs",
      "lowBits",
      "highBits",
      "toInt",
      "toNumber",
      "toString",
      "toStringAs",
      "parity",
      "even",
      "odd",
      "quot",
      "rem",
      "toUnsigned",
      "toSigned",
      "and",
      "or",
      "xor",
      "shl",
      "shr",
      "zshr",
      "complement"
    ],
    "Data.UInt64.Gen": [
      "chooseUInt64"
    ],
    "Data.UInt64": [
      "fromInt",
      "unsafeFromInt",
      "fromLowHighBits",
      "fromNumber",
      "fromString",
      "fromStringAs",
      "lowBits",
      "highBits",
      "toInt",
      "toNumber",
      "toString",
      "toStringAs",
      "parity",
      "even",
      "odd",
      "quot",
      "rem",
      "and",
      "or",
      "xor",
      "shl",
      "shr",
      "zshr",
      "complement"
    ]
  },
  "integers": {
    "Data.Int.Bits": [
      "and",
      "or",
      "xor",
      "shl",
      "shr",
      "zshr",
      "complement"
    ],
    "Data.Int": [
      "fromNumber",
      "ceil",
      "floor",
      "trunc",
      "round",
      "toNumber",
      "fromString",
      "radix",
      "binary",
      "octal",
      "decimal",
      "hexadecimal",
      "base36",
      "fromStringAs",
      "toStringAs",
      "parity",
      "even",
      "odd",
      "quot",
      "rem",
      "pow"
    ]
  },
  "interpolate": {
    "Data.Interpolate": [
      "interp",
      "i"
    ]
  },
  "invariant": {
    "Data.Functor.Invariant": []
  },
  "jarilo": {
    "Jarilo.FromComponent": [],
    "Jarilo.Junction": [],
    "Jarilo.Method": [],
    "Jarilo.Path": [],
    "Jarilo.Query.QueryPairs": [],
    "Jarilo.Query": [],
    "Jarilo.Route": [
      "routeRouter"
    ],
    "Jarilo.Segment": []
  },
  "jelly": {
    "Jelly.Aff": [],
    "Jelly.Component": [],
    "Jelly.Element": [],
    "Jelly.Hydrate": [
      "hydrate",
      "mount"
    ],
    "Jelly.Prop": [],
    "Jelly.Render": [
      "render"
    ]
  },
  "jelly-hooks": {
    "Jelly.Hooks": []
  },
  "jelly-router": {
    "Jelly.Router": []
  },
  "jelly-signal": {
    "Jelly.Signal": [
      "ifSignal",
      "memoSignal",
      "modifyChannel",
      "modifyChannel_",
      "newChannel",
      "newState",
      "readChannel",
      "readSignal",
      "runSignal",
      "subscribe",
      "watchSignal",
      "writeChannel"
    ]
  },
  "jest": {
    "Jest": [
      "describe",
      "describeOnly",
      "describeSkip",
      "test",
      "testOnly",
      "testSkip",
      "expectToEqual",
      "expectToNotEqual",
      "expectToBeClose",
      "expectToBeTrue",
      "expectToBeFalse"
    ]
  },
  "js-bigints": {
    "Js.BigInt.BigInt": [
      "and",
      "asIntN",
      "asUintN",
      "fromInt",
      "fromNumber",
      "fromString",
      "fromTLInt",
      "not",
      "or",
      "pow",
      "shl",
      "shr",
      "toString",
      "xor"
    ]
  },
  "js-date": {
    "Data.JSDate": [
      "readDate",
      "isValid",
      "fromDateTime",
      "toDateTime",
      "toDate",
      "fromInstant",
      "toInstant",
      "jsdate",
      "jsdateLocal",
      "now",
      "parse",
      "getTime",
      "getUTCDate",
      "getUTCDay",
      "getUTCFullYear",
      "getUTCHours",
      "getUTCMilliseconds",
      "getUTCMinutes",
      "getUTCMonth",
      "getUTCSeconds",
      "getDate",
      "getDay",
      "getFullYear",
      "getHours",
      "getMilliseconds",
      "getMinutes",
      "getMonth",
      "getSeconds",
      "getTimezoneOffset",
      "toDateString",
      "toISOString",
      "toString",
      "toTimeString",
      "toUTCString",
      "fromTime"
    ]
  },
  "js-fileio": {
    "JS.FileIO": [
      "loadTextFile",
      "loadBinaryFileAsText",
      "saveTextFile"
    ]
  },
  "js-promise": {
    "Promise.Internal": [],
    "Promise.Lazy": [],
    "Promise.Rejection": [
      "fromError",
      "toError"
    ],
    "Promise": []
  },
  "js-promise-aff": {
    "Promise.Aff": []
  },
  "js-timers": {
    "Effect.Timer": [
      "setTimeout",
      "clearTimeout",
      "setInterval",
      "clearInterval"
    ]
  },
  "js-uri": {
    "JSURI": [
      "encodeURIComponent",
      "encodeFormURLComponent",
      "encodeURI",
      "decodeURIComponent",
      "decodeFormURLComponent",
      "decodeURI"
    ]
  },
  "justifill": {
    "Justifill.Fillable": [
      "fill",
      "getFillableFields"
    ],
    "Justifill.Justifiable": [
      "getFieldsJustified",
      "justify"
    ],
    "Justifill": []
  },
  "jwt": {
    "Jwt": [
      "decode",
      "decodeWith"
    ]
  },
  "language-cst-parser": {
    "PureScript.CST.Errors": [
      "printParseError",
      "printTokenError"
    ],
    "PureScript.CST.Layout": [
      "currentIndent",
      "isIndented",
      "insertLayout",
      "lytToken"
    ],
    "PureScript.CST.Lexer": [
      "lex",
      "lexWithState",
      "lexToken"
    ],
    "PureScript.CST.ModuleGraph": [
      "moduleGraph",
      "sortModules"
    ],
    "PureScript.CST.Parser.Monad": [
      "initialParserState",
      "fromParserResult",
      "runParser",
      "runParser'",
      "take",
      "fail",
      "try",
      "lookAhead",
      "many",
      "optional",
      "eof",
      "recover"
    ],
    "PureScript.CST.Parser": [
      "parseModule",
      "parseModuleHeader",
      "parseModuleBody",
      "parseImportDecl",
      "parseDecl",
      "parseType",
      "parseExpr",
      "parseBinder"
    ],
    "PureScript.CST.Print": [
      "printToken",
      "printSourceToken",
      "printTokenWithOption",
      "printSourceTokenWithOption",
      "printComment",
      "printLineFeed",
      "printQualified"
    ],
    "PureScript.CST.Range.TokenList": [
      "singleton",
      "cons",
      "wrap",
      "head",
      "uncons",
      "uncons'",
      "toUnfoldable",
      "toArray",
      "fromArray"
    ],
    "PureScript.CST.Range": [
      "rangeOf",
      "tokensOf"
    ],
    "PureScript.CST.TokenStream": [
      "step",
      "consTokens",
      "layoutStack",
      "unwindLayout"
    ],
    "PureScript.CST.Traversal": [
      "defaultVisitorM",
      "rewriteModuleBottomUpM",
      "rewriteBinderBottomUpM",
      "rewriteExprBottomUpM",
      "rewriteDeclBottomUpM",
      "rewriteTypeBottomUpM",
      "rewriteModuleTopDownM",
      "rewriteBinderTopDownM",
      "rewriteExprTopDownM",
      "rewriteDeclTopDownM",
      "rewriteTypeTopDownM",
      "defaultVisitorWithContextM",
      "rewriteModuleWithContextM",
      "rewriteBinderWithContextM",
      "rewriteExprWithContextM",
      "rewriteDeclWithContextM",
      "rewriteTypeWithContextM",
      "defaultMonoidalVisitor",
      "foldMapModule",
      "foldMapBinder",
      "foldMapDecl",
      "foldMapExpr",
      "foldMapType",
      "defaultVisitor",
      "rewriteModuleBottomUp",
      "rewriteBinderBottomUp",
      "rewriteExprBottomUp",
      "rewriteDeclBottomUp",
      "rewriteTypeBottomUp",
      "rewriteModuleTopDown",
      "rewriteBinderTopDown",
      "rewriteExprTopDown",
      "rewriteDeclTopDown",
      "rewriteTypeTopDown",
      "defaultVisitorWithContext",
      "rewriteModuleWithContext",
      "rewriteBinderWithContext",
      "rewriteExprWithContext",
      "rewriteDeclWithContext",
      "rewriteTypeWithContext",
      "traverseModule",
      "traverseModuleBody",
      "traverseDecl",
      "traverseForeign",
      "traverseInstance",
      "traverseInstanceHead",
      "traverseInstanceBinding",
      "traverseClassHead",
      "traverseOneOrDelimited",
      "traverseDataHead",
      "traverseDataCtor",
      "traverseType",
      "traverseRow",
      "traverseTypeVarBinding",
      "traverseExpr",
      "traverseDelimited",
      "traverseDelimitedNonEmpty",
      "traverseSeparated",
      "traverseWrapped",
      "traverseRecordLabeled",
      "traverseLabeled",
      "traverseRecordAccessor",
      "traverseRecordUpdate",
      "traverseLambda",
      "traverseIfThenElse",
      "traverseCaseOf",
      "traverseGuarded",
      "traverseGuardedExpr",
      "traversePatternGuard",
      "traverseWhere",
      "traverseLetBinding",
      "traverseValueBindingFields",
      "traverseLetIn",
      "traverseDoStatement",
      "traverseDoBlock",
      "traverseAdoBlock",
      "traverseBinder",
      "bottomUpTraversal",
      "rewriteBottomUpM",
      "topDownTraversal",
      "rewriteTopDownM",
      "topDownTraversalWithContextM",
      "rewriteWithContextM",
      "topDownMonoidalTraversal",
      "monoidalRewrite",
      "bottomUpPureTraversal",
      "rewriteBottomUp",
      "topDownPureTraversal",
      "rewriteTopDown",
      "topDownTraversalWithContext",
      "rewriteWithContext"
    ],
    "PureScript.CST.Types": [],
    "PureScript.CST": [
      "parseModule",
      "parsePartialModule",
      "parseImportDecl",
      "parseDecl",
      "parseExpr",
      "parseType",
      "parseBinder",
      "printModule",
      "toRecovered"
    ]
  },
  "lazy": {
    "Data.Lazy": []
  },
  "lazy-joe": {
    "Lazy.Joe": [
      "effectful",
      "new",
      "scoped",
      "curried",
      "variadic",
      "from",
      "fromDefault"
    ]
  },
  "lcg": {
    "Random.LCG": [
      "mkSeed",
      "unSeed",
      "randomSeed",
      "lcgA",
      "lcgC",
      "lcgM",
      "lcgNext",
      "lcgPerturb"
    ]
  },
  "leibniz": {
    "Data.Leibniz": [
      "runLeibniz",
      "coerce",
      "coerceSymm",
      "symm",
      "liftLeibniz",
      "liftLeibniz1of2",
      "liftLeibniz2of2",
      "liftLeibniz1of3",
      "liftLeibniz2of3",
      "liftLeibniz3of3",
      "applyLeibniz",
      "applyLeibniz1of2",
      "applyLeibniz2of2",
      "applyLeibniz1of3",
      "applyLeibniz2of3",
      "applyLeibniz3of3",
      "lowerLeibniz",
      "lowerLeibniz1of2",
      "lowerLeibniz2of2",
      "lowerLeibniz1of3",
      "lowerLeibniz2of3",
      "lowerLeibniz3of3",
      "refute"
    ]
  },
  "linalg": {
    "Data.LinearAlgebra.Matrix": [
      "fromArray",
      "fromFunction",
      "fromColumns",
      "eye",
      "diag",
      "mapWithIndex",
      "toArray",
      "ncols",
      "nrows",
      "column",
      "columns",
      "index",
      "index'",
      "add",
      "diff",
      "scale",
      "mult",
      "mult'",
      "kronecker",
      "transpose",
      "inverse",
      "kernel",
      "image",
      "determinant",
      "rank",
      "trace",
      "gaussJordan",
      "solveLinearSystem",
      "solveLinearSystem'"
    ],
    "Data.LinearAlgebra.Vector": [
      "fromArray",
      "toArray",
      "fromFunction",
      "null",
      "index",
      "index'",
      "mapWithIndex",
      "add",
      "diff",
      "dot",
      "scale",
      "opposite",
      "colinear"
    ]
  },
  "lists": {
    "Data.List.Internal": [
      "emptySet",
      "insertAndLookupBy"
    ],
    "Data.List.Lazy.NonEmpty": [
      "toUnfoldable",
      "fromFoldable",
      "fromList",
      "toList",
      "singleton",
      "repeat",
      "iterate",
      "head",
      "last",
      "tail",
      "init",
      "cons",
      "uncons",
      "length",
      "concatMap",
      "appendFoldable"
    ],
    "Data.List.Lazy.Types": [],
    "Data.List.Lazy": [
      "toUnfoldable",
      "fromFoldable",
      "singleton",
      "range",
      "replicate",
      "replicateM",
      "some",
      "many",
      "repeat",
      "iterate",
      "cycle",
      "null",
      "length",
      "snoc",
      "insert",
      "insertBy",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "index",
      "elemIndex",
      "elemLastIndex",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "deleteAt",
      "updateAt",
      "modifyAt",
      "alterAt",
      "reverse",
      "concat",
      "concatMap",
      "filter",
      "filterM",
      "mapMaybe",
      "catMaybes",
      "stripPrefix",
      "slice",
      "take",
      "takeWhile",
      "drop",
      "dropWhile",
      "span",
      "group",
      "groupBy",
      "partition",
      "nub",
      "nubBy",
      "nubEq",
      "nubByEq",
      "union",
      "unionBy",
      "delete",
      "deleteBy",
      "difference",
      "intersect",
      "intersectBy",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "transpose",
      "foldM",
      "foldrLazy",
      "scanlLazy"
    ],
    "Data.List.NonEmpty": [
      "toUnfoldable",
      "fromFoldable",
      "fromList",
      "toList",
      "singleton",
      "length",
      "cons",
      "cons'",
      "snoc",
      "snoc'",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "unsnoc",
      "index",
      "elemIndex",
      "elemLastIndex",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "updateAt",
      "modifyAt",
      "reverse",
      "concat",
      "concatMap",
      "filter",
      "filterM",
      "mapMaybe",
      "catMaybes",
      "appendFoldable",
      "sort",
      "sortBy",
      "take",
      "takeWhile",
      "drop",
      "dropWhile",
      "span",
      "group",
      "groupAll",
      "groupBy",
      "groupAllBy",
      "partition",
      "nub",
      "nubBy",
      "nubEq",
      "nubByEq",
      "union",
      "unionBy",
      "intersect",
      "intersectBy",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "foldM"
    ],
    "Data.List.Partial": [],
    "Data.List.Types": [
      "toList",
      "nelCons"
    ],
    "Data.List.ZipList": [],
    "Data.List": [
      "toUnfoldable",
      "fromFoldable",
      "singleton",
      "range",
      "some",
      "someRec",
      "many",
      "manyRec",
      "null",
      "length",
      "snoc",
      "insert",
      "insertBy",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "unsnoc",
      "index",
      "elemIndex",
      "elemLastIndex",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "deleteAt",
      "updateAt",
      "modifyAt",
      "alterAt",
      "reverse",
      "concat",
      "concatMap",
      "filter",
      "filterM",
      "mapMaybe",
      "catMaybes",
      "sort",
      "sortBy",
      "stripPrefix",
      "slice",
      "take",
      "takeEnd",
      "takeWhile",
      "drop",
      "dropEnd",
      "dropWhile",
      "span",
      "group",
      "groupAll",
      "groupBy",
      "groupAllBy",
      "partition",
      "nub",
      "nubBy",
      "nubEq",
      "nubByEq",
      "union",
      "unionBy",
      "delete",
      "deleteBy",
      "difference",
      "intersect",
      "intersectBy",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "transpose",
      "foldM"
    ]
  },
  "literals": {
    "Literals.Boolean": [
      "false_",
      "true_"
    ],
    "Literals.Int": [
      "intLit"
    ],
    "Literals.Literal": [],
    "Literals.Null": [
      "null"
    ],
    "Literals.Number": [
      "numberLit"
    ],
    "Literals.String": [
      "stringLit"
    ],
    "Literals.Undefined": [
      "undefined"
    ],
    "Literals": []
  },
  "logging": {
    "Control.Logger.Console": [
      "console"
    ],
    "Control.Logger.Writer": [
      "writer"
    ],
    "Control.Logger": [
      "log",
      "cfilter",
      "hoist"
    ]
  },
  "logging-journald": {
    "Control.Logger.Journald.Types": [],
    "Control.Logger.Journald": [
      "logger",
      "logger'"
    ]
  },
  "machines": {
    "Data.Machine.Mealy": [
      "runMealyT",
      "hoistMealyT",
      "source",
      "sink",
      "stepMealy",
      "runMealy",
      "pureMealy",
      "mealy",
      "halt",
      "take",
      "drop",
      "loop",
      "toUnfoldable",
      "zipWith",
      "scanl",
      "collect",
      "singleton",
      "fromMaybe",
      "fromArray",
      "msplit",
      "interleave",
      "once",
      "when",
      "ifte",
      "wrapEffect"
    ]
  },
  "marionette": {
    "Marionette.Controllers.ControlAPI": [
      "mkController"
    ],
    "Marionette.Controllers.Monadic": [
      "mkController",
      "sendMsg"
    ],
    "Marionette.Controllers.Pure": [
      "mkController"
    ],
    "Marionette.Types": [],
    "Marionette": [
      "defaultConfig",
      "noController",
      "noRenderer",
      "runProgram"
    ]
  },
  "marionette-commander": {
    "Marionette.Renderers.Commander": [
      "defaultConfig",
      "mkRenderer",
      "mkRenderer_",
      "noCliSurface"
    ],
    "Marionette.Renderers.Eventless": [
      "defaultConfig",
      "mkRenderer",
      "mkRenderer_"
    ]
  },
  "marionette-react-basic-hooks": {
    "Marionette.ReactBasic": [
      "useMarionette"
    ]
  },
  "matrices": {
    "Matrix": [
      "height",
      "width",
      "repeat",
      "fromArray",
      "get",
      "getRow",
      "getColumn",
      "rows",
      "columns",
      "prettyPrintMatrix",
      "empty",
      "isEmpty",
      "set",
      "modify",
      "toIndexedArray",
      "indexedMap",
      "zipWith"
    ]
  },
  "matryoshka": {
    "Matryoshka.Algebra": [],
    "Matryoshka.Class.Corecursive": [],
    "Matryoshka.Class.Recursive": [],
    "Matryoshka.Coalgebra": [],
    "Matryoshka.DistributiveLaw": [],
    "Matryoshka.Fold": [],
    "Matryoshka.Pattern.CoEnvT": [],
    "Matryoshka.Refold": [],
    "Matryoshka.Transform": [],
    "Matryoshka.Unfold": [],
    "Matryoshka.Util": [],
    "Matryoshka": []
  },
  "maybe": {
    "Data.Maybe.First": [],
    "Data.Maybe.Last": [],
    "Data.Maybe": []
  },
  "mdast-util-from-markdown": {
    "MdAst.MdAst": [
      "fromMarkdown",
      "toMarkdown"
    ]
  },
  "media-types": {
    "Data.MediaType.Common": [],
    "Data.MediaType": []
  },
  "metadata": {
    "PureScript.Metadata": []
  },
  "midi": {
    "Data.Midi.Generate": [
      "event",
      "recording",
      "midiMessage"
    ],
    "Data.Midi.Instrument": [
      "instrumentNames",
      "gleitzmanName",
      "gleitzmanNames",
      "readGleitzman"
    ],
    "Data.Midi.Parser": [
      "normalise",
      "parse",
      "parseMidiEvent",
      "parseMidiMessage"
    ],
    "Data.Midi.WebMidi": [
      "createDeviceChannel",
      "createEventChannel",
      "detectInputDevices",
      "deviceSignal",
      "eventSignal",
      "listen",
      "webMidiConnect"
    ],
    "Data.Midi": []
  },
  "milkis": {
    "Milkis.Impl.Node": [
      "nodeFetch"
    ],
    "Milkis.Impl": [],
    "Milkis.Impl.Window": [
      "windowFetch"
    ],
    "Milkis": [
      "defaultFetchOptions",
      "getMethod",
      "postMethod",
      "putMethod",
      "patchMethod",
      "deleteMethod",
      "headMethod",
      "redirectError",
      "redirectFollow",
      "redirectManual",
      "omitCredentials",
      "sameOriginCredentials",
      "includeCredentials",
      "fetch",
      "json",
      "text",
      "headers",
      "arrayBuffer",
      "makeHeaders",
      "statusCode",
      "url"
    ]
  },
  "minibench": {
    "Performance.Minibench": [
      "bench",
      "benchWith",
      "benchWith'",
      "withUnits"
    ]
  },
  "mmorph": {
    "Control.Monad.Morph": []
  },
  "monad-control": {
    "Control.Monad.Base": [],
    "Control.Monad.Trans.Control": [
      "liftWith",
      "restoreT",
      "integrateT",
      "liftBaseWith",
      "restoreM",
      "integrateM",
      "defaultLiftBaseWith",
      "defaultRestoreM",
      "writerTStTToTuple",
      "tupleToWriterTStT",
      "freeTStTToEither",
      "eitherToFreeTStT"
    ],
    "Data.Functor.Singleton": []
  },
  "monad-logger": {
    "Control.Monad.Logger.Class": [
      "log",
      "trace",
      "debug",
      "info",
      "warn",
      "error"
    ],
    "Control.Monad.Logger.Trans": [
      "runLoggerT",
      "mapLoggerT"
    ],
    "Data.Log.Filter": [
      "minimumLevel",
      "maximumLevel",
      "onlyLevel"
    ],
    "Data.Log.Formatter.JSON": [
      "jsonFormatter"
    ],
    "Data.Log.Formatter.Pretty": [
      "prettyFormatter"
    ],
    "Data.Log.Level": [],
    "Data.Log.Message": [],
    "Data.Log.Tag": [
      "tag",
      "intTag",
      "numberTag",
      "booleanTag",
      "jsDateTag",
      "tagSetTag",
      "fromArray"
    ]
  },
  "monad-loops": {
    "Control.Monad.Loops": [
      "whileM",
      "whileM'",
      "whileM_",
      "untilM",
      "untilM'",
      "untilM_",
      "iterateWhile",
      "iterateUntil",
      "iterateUntilM",
      "whileJust",
      "whileJust'",
      "whileJust_",
      "untilJust",
      "unfoldM",
      "unfoldM'",
      "unfoldM_",
      "unfoldrM",
      "unfoldrM'",
      "andM",
      "orM",
      "anyPM",
      "allPM",
      "anyM",
      "allM"
    ],
    "Control.Monad.Rec.Loops": [
      "whileM",
      "whileM'",
      "whileM_",
      "untilM",
      "untilM'",
      "untilM_",
      "iterateWhile",
      "iterateUntil",
      "iterateUntilM",
      "whileJust",
      "whileJust'",
      "whileJust_",
      "untilJust",
      "unfoldM",
      "unfoldM'",
      "unfoldM_",
      "unfoldrM",
      "unfoldrM'",
      "andM",
      "orM",
      "anyPM",
      "allPM",
      "anyM",
      "allM"
    ]
  },
  "monad-unlift": {
    "Control.Monad.Trans.Unlift": []
  },
  "monoid-extras": {
    "Data.Monoid.Action": [
      "act"
    ],
    "Data.Monoid.Always": [
      "always"
    ],
    "Data.Monoid.Coproduct": [
      "inL",
      "inR",
      "prependL",
      "prependR",
      "killL",
      "killR",
      "untangle",
      "untangled",
      "_L",
      "_R"
    ],
    "Data.Monoid.Cut": [
      "cut"
    ],
    "Data.Monoid.Deletable": [
      "unDelete",
      "toDeletable",
      "deleteL",
      "deleteR"
    ],
    "Data.Monoid.Inf": [
      "minimum",
      "maximum",
      "posInfty",
      "negInfty",
      "posFinite",
      "negFinite"
    ],
    "Data.Monoid.MList": [
      "empty",
      "inj",
      "get",
      "alt",
      "perhaps"
    ],
    "Data.Monoid.Recommend": [
      "getRecommend"
    ],
    "Data.Monoid.SemiDirectProduct": [
      "unSemi",
      "tag",
      "inject",
      "untag",
      "embed",
      "quotient"
    ],
    "Data.Monoid.Split": [
      "split",
      "unsplit"
    ]
  },
  "monoidal": {
    "Control.Category.Tensor": [],
    "Data.Bifunctor.ApplicativeDo": [
      "apply",
      "pure"
    ],
    "Data.Bifunctor.Module": [],
    "Data.Bifunctor.Monoidal.Specialized": [],
    "Data.Bifunctor.Monoidal": [],
    "Data.Functor.ApplicativeDo": [
      "apply",
      "pure"
    ],
    "Data.Functor.Module": [],
    "Data.Functor.Monoidal": [],
    "Data.Trifunctor.ApplicativeDo": [
      "apply",
      "pure"
    ],
    "Data.Trifunctor.Module": [],
    "Data.Trifunctor.Monoidal": []
  },
  "morello": {
    "Morello.Morello.Core": [],
    "Morello.Morello.Simple": [],
    "Morello.Morello.Validated": [],
    "Morello.Morello": []
  },
  "mote": {
    "Mote.Description": [],
    "Mote.Entry": [],
    "Mote.Monad": [],
    "Mote.Plan": [],
    "Mote": []
  },
  "motsunabe": {
    "Motsunabe": []
  },
  "mysql": {
    "MySQL.Connection": [
      "defaultConnectionInfo",
      "queryWithOptions",
      "queryWithOptions_",
      "query",
      "query_",
      "execute",
      "execute_",
      "_query",
      "format",
      "createConnection",
      "closeConnection"
    ],
    "MySQL.Internal": [
      "liftError"
    ],
    "MySQL.Pool": [
      "defaultPoolInfo",
      "createPool",
      "closePool",
      "getConnection",
      "releaseConnection",
      "withPool"
    ],
    "MySQL.QueryValue": [
      "toQueryValue",
      "match"
    ],
    "MySQL.Transaction": [
      "withTransaction",
      "begin",
      "commit",
      "rollback"
    ]
  },
  "n3": {
    "N3": [
      "parse",
      "write"
    ]
  },
  "nano-id": {
    "Nano": [
      "create",
      "createDefault",
      "createM"
    ]
  },
  "naturals": {
    "Data.Natural": [
      "intToNat",
      "natToInt",
      "minus"
    ]
  },
  "nested-functor": {
    "Data.Functor.Nested": [
      "nmap",
      "nmapFlipped"
    ]
  },
  "newtype": {
    "Data.Newtype": []
  },
  "nextui": {
    "NextUI.NextUI": [
      "avatar",
      "button",
      "buttonGroup",
      "card",
      "cardBody",
      "cardDivider",
      "cardFooter",
      "cardHeader",
      "col",
      "container",
      "createTheme",
      "dropdown",
      "dropdownButton",
      "dropdownItem",
      "dropdownMenu",
      "dropdownTrigger",
      "grid",
      "gridContainer",
      "input",
      "link",
      "loading",
      "navbar",
      "navbarBrand",
      "navbarCollapse",
      "navbarCollapseItem",
      "navbarContent",
      "navbarItem",
      "navbarLink",
      "navbarToggle",
      "nextThemesProvider",
      "nextUIProvider",
      "pagination",
      "popover",
      "popoverContent",
      "popoverTrigger",
      "row",
      "sendButton",
      "spacer",
      "switch",
      "text",
      "textArea",
      "themeClassName",
      "themeIsDark",
      "useNextTheme",
      "useTheme"
    ]
  },
  "node-buffer": {
    "Node.Buffer.Class": [
      "create",
      "freeze",
      "unsafeFreeze",
      "thaw",
      "unsafeThaw",
      "fromArray",
      "fromString",
      "fromArrayBuffer",
      "toArrayBuffer",
      "read",
      "readString",
      "toString",
      "write",
      "writeString",
      "toArray",
      "getAtOffset",
      "setAtOffset",
      "slice",
      "size",
      "concat",
      "concat'",
      "copy",
      "fill"
    ],
    "Node.Buffer.Immutable": [
      "create",
      "fromArray",
      "fromString",
      "fromArrayBuffer",
      "read",
      "readString",
      "toString",
      "toArray",
      "toArrayBuffer",
      "getAtOffset",
      "concat",
      "concat'",
      "slice",
      "size"
    ],
    "Node.Buffer.Internal": [
      "unsafeFreeze",
      "unsafeThaw",
      "usingFromImmutable",
      "usingToImmutable",
      "create",
      "copyAll",
      "fromArray",
      "fromString",
      "fromArrayBuffer",
      "toArrayBuffer",
      "read",
      "readString",
      "toString",
      "write",
      "writeString",
      "toArray",
      "getAtOffset",
      "setAtOffset",
      "slice",
      "size",
      "concat",
      "concat'",
      "copy",
      "fill"
    ],
    "Node.Buffer.ST": [
      "run"
    ],
    "Node.Buffer.Types": [],
    "Node.Buffer": [],
    "Node.Encoding": [
      "encodingToNode",
      "byteLength"
    ]
  },
  "node-buffer-blob": {
    "Node.Buffer.Blob": [
      "fromArrayBuffers",
      "fromBlobs",
      "fromDataView",
      "fromStrings",
      "size",
      "slice",
      "stream",
      "text",
      "toArrayBuffer",
      "tpe"
    ]
  },
  "node-child-process": {
    "Node.ChildProcess": [
      "stdin",
      "stdout",
      "stderr",
      "pid",
      "connected",
      "kill",
      "send",
      "disconnect",
      "toStandardError",
      "onExit",
      "onClose",
      "onDisconnect",
      "onMessage",
      "onError",
      "spawn",
      "defaultSpawnOptions",
      "exec",
      "execFile",
      "defaultExecOptions",
      "execSync",
      "execFileSync",
      "defaultExecSyncOptions",
      "fork",
      "pipe",
      "inherit",
      "ignore"
    ]
  },
  "node-fs": {
    "Node.FS.Async": [
      "rename",
      "truncate",
      "chown",
      "chmod",
      "lstat",
      "stat",
      "link",
      "symlink",
      "readlink",
      "realpath",
      "realpath'",
      "unlink",
      "rmdir",
      "rmdir'",
      "rm",
      "rm'",
      "mkdir",
      "mkdir'",
      "readdir",
      "utimes",
      "readFile",
      "readTextFile",
      "writeFile",
      "writeTextFile",
      "appendFile",
      "appendTextFile",
      "fdOpen",
      "fdRead",
      "fdNext",
      "fdWrite",
      "fdAppend",
      "fdClose"
    ],
    "Node.FS.Perms": [
      "mkPerm",
      "none",
      "read",
      "write",
      "execute",
      "all",
      "mkPerms",
      "permsFromString",
      "permsToString",
      "permsToInt"
    ],
    "Node.FS.Stats": [
      "isFile",
      "isDirectory",
      "isBlockDevice",
      "isCharacterDevice",
      "isFIFO",
      "isSocket",
      "isSymbolicLink",
      "accessedTime",
      "modifiedTime",
      "statusChangedTime"
    ],
    "Node.FS.Stream": [
      "createWriteStream",
      "fdCreateWriteStream",
      "defaultWriteStreamOptions",
      "createWriteStreamWith",
      "fdCreateWriteStreamWith",
      "createReadStream",
      "fdCreateReadStream",
      "defaultReadStreamOptions",
      "createReadStreamWith",
      "fdCreateReadStreamWith"
    ],
    "Node.FS.Sync": [
      "rename",
      "truncate",
      "chown",
      "chmod",
      "stat",
      "lstat",
      "link",
      "symlink",
      "readlink",
      "realpath",
      "realpath'",
      "unlink",
      "rmdir",
      "rmdir'",
      "rm",
      "rm'",
      "mkdir",
      "mkdir'",
      "readdir",
      "utimes",
      "readFile",
      "readTextFile",
      "writeFile",
      "writeTextFile",
      "appendFile",
      "appendTextFile",
      "exists",
      "fdOpen",
      "fdRead",
      "fdNext",
      "fdWrite",
      "fdAppend",
      "fdFlush",
      "fdClose"
    ],
    "Node.FS": [
      "symlinkTypeToNode",
      "fileFlagsToNode"
    ]
  },
  "node-fs-aff": {
    "Node.FS.Aff": [
      "rename",
      "truncate",
      "chown",
      "chmod",
      "stat",
      "link",
      "symlink",
      "readlink",
      "realpath",
      "realpath'",
      "unlink",
      "rmdir",
      "rmdir'",
      "rm",
      "rm'",
      "mkdir",
      "mkdir'",
      "readdir",
      "utimes",
      "readFile",
      "readTextFile",
      "writeFile",
      "writeTextFile",
      "appendFile",
      "appendTextFile",
      "fdOpen",
      "fdRead",
      "fdNext",
      "fdWrite",
      "fdAppend",
      "fdClose"
    ]
  },
  "node-http": {
    "Node.HTTP.Client": [
      "protocol",
      "hostname",
      "port",
      "method",
      "path",
      "headers",
      "auth",
      "key",
      "cert",
      "rejectUnauthorized",
      "family",
      "request",
      "requestFromURI",
      "requestAsStream",
      "responseAsStream",
      "setTimeout",
      "httpVersion",
      "responseHeaders",
      "responseCookies",
      "statusCode",
      "statusMessage"
    ],
    "Node.HTTP.Secure": [
      "createServer",
      "handshakeTimeout",
      "requestCert",
      "rejectUnauthorized",
      "npnProtocolsString",
      "npnProtocolsBuffer",
      "npnProtocolsUint8Array",
      "npnProtocolsStringArray",
      "npnProtocolsBufferArray",
      "npnProtocolsUint8ArrayArray",
      "npnProtocols",
      "alpnProtocolsString",
      "alpnProtocolsBuffer",
      "alpnProtocolsUint8Array",
      "alpnProtocolsStringArray",
      "alpnProtocolsBufferArray",
      "alpnProtocolsUint8ArrayArray",
      "alpnProtocols",
      "sessionTimeout",
      "ticketKeys",
      "pfxString",
      "pfxBuffer",
      "pfx",
      "keyString",
      "keyBuffer",
      "keyStringArray",
      "keyBufferArray",
      "key",
      "passphrase",
      "certString",
      "certBuffer",
      "certStringArray",
      "certBufferArray",
      "cert",
      "caString",
      "caBuffer",
      "caStringArray",
      "caBufferArray",
      "ca",
      "crlString",
      "crlBuffer",
      "crlStringArray",
      "crlBufferArray",
      "crl",
      "ciphers",
      "honorCipherOrder",
      "ecdhCurve",
      "dhparamString",
      "dhparamBuffer",
      "dhparam",
      "secureProtocol",
      "secureOptions",
      "sessionIdContext"
    ],
    "Node.HTTP": [
      "createServer",
      "listen",
      "close",
      "listenSocket",
      "onConnect",
      "onUpgrade",
      "httpVersion",
      "requestHeaders",
      "requestMethod",
      "requestURL",
      "requestAsStream",
      "setHeader",
      "setHeaders",
      "setStatusCode",
      "setStatusMessage",
      "responseAsStream"
    ]
  },
  "node-net": {
    "Node.Net.Server": [
      "address",
      "close",
      "createServer",
      "getConnections",
      "listen",
      "listenBacklog",
      "listenExclusive",
      "listenHost",
      "listenICP",
      "listenIpv6Only",
      "listenPath",
      "listenPort",
      "listenReadableAll",
      "listenTCP",
      "listenWritableAll",
      "listening",
      "onClose",
      "onConnection",
      "onError",
      "onListening",
      "serverAllowHalfOpen",
      "serverPauseOnConnect"
    ],
    "Node.Net.Socket": [
      "bufferSize",
      "bytesRead",
      "bytesWritten",
      "connect",
      "connectFamily",
      "connectHints",
      "connectHost",
      "connectICP",
      "connectLocalAddress",
      "connectLocalPort",
      "connectPath",
      "connectPort",
      "connectTCP",
      "connecting",
      "createConnection",
      "createConnectionICP",
      "createConnectionTCP",
      "destroy",
      "destroyed",
      "end",
      "endString",
      "localAddress",
      "localPort",
      "onClose",
      "onConnect",
      "onData",
      "onDrain",
      "onEnd",
      "onError",
      "onLookup",
      "onReady",
      "onTimeout",
      "pause",
      "pending",
      "remoteAddress",
      "remoteFamily",
      "remotePort",
      "resume",
      "setEncoding",
      "setKeepAlive",
      "setNoDelay",
      "setTimeout",
      "socketAllowHalfOpen",
      "socketFd",
      "socketHost",
      "socketPath",
      "socketPort",
      "socketReadable",
      "socketTimeout",
      "socketWritable",
      "write",
      "writeString"
    ],
    "Node.Net": [
      "isIP",
      "isIPv4",
      "isIPv6"
    ]
  },
  "node-path": {
    "Node.Path": []
  },
  "node-process": {
    "Node.Platform": [],
    "Node.Process": [
      "onBeforeExit",
      "onExit",
      "onSignal",
      "onUncaughtException",
      "onUnhandledRejection",
      "nextTick",
      "argv",
      "execArgv",
      "execPath",
      "chdir",
      "cwd",
      "getEnv",
      "lookupEnv",
      "setEnv",
      "unsetEnv",
      "pid",
      "platform",
      "exit",
      "stdin",
      "stdout",
      "stderr",
      "stdinIsTTY",
      "stdoutIsTTY",
      "stderrIsTTY",
      "version"
    ]
  },
  "node-readline": {
    "Node.ReadLine": [
      "createInterface",
      "createConsoleInterface",
      "output",
      "completer",
      "terminal",
      "historySize",
      "noCompletion",
      "prompt",
      "setPrompt",
      "setLineHandler",
      "close",
      "question"
    ]
  },
  "node-sqlite3": {
    "SQLite3.Internal": [
      "_newDB",
      "_closeDB",
      "_queryDB",
      "_queryObjectDB"
    ],
    "SQLite3": [
      "newDB",
      "closeDB",
      "queryDB",
      "queryObjectDB"
    ]
  },
  "node-streams": {
    "Node.Stream": [
      "onData",
      "onDataString",
      "onDataEither",
      "setEncoding",
      "onReadable",
      "onEnd",
      "onFinish",
      "onClose",
      "onError",
      "resume",
      "pause",
      "isPaused",
      "pipe",
      "unpipe",
      "unpipeAll",
      "read",
      "readString",
      "readEither",
      "write",
      "writeString",
      "cork",
      "uncork",
      "setDefaultEncoding",
      "end",
      "destroy",
      "destroyWithError"
    ]
  },
  "node-streams-aff": {
    "Node.Stream.Aff": [
      "readSome",
      "readAll",
      "readN",
      "write",
      "end",
      "toStringUTF8",
      "fromStringUTF8"
    ],
    "Node.Stream.Aff.Internal": [
      "onceDrain",
      "onceEnd",
      "onceClose",
      "onceError",
      "onceReadable",
      "readable",
      "writable",
      "push",
      "newReadable",
      "newReadableStringUTF8",
      "newStreamPassThrough"
    ]
  },
  "node-url": {
    "Node.URL": []
  },
  "nodemailer": {
    "NodeMailer.Attachment": [],
    "NodeMailer.AttachmentStream": [],
    "NodeMailer": [
      "createTransporter",
      "createTestAccount",
      "getTestMessageUrl",
      "sendMail",
      "sendMail_"
    ]
  },
  "nonempty": {
    "Data.NonEmpty": [
      "singleton",
      "foldl1",
      "fromNonEmpty",
      "oneOf",
      "head",
      "tail"
    ]
  },
  "now": {
    "Effect.Now": [
      "now",
      "nowDateTime",
      "nowDate",
      "nowTime",
      "getTimezoneOffset"
    ]
  },
  "npm-package-json": {
    "Npm.PackageJson": [
      "map",
      "fromNameAndVersion"
    ]
  },
  "nullable": {
    "Data.Nullable": [
      "null",
      "notNull",
      "toMaybe",
      "toNullable"
    ]
  },
  "numbers": {
    "Data.Number.Approximate": [
      "eqRelative",
      "eqApproximate",
      "neqApproximate",
      "eqAbsolute"
    ],
    "Data.Number.Format": [
      "precision",
      "fixed",
      "exponential",
      "toStringWith",
      "toString"
    ],
    "Data.Number": [
      "fromString",
      "nan",
      "isNaN",
      "infinity",
      "isFinite",
      "abs",
      "acos",
      "asin",
      "atan",
      "atan2",
      "ceil",
      "cos",
      "exp",
      "floor",
      "log",
      "max",
      "min",
      "pow",
      "remainder",
      "round",
      "sign",
      "sin",
      "sqrt",
      "tan",
      "trunc",
      "e",
      "ln2",
      "ln10",
      "log10e",
      "log2e",
      "pi",
      "sqrt1_2",
      "sqrt2",
      "tau"
    ]
  },
  "object-maps": {
    "Data.ObjectMap": [
      "delete",
      "empty",
      "fromArray",
      "insert",
      "lookup",
      "toArray"
    ]
  },
  "ocarina": {
    "FRP.Event.Animate": [],
    "FRP.Event.MIDI": [
      "midi",
      "midiAccess",
      "midiInputDevices",
      "midiOutputDevices"
    ],
    "Ocarina.Clock": [],
    "Ocarina.Common": [],
    "Ocarina.Control": [],
    "Ocarina.Core": [
      "_linear",
      "_exponential",
      "_step",
      "_numeric'",
      "_numeric",
      "_unit'",
      "_unit",
      "_envelope'",
      "_envelope",
      "_sudden'",
      "_sudden",
      "_cancel'",
      "_cancel",
      "_on",
      "_off",
      "bangOn",
      "apOn",
      "apOff",
      "c1",
      "dt",
      "sound",
      "silence",
      "_wave",
      "_realImg",
      "_none",
      "_twoX",
      "_fourX",
      "toAudioOnOff",
      "toAudioParameter",
      "opticN"
    ],
    "Ocarina.Interpret": [],
    "Ocarina.Math": [],
    "Ocarina.Properties": [],
    "Ocarina.Run": [],
    "Ocarina.WebAPI": [],
    "Row.Extra": []
  },
  "open-folds": {
    "Control.Fold": [
      "stepFold",
      "unfoldFold",
      "unfoldFold_",
      "foldl",
      "scanl",
      "mconcat",
      "head",
      "last",
      "null",
      "length",
      "and",
      "or",
      "any",
      "all",
      "sum",
      "product",
      "maximum",
      "minimum",
      "elem",
      "notElem",
      "distributed",
      "groupBy",
      "prefilter"
    ]
  },
  "open-memoize": {
    "Data.Function.Memoize": [
      "tabulate",
      "memoize",
      "memoize2",
      "memoize3",
      "genericTabulate"
    ]
  },
  "open-pairing": {
    "Data.Functor.Pairing.Co": [
      "co",
      "runCo",
      "pairCo",
      "liftCo",
      "lowerCo"
    ],
    "Data.Functor.Pairing": [
      "zap",
      "sym",
      "identity",
      "productCoproduct",
      "stateStore",
      "readerEnv",
      "writerTraced",
      "freeCofree"
    ]
  },
  "options": {
    "Data.Options": [
      "options",
      "assoc",
      "optional",
      "opt",
      "tag",
      "defaultToOptions"
    ]
  },
  "optparse": {
    "Options.Applicative.BashCompletion": [
      "bashCompletionParser"
    ],
    "Options.Applicative.Builder.Completer": [
      "listIOCompleter",
      "listCompleter",
      "bashCompleter"
    ],
    "Options.Applicative.Builder.Internal": [
      "name",
      "modCompleter",
      "hasValueDummy",
      "hasMetavarDummy",
      "optionMod",
      "fieldMod",
      "baseProps",
      "mkCommand",
      "mkParser",
      "mkOption",
      "mkProps",
      "internal"
    ],
    "Options.Applicative.Builder": [
      "subparser",
      "strArgument",
      "argument",
      "flag",
      "flag'",
      "switch",
      "abortOption",
      "infoOption",
      "strOption",
      "option",
      "short",
      "long",
      "help",
      "helpDoc",
      "value",
      "showDefaultWith",
      "showDefault",
      "metavar",
      "noArgError",
      "hidden",
      "style",
      "command",
      "commandGroup",
      "completeWith",
      "action",
      "completer",
      "idm",
      "str",
      "int",
      "number",
      "boolean",
      "maybeReader",
      "eitherReader",
      "disabled",
      "fullDesc",
      "briefDesc",
      "header",
      "headerDoc",
      "footer",
      "footerDoc",
      "progDesc",
      "progDescDoc",
      "failureCode",
      "noIntersperse",
      "forwardOptions",
      "info",
      "multiSuffix",
      "disambiguate",
      "showHelpOnError",
      "showHelpOnEmpty",
      "noBacktrack",
      "subparserInline",
      "columns",
      "prefs",
      "defaultPrefs"
    ],
    "Options.Applicative.Common": [
      "liftOpt",
      "showOption",
      "runParserInfo",
      "runParserFully",
      "runParser",
      "evalParser",
      "mapParser",
      "treeMapParser",
      "optionNames"
    ],
    "Options.Applicative.Extra": [
      "helper",
      "hsubparser",
      "execParser",
      "customExecParser",
      "execParserPure",
      "getParseResult",
      "handleParseResult",
      "parserFailure",
      "renderFailure"
    ],
    "Options.Applicative.Help.Chunk": [
      "chunked",
      "listToChunk",
      "chunkBeside",
      "chunkBesideOrBelow",
      "vcatChunks",
      "vsepChunks",
      "isEmpty",
      "stringChunk",
      "paragraph",
      "extractChunk",
      "tabulate"
    ],
    "Options.Applicative.Help.Core": [
      "cmdDesc",
      "briefDesc",
      "missingDesc",
      "fold_tree",
      "fullDesc",
      "errorHelp",
      "headerHelp",
      "suggestionsHelp",
      "usageHelp",
      "bodyHelp",
      "footerHelp",
      "parserHelp",
      "parserUsage"
    ],
    "Options.Applicative.Help.Levenshtein": [],
    "Options.Applicative.Help.Pretty": [],
    "Options.Applicative.Help.Types": [
      "renderHelp"
    ],
    "Options.Applicative.Help": [],
    "Options.Applicative.Internal.Utils": [
      "unLines",
      "unWords",
      "lines",
      "words",
      "whitespaceRegex",
      "startsWith",
      "apApplyFlipped"
    ],
    "Options.Applicative.Internal": [
      "enterContext",
      "exitContext",
      "getPrefs",
      "missingArgP",
      "errorP",
      "exitP",
      "hoistMaybe",
      "hoistEither",
      "runReadM",
      "withReadM",
      "runP",
      "runCompletion",
      "contextNames",
      "takeListT",
      "runListT",
      "cut",
      "nondetTAltOp",
      "disamb"
    ],
    "Options.Applicative.Types": [
      "readerAsk",
      "readerAbort",
      "readerError",
      "mkCompleter",
      "overFailure",
      "optVisibility",
      "optMetaVar",
      "optHelp",
      "optShowDefault",
      "optDescMod",
      "many",
      "some",
      "optional"
    ],
    "Options.Applicative": [],
    "Text.PrettyPrint.Leijen": []
  },
  "ordered-collections": {
    "Data.Map.Gen": [],
    "Data.Map.Internal": [
      "showTree",
      "empty",
      "isEmpty",
      "singleton",
      "checkValid",
      "insert",
      "insertWith",
      "lookup",
      "lookupLE",
      "lookupLT",
      "lookupGE",
      "lookupGT",
      "findMin",
      "findMax",
      "foldSubmap",
      "submap",
      "fromFoldable",
      "fromFoldableWith",
      "fromFoldableWithIndex",
      "toUnfoldable",
      "toUnfoldableUnordered",
      "delete",
      "pop",
      "member",
      "alter",
      "update",
      "keys",
      "values",
      "union",
      "unionWith",
      "unions",
      "intersection",
      "intersectionWith",
      "difference",
      "isSubmap",
      "size",
      "filterWithKey",
      "filterKeys",
      "filter",
      "mapMaybeWithKey",
      "mapMaybe",
      "catMaybes"
    ],
    "Data.Map": [
      "keys"
    ],
    "Data.Set.NonEmpty": [
      "singleton",
      "cons",
      "fromSet",
      "fromFoldable",
      "fromFoldable1",
      "toSet",
      "toUnfoldable",
      "toUnfoldable1",
      "map",
      "member",
      "insert",
      "delete",
      "size",
      "min",
      "max",
      "unionSet",
      "difference",
      "subset",
      "properSubset",
      "intersection",
      "filter",
      "mapMaybe"
    ],
    "Data.Set": [
      "fromFoldable",
      "toUnfoldable",
      "empty",
      "isEmpty",
      "singleton",
      "map",
      "checkValid",
      "insert",
      "member",
      "delete",
      "toggle",
      "size",
      "findMin",
      "findMax",
      "union",
      "unions",
      "difference",
      "subset",
      "properSubset",
      "intersection",
      "filter",
      "mapMaybe",
      "catMaybes",
      "toMap",
      "fromMap"
    ]
  },
  "ordered-set": {
    "Data.Set.Ordered": [
      "fromFoldable",
      "toUnfoldable",
      "empty",
      "isEmpty",
      "singleton",
      "subset",
      "properSubset",
      "map",
      "range",
      "null",
      "length",
      "cons",
      "snoc",
      "insert",
      "insertBy",
      "head",
      "last",
      "tail",
      "init",
      "uncons",
      "unsnoc",
      "index",
      "elemIndex",
      "elemLastIndex",
      "findIndex",
      "findLastIndex",
      "insertAt",
      "deleteAt",
      "updateAt",
      "updateAtIndices",
      "modifyAt",
      "alterAt",
      "reverse",
      "concat",
      "filter",
      "partition",
      "filterA",
      "mapMaybe",
      "catMaybes",
      "mapWithIndex",
      "sort",
      "sortBy",
      "sortWith",
      "slice",
      "take",
      "takeWhile",
      "drop",
      "dropWhile",
      "span",
      "union",
      "unionBy",
      "delete",
      "deleteWith",
      "difference",
      "intersect",
      "intersectBy",
      "zipWith",
      "zipWithA",
      "zip",
      "unzip",
      "foldM",
      "foldRecM",
      "unsafeIndex"
    ]
  },
  "orders": {
    "Data.Ord.Down": [],
    "Data.Ord.Max": [],
    "Data.Ord.Min": []
  },
  "pairs": {
    "Data.Pair": [
      "fst",
      "snd",
      "curry",
      "uncurry",
      "swap"
    ]
  },
  "parallel": {
    "Control.Parallel.Class": [],
    "Control.Parallel": [
      "parApply",
      "parTraverse",
      "parTraverse_",
      "parSequence",
      "parSequence_",
      "parOneOf",
      "parOneOfMap"
    ]
  },
  "parsing": {
    "Parsing.Combinators.Array": [
      "many",
      "many1",
      "manyTill_",
      "manyIndex"
    ],
    "Parsing.Combinators": [
      "try",
      "tryRethrow",
      "lookAhead",
      "choice",
      "between",
      "notFollowedBy",
      "option",
      "optionMaybe",
      "optional",
      "many",
      "many1",
      "manyTill",
      "manyTill_",
      "many1Till",
      "many1Till_",
      "manyIndex",
      "skipMany",
      "skipMany1",
      "sepBy",
      "sepBy1",
      "sepEndBy",
      "sepEndBy1",
      "endBy",
      "endBy1",
      "chainl",
      "chainl1",
      "chainr",
      "chainr1",
      "advance",
      "withErrorMessage",
      "withLazyErrorMessage",
      "asErrorMessage"
    ],
    "Parsing.Expr": [
      "buildExprParser"
    ],
    "Parsing.Indent": [
      "runIndent",
      "withBlock",
      "withBlock'",
      "block",
      "block1",
      "indented",
      "indented'",
      "sameLine",
      "sameOrIndented",
      "checkIndent",
      "withPos",
      "indentAp",
      "indentNoAp",
      "indentMany",
      "indentOp",
      "indentBrackets",
      "indentAngles",
      "indentBraces",
      "indentParens"
    ],
    "Parsing.Language": [
      "haskellDef",
      "haskell",
      "emptyDef",
      "haskellStyle",
      "javaStyle"
    ],
    "Parsing.String.Basic": [
      "digit",
      "hexDigit",
      "octDigit",
      "letter",
      "space",
      "lower",
      "upper",
      "alphaNum",
      "intDecimal",
      "number",
      "takeWhile",
      "takeWhile1",
      "whiteSpace",
      "skipSpaces",
      "oneOf",
      "oneOfCodePoints",
      "noneOf",
      "noneOfCodePoints"
    ],
    "Parsing.String.Replace": [
      "breakCap",
      "breakCapT",
      "splitCap",
      "splitCapT",
      "replace",
      "replaceT"
    ],
    "Parsing.String": [
      "char",
      "string",
      "anyChar",
      "anyCodePoint",
      "satisfy",
      "satisfyCodePoint",
      "takeN",
      "rest",
      "eof",
      "match",
      "regex",
      "anyTill",
      "consumeWith",
      "parseErrorHuman"
    ],
    "Parsing.Token": [
      "token",
      "when",
      "match",
      "eof",
      "unGenLanguageDef",
      "makeTokenParser"
    ],
    "Parsing": [
      "runParser",
      "runParserT",
      "runParserT'",
      "parseErrorMessage",
      "parseErrorPosition",
      "initialPos",
      "consume",
      "position",
      "fail",
      "failWithPosition",
      "region",
      "liftMaybe",
      "liftEither",
      "liftExceptT",
      "stateParserT",
      "getParserT",
      "hoistParserT",
      "mapParserT"
    ]
  },
  "parsing-dataview": {
    "Parsing.DataView.Basic": [
      "anyCodePointUTF8"
    ],
    "Parsing.DataView": [
      "takeN",
      "takeRest",
      "eof",
      "match",
      "anyTill",
      "anyPrim",
      "anyInt8",
      "anyInt16be",
      "anyInt16le",
      "anyInt32be",
      "anyInt32le",
      "anyUint8",
      "anyUint16be",
      "anyUint16le",
      "anyUint32be",
      "anyUint32le",
      "anyFloat32be",
      "anyFloat32le",
      "anyFloat64be",
      "anyFloat64le",
      "satisfy",
      "satisfyInt8",
      "satisfyInt16be",
      "satisfyInt16le",
      "satisfyInt32be",
      "satisfyInt32le",
      "satisfyUint8",
      "satisfyUint16be",
      "satisfyUint16le",
      "satisfyUint32be",
      "satisfyUint32le",
      "satisfyFloat32be",
      "satisfyFloat32le",
      "satisfyFloat64be",
      "satisfyFloat64le"
    ]
  },
  "partial": {
    "Partial.Unsafe": [
      "unsafePartial",
      "unsafeCrashWith"
    ],
    "Partial": [
      "crash",
      "crashWith"
    ]
  },
  "pathy": {
    "Pathy.Gen": [
      "genAbsDirPath",
      "genAbsFilePath",
      "genAbsAnyPath",
      "genRelDirPath",
      "genRelFilePath",
      "genRelAnyPath",
      "genName",
      "genDirName",
      "genFileName"
    ],
    "Pathy.Name": [],
    "Pathy.Parser": [
      "posixParser",
      "parsePath",
      "parseRelFile",
      "parseAbsFile",
      "parseRelDir",
      "parseAbsDir"
    ],
    "Pathy.Path": [
      "rootDir",
      "currentDir",
      "dir",
      "dir'",
      "file",
      "file'",
      "in'",
      "parentOf",
      "extendPath",
      "appendPath",
      "parentAppend",
      "foldPath",
      "peel",
      "peelFile",
      "name",
      "fileName",
      "rename",
      "renameTraverse",
      "setExtension",
      "relativeTo",
      "refine"
    ],
    "Pathy.Phantom": [],
    "Pathy.Printer": [
      "posixPrinter",
      "windowsPrinter",
      "printPath",
      "unsafePrintPath",
      "debugPrintPath",
      "slashEscaper",
      "dotEscaper",
      "posixEscaper",
      "windowsEscaper",
      "escape"
    ],
    "Pathy.Sandboxed": [
      "sandbox",
      "sandboxAny",
      "sandboxRoot",
      "unsandbox"
    ],
    "Pathy": []
  },
  "pha": {
    "Pha.App.Internal": [],
    "Pha.App": [
      "app",
      "sandbox"
    ],
    "Pha.Html.Attributes": [],
    "Pha.Html.Core": [
      "attr",
      "class'",
      "class_",
      "elem",
      "empty",
      "fromMaybe",
      "keyed",
      "lazy",
      "lazy2",
      "lazy3",
      "maybe",
      "on_",
      "style",
      "text",
      "unsafeOnWithEffect",
      "when"
    ],
    "Pha.Html.Elements": [],
    "Pha.Html.Events": [],
    "Pha.Html.Keyed": [],
    "Pha.Html.Util": [],
    "Pha.Html": [],
    "Pha.Subscriptions": [
      "makeSubscription",
      "on",
      "onKeyDown",
      "onHashChange"
    ],
    "Pha.Update.Lens": [],
    "Pha.Update": [
      "delay"
    ]
  },
  "phaser": {
    "Graphics.Phaser.ArcadePhysics": [],
    "Graphics.Phaser.Camera": [
      "setMainCameraBounds",
      "getMainCamera",
      "createSmoothedKeyControl",
      "updateCameraControlDelta"
    ],
    "Graphics.Phaser.Container": [],
    "Graphics.Phaser.CoreTypes": [],
    "Graphics.Phaser.Events": [],
    "Utils.FFI": [],
    "Graphics.Phaser.ForeignTypes": [],
    "Graphics.Phaser.GameConfig": [
      "_gameConfig",
      "_physicsConfig"
    ],
    "Graphics.Phaser.GameObject": [],
    "Graphics.Phaser.Graphics": [],
    "Graphics.Phaser.Image": [
      "create"
    ],
    "Graphics.Phaser.Input": [],
    "Phaser.Graphics.Input.KeyCodes": [],
    "Graphics.Phaser.Loader": [
      "setBaseUrl",
      "setPath",
      "loadImage",
      "loadAtlas",
      "loadSpritesheet",
      "loadPlugin",
      "loadScene",
      "loadTilemapTiledJSON"
    ],
    "Graphics.Phaser": [
      "create",
      "createWithConfig",
      "createWithUnsafeConfig",
      "setDimentions",
      "config",
      "physicsConfig"
    ],
    "Graphics.Phaser.Input.Pointer": [],
    "Graphics.Phaser.Scene": [],
    "Graphics.Phaser.SceneManager": [
      "add",
      "bringToTop",
      "getSceneManager",
      "getByKey",
      "sendToBack"
    ],
    "Graphics.Phaser.Sprite": [],
    "Graphics.Phaser.Text": [],
    "Graphics.Phaser.TileMap": [],
    "Graphics.Phaser.Time": [],
    "Graphics.Phaser.Tween": [
      "addTween"
    ],
    "Internal.Utils": []
  },
  "pipes": {
    "Pipes.Core": [
      "runEffect",
      "runEffectRec",
      "respond",
      "composeResponse'",
      "composeResponse",
      "request",
      "composeRequest'",
      "composeRequest",
      "push",
      "composePush",
      "composePush'",
      "pull",
      "composePull",
      "composePull'",
      "reflect",
      "flippedComposeResponse'",
      "flippedComposeRequest'",
      "flippedComposePush",
      "flippedComposePush'",
      "flippedComposePull",
      "flippedComposePull'",
      "flippedComposeResponse",
      "flippedComposeRequest"
    ],
    "Pipes.Internal": [],
    "Pipes.ListT": [],
    "Pipes.Prelude": [],
    "Pipes": []
  },
  "pirates-charm": {
    "FRP.Event.Aff": [],
    "FRP.Event.Effect": []
  },
  "point-free": {
    "PointFree": []
  },
  "pointed-list": {
    "Data.List.Pointed": []
  },
  "polymorphic-vectors": {
    "Data.Vector.Polymorphic.Class": [
      "toPos",
      "fromPos",
      "asPosEndo",
      "asPos",
      "toSize",
      "fromSize",
      "asSizeEndo",
      "asSize",
      "toRegion",
      "fromRegion",
      "asRegionEndo",
      "asRegion"
    ],
    "Data.Vector.Polymorphic.Types": [],
    "Data.Vector.Polymorphic": [
      "length",
      "diagonal",
      "inside",
      "outside",
      "putInsideMod",
      "area",
      "perimeter",
      "ratio",
      "midPos",
      "dot",
      "perpendicular",
      "parallel",
      "convertPos",
      "convertSize",
      "convertRegion"
    ]
  },
  "posix-types": {
    "Data.Posix.Signal": [],
    "Data.Posix": []
  },
  "precise": {
    "Data.Digit": [
      "fromInt",
      "toInt",
      "fromChar",
      "toChar",
      "_zero",
      "_one",
      "_two",
      "_three",
      "_four",
      "_five",
      "_six",
      "_seven",
      "_eight",
      "_nine"
    ],
    "Data.HugeInt.Gen": [],
    "Data.HugeInt": [
      "fromInt",
      "fromString",
      "toInt",
      "toHugeNum",
      "fromHugeNum",
      "abs",
      "neg",
      "round",
      "ceil",
      "floor",
      "isPositive",
      "isZero",
      "isNegative",
      "numOfDigits",
      "even",
      "odd"
    ],
    "Data.HugeNum.Gen": [],
    "Data.HugeNum": [
      "fromString",
      "fromNumber",
      "toNumber",
      "toString",
      "integerPart",
      "fractionalPart",
      "numOfIntegral",
      "numOfFractional",
      "abs",
      "neg",
      "isNegative",
      "isPositive",
      "isZero",
      "floor",
      "ceil",
      "round",
      "googol",
      "subHugeNum",
      "pow",
      "truncate"
    ]
  },
  "precise-datetime": {
    "Data.PreciseDate.Component": [],
    "Data.PreciseDateTime.Internal": [],
    "Data.PreciseDateTime": [
      "adjust",
      "diff",
      "fromRFC3339String",
      "toRFC3339String",
      "toDateTimeLossy",
      "fromDateTime"
    ],
    "Data.RFC3339String.Format": [],
    "Data.RFC3339String": [],
    "Data.Time.PreciseDuration.Format": [],
    "Data.Time.PreciseDuration": [
      "toString",
      "negatePreciseDuration",
      "nanoseconds",
      "microseconds",
      "milliseconds",
      "seconds",
      "minutes",
      "hours",
      "days",
      "weeks",
      "unsafeNanoseconds",
      "unPreciseDuration",
      "toNanoseconds",
      "toMicroseconds",
      "toMilliseconds",
      "toSeconds",
      "toMinutes",
      "toHours",
      "toDays",
      "toWeeks",
      "toDecimalLossy",
      "nano",
      "micro",
      "milli",
      "second",
      "minute",
      "hour",
      "day",
      "week"
    ]
  },
  "prelude": {
    "Control.Applicative": [
      "pure",
      "liftA1",
      "unless",
      "when"
    ],
    "Control.Apply": [
      "apply",
      "applyFirst",
      "applySecond",
      "lift2",
      "lift3",
      "lift4",
      "lift5"
    ],
    "Control.Bind": [
      "bind",
      "bindFlipped",
      "discard",
      "join",
      "composeKleisli",
      "composeKleisliFlipped",
      "ifM"
    ],
    "Control.Category": [
      "identity"
    ],
    "Control.Monad": [
      "liftM1",
      "whenM",
      "unlessM",
      "ap"
    ],
    "Control.Semigroupoid": [],
    "Data.Boolean": [],
    "Data.BooleanAlgebra": [],
    "Data.Bounded.Generic": [
      "genericBottom'",
      "genericBottom",
      "genericTop'",
      "genericTop"
    ],
    "Data.Bounded": [
      "bottom",
      "top",
      "bottomRecord",
      "topRecord"
    ],
    "Data.CommutativeRing": [],
    "Data.DivisionRing": [
      "recip",
      "leftDiv",
      "rightDiv"
    ],
    "Data.Eq.Generic": [
      "genericEq'",
      "genericEq"
    ],
    "Data.Eq": [
      "eq",
      "notEq",
      "eq1",
      "notEq1",
      "eqRecord"
    ],
    "Data.EuclideanRing": [
      "degree",
      "div",
      "mod",
      "gcd",
      "lcm"
    ],
    "Data.Field": [],
    "Data.Function": [
      "flip",
      "const",
      "apply",
      "applyFlipped",
      "applyN",
      "on"
    ],
    "Data.Functor": [
      "map",
      "mapFlipped",
      "void",
      "voidRight",
      "voidLeft",
      "flap"
    ],
    "Data.Generic.Rep": [
      "to",
      "from",
      "repOf"
    ],
    "Data.HeytingAlgebra.Generic": [],
    "Data.HeytingAlgebra": [
      "tt",
      "ff",
      "implies",
      "conj",
      "disj",
      "not",
      "ffRecord",
      "ttRecord",
      "impliesRecord",
      "conjRecord",
      "disjRecord",
      "notRecord"
    ],
    "Data.Monoid.Additive": [],
    "Data.Monoid.Conj": [],
    "Data.Monoid.Disj": [],
    "Data.Monoid.Dual": [],
    "Data.Monoid.Endo": [],
    "Data.Monoid.Generic": [
      "genericMempty'",
      "genericMempty"
    ],
    "Data.Monoid.Multiplicative": [],
    "Data.Monoid": [
      "mempty",
      "power",
      "guard",
      "memptyRecord"
    ],
    "Data.NaturalTransformation": [],
    "Data.Ord.Generic": [
      "genericCompare'",
      "genericCompare"
    ],
    "Data.Ord": [
      "compare",
      "compare1",
      "lessThan",
      "lessThanOrEq",
      "greaterThan",
      "greaterThanOrEq",
      "comparing",
      "min",
      "max",
      "clamp",
      "between",
      "abs",
      "signum",
      "compareRecord"
    ],
    "Data.Ordering": [
      "invert"
    ],
    "Data.Reflectable": [
      "reflectType",
      "reifyType"
    ],
    "Data.Ring.Generic": [],
    "Data.Ring": [
      "sub",
      "negate",
      "subRecord"
    ],
    "Data.Semigroup.First": [],
    "Data.Semigroup.Generic": [
      "genericAppend'",
      "genericAppend"
    ],
    "Data.Semigroup.Last": [],
    "Data.Semigroup": [
      "append",
      "appendRecord"
    ],
    "Data.Semiring.Generic": [],
    "Data.Semiring": [
      "add",
      "zero",
      "mul",
      "one",
      "addRecord",
      "mulRecord",
      "oneRecord",
      "zeroRecord"
    ],
    "Data.Show.Generic": [
      "genericShow'",
      "genericShow",
      "genericShowArgs"
    ],
    "Data.Show": [
      "show",
      "showRecordFields"
    ],
    "Data.Symbol": [
      "reflectSymbol",
      "reifySymbol"
    ],
    "Data.Unit": [],
    "Data.Void": [
      "absurd"
    ],
    "Prelude": [],
    "Record.Unsafe": [],
    "Type.Proxy": []
  },
  "prettier-printer": {
    "Prettier.Printer": [
      "below",
      "beside",
      "besideOrBelow",
      "bracket'",
      "bracket",
      "fill",
      "fillwords",
      "folddoc",
      "group",
      "layout",
      "line",
      "nest",
      "nil",
      "pretty",
      "spread",
      "stack",
      "text",
      "words"
    ]
  },
  "profunctor": {
    "Data.Profunctor.Choice": [],
    "Data.Profunctor.Closed": [],
    "Data.Profunctor.Cochoice": [],
    "Data.Profunctor.Costrong": [],
    "Data.Profunctor.Join": [],
    "Data.Profunctor.Split": [
      "split",
      "unSplit",
      "liftSplit",
      "lowerSplit",
      "hoistSplit"
    ],
    "Data.Profunctor.Star": [],
    "Data.Profunctor.Strong": [],
    "Data.Profunctor": []
  },
  "profunctor-lenses": {
    "Data.Lens.AffineTraversal": [
      "affineTraversal",
      "affineTraversal'",
      "withAffineTraversal",
      "cloneAffineTraversal"
    ],
    "Data.Lens.At": [
      "at",
      "sans"
    ],
    "Data.Lens.Common": [
      "simple"
    ],
    "Data.Lens.Fold.Partial": [
      "unsafeView",
      "unsafeIndexedFold"
    ],
    "Data.Lens.Fold": [
      "previewOn",
      "toListOfOn",
      "preview",
      "foldOf",
      "foldMapOf",
      "foldrOf",
      "foldlOf",
      "toListOf",
      "firstOf",
      "lastOf",
      "maximumOf",
      "minimumOf",
      "allOf",
      "anyOf",
      "andOf",
      "orOf",
      "elemOf",
      "notElemOf",
      "sumOf",
      "productOf",
      "lengthOf",
      "findOf",
      "sequenceOf_",
      "traverseOf_",
      "has",
      "hasn't",
      "replicated",
      "filtered",
      "folded",
      "unfolded",
      "toArrayOf",
      "toArrayOfOn",
      "ifoldMapOf",
      "ifoldrOf",
      "ifoldlOf",
      "iallOf",
      "ianyOf",
      "ifindOf",
      "itoListOf",
      "itraverseOf_",
      "iforOf_"
    ],
    "Data.Lens.Getter": [
      "viewOn",
      "view",
      "to",
      "takeBoth",
      "use",
      "iview",
      "iuse",
      "cloneGetter"
    ],
    "Data.Lens.Grate": [
      "grate",
      "withGrate",
      "cloneGrate",
      "cotraversed",
      "zipWithOf",
      "zipFWithOf",
      "collectOf"
    ],
    "Data.Lens.Index": [
      "ix"
    ],
    "Data.Lens.Indexed": [],
    "Data.Lens.Internal.Bazaar": [],
    "Data.Lens.Internal.Exchange": [],
    "Data.Lens.Internal.Focusing": [],
    "Data.Lens.Internal.Forget": [],
    "Data.Lens.Internal.Grating": [],
    "Data.Lens.Internal.Indexed": [],
    "Data.Lens.Internal.Market": [],
    "Data.Lens.Internal.Re": [],
    "Data.Lens.Internal.Shop": [],
    "Data.Lens.Internal.Stall": [],
    "Data.Lens.Internal.Tagged": [],
    "Data.Lens.Internal.Wander": [],
    "Data.Lens.Internal.Zipping": [],
    "Data.Lens.Iso.Newtype": [],
    "Data.Lens.Iso": [
      "iso",
      "withIso",
      "cloneIso",
      "re",
      "au",
      "auf",
      "under",
      "non",
      "curried",
      "uncurried",
      "flipped",
      "mapping",
      "dimapping",
      "coerced"
    ],
    "Data.Lens.Lens.Product": [],
    "Data.Lens.Lens.Tuple": [
      "_1",
      "_2"
    ],
    "Data.Lens.Lens.Unit": [],
    "Data.Lens.Lens.Void": [],
    "Data.Lens.Lens": [
      "lens",
      "lens'",
      "withLens",
      "cloneLens",
      "ilens",
      "ilens'",
      "withIndexedLens",
      "cloneIndexedLens",
      "lensStore"
    ],
    "Data.Lens.Prism.Coproduct": [],
    "Data.Lens.Prism.Either": [
      "_Left",
      "_Right"
    ],
    "Data.Lens.Prism.Maybe": [],
    "Data.Lens.Prism": [
      "prism'",
      "prism",
      "only",
      "nearly",
      "review",
      "is",
      "isn't",
      "matching",
      "clonePrism",
      "withPrism",
      "below"
    ],
    "Data.Lens.Record": [
      "prop"
    ],
    "Data.Lens.Setter": [
      "over",
      "iover",
      "set",
      "addOver",
      "subOver",
      "mulOver",
      "divOver",
      "disjOver",
      "conjOver",
      "appendOver",
      "setJust",
      "assign",
      "modifying",
      "addModifying",
      "mulModifying",
      "subModifying",
      "divModifying",
      "disjModifying",
      "conjModifying",
      "appendModifying",
      "assignJust"
    ],
    "Data.Lens.Traversal": [
      "traversed",
      "element",
      "traverseOf",
      "sequenceOf",
      "failover",
      "elementsOf",
      "itraverseOf",
      "iforOf",
      "cloneTraversal",
      "both"
    ],
    "Data.Lens.Types": [],
    "Data.Lens.Zoom": [
      "zoom"
    ],
    "Data.Lens": []
  },
  "protobuf": {
    "Protobuf.Internal.Common": [
      "default",
      "fromDefault",
      "isDefault",
      "label",
      "toDefault"
    ],
    "Protobuf.Internal.Decode": [
      "decodeDouble",
      "decodeDoubleArray",
      "decodeFloat",
      "decodeFloatArray",
      "decodeInt32",
      "decodeInt64",
      "decodeUint32",
      "decodeUint64",
      "decodeSint32",
      "decodeSint64",
      "decodeFixed32",
      "decodeFixed32Array",
      "decodeFixed64",
      "decodeFixed64Array",
      "decodeSfixed32",
      "decodeSfixed32Array",
      "decodeSfixed64",
      "decodeSfixed64Array",
      "decodeBool",
      "decodeString",
      "decodeBytes",
      "decodeZigzag32",
      "decodeVarint32",
      "decodeTag32",
      "decodeZigzag64",
      "decodeVarint64"
    ],
    "Protobuf.Internal.Encode": [
      "encodeDoubleField",
      "encodeDouble",
      "encodeFloatField",
      "encodeFloat",
      "encodeInt32Field",
      "encodeInt32",
      "encodeInt64Field",
      "encodeInt64",
      "encodeUint32Field",
      "encodeUint32",
      "encodeUint64Field",
      "encodeUint64",
      "encodeSint32Field",
      "encodeSint32",
      "encodeSint64Field",
      "encodeSint64",
      "encodeFixed32Field",
      "encodeFixed32",
      "encodeFixed64Field",
      "encodeFixed64",
      "encodeSfixed32Field",
      "encodeSfixed32",
      "encodeSfixed64Field",
      "encodeSfixed64",
      "encodeBoolField",
      "encodeBool",
      "encodeStringField",
      "encodeBytesField",
      "encodeBuilder",
      "encodeVarint32",
      "encodeZigzag32",
      "encodeTag32",
      "encodeVarint64",
      "encodeZigzag64"
    ],
    "Protobuf.Internal.Prelude": [],
    "Protobuf.Internal.Runtime": [
      "parseMessage",
      "parseFieldUnknown",
      "putFieldUnknown",
      "parseLenDel",
      "manyLength",
      "putLenDel",
      "putOptional",
      "putRepeated",
      "putPacked",
      "putEnumField",
      "putEnum",
      "parseEnum",
      "mergeWith"
    ],
    "Protobuf.Library": [
      "parseAnyMessage",
      "parseAnyField"
    ]
  },
  "ps-cst": {
    "Language.PS.CST.Printers.PrintImports": [],
    "Language.PS.CST.Printers.PrintModuleModuleNameAndExports": [],
    "Language.PS.CST.Printers.TypeLevel": [],
    "Language.PS.CST.Printers.Utils": [],
    "Language.PS.CST.Printers": [],
    "Language.PS.CST.ReservedNames": [],
    "Language.PS.CST.Sugar.Declaration": [],
    "Language.PS.CST.Sugar.Leafs": [],
    "Language.PS.CST.Sugar.QualifiedName": [],
    "Language.PS.CST.Types.Declaration": [],
    "Language.PS.CST.Types.Leafs": [],
    "Language.PS.CST.Types.Module": [],
    "Language.PS.CST.Types.QualifiedName": [],
    "Language.PS.CST": [],
    "Language.PS.SmartCST.ProcessModule": [],
    "Language.PS.SmartCST.ProcessSmartDeclaration.Utils": [],
    "Language.PS.SmartCST.ProcessSmartDeclaration": [],
    "Language.PS.SmartCST.Sugar.Declaration": [],
    "Language.PS.SmartCST.Types.Declaration": [],
    "Language.PS.SmartCST.Types.SmartQualifiedName": [],
    "Language.PS.SmartCST.Types.SmartQualifiedNameConstructor": [],
    "Language.PS.SmartCST": []
  },
  "psa-utils": {
    "Psa.Output": [
      "output",
      "annotatedError",
      "trimPosition",
      "trimMessage"
    ],
    "Psa.Printer.Default": [
      "renderWarning",
      "renderError",
      "renderStats",
      "renderVerboseStats",
      "print"
    ],
    "Psa.Printer.Json": [
      "print"
    ],
    "Psa.Printer": [
      "line",
      "indent",
      "para",
      "plain",
      "style",
      "ansiLength",
      "render",
      "renderRow",
      "renderAnsi",
      "renderSource"
    ],
    "Psa.Types": [
      "parsePsaResult",
      "parsePsaError",
      "encodePsaResult",
      "encodePsaError",
      "compareByLocation"
    ],
    "Psa.Util": [],
    "Psa": []
  },
  "psc-ide": {
    "Node.Which": [
      "which",
      "which'"
    ],
    "PscIde.Command": [],
    "PscIde.Project": [],
    "PscIde.Server": [],
    "PscIde": []
  },
  "psci-support": {
    "PSCI.Support": []
  },
  "qualified-do": {
    "QualifiedDo.Alt": [],
    "QualifiedDo.FoldMap": [
      "foldMap"
    ],
    "QualifiedDo.Kleisli": [],
    "QualifiedDo.OneOfMap": [
      "oneOfMap"
    ],
    "QualifiedDo.ParAlt": [
      "bind",
      "discard"
    ],
    "QualifiedDo.ParApply": [],
    "QualifiedDo.ParOneOfMap": [
      "parOneOfMap"
    ],
    "QualifiedDo.Semigroup": [],
    "QualifiedDo.Semigroupoid": [],
    "QualifiedDo.Statements": [
      "convert",
      "unStatements",
      "bind",
      "discard"
    ],
    "QualifiedDo.Unfoldable": [
      "unfold"
    ]
  },
  "quantities": {
    "Data.Quantity.Math": [
      "acos",
      "asec",
      "asin",
      "acsc",
      "atan",
      "acot",
      "atan2",
      "cos",
      "sec",
      "exp",
      "ln",
      "sin",
      "csc",
      "tan",
      "cot",
      "sinh",
      "csch",
      "cosh",
      "sech",
      "tanh",
      "coth",
      "asinh",
      "acsch",
      "acosh",
      "asech",
      "atanh",
      "acoth",
      "ceil",
      "floor",
      "log10",
      "max2",
      "max",
      "min2",
      "min",
      "mean",
      "modulo",
      "round",
      "gamma",
      "factorial",
      "pi",
      "e",
      "tau",
      "phi"
    ],
    "Data.Quantity.Physics": [
      "speedOfLight",
      "gravitationalConstant",
      "planckConstant",
      "ℏ",
      "electronMass",
      "electronCharge",
      "µ0",
      "ε0",
      "µB",
      "α",
      "protonMass",
      "avogadroConstant",
      "kB",
      "g0",
      "idealGasConstant"
    ],
    "Data.Quantity": [
      "quantity",
      "quantity'",
      "prettyPrint'",
      "prettyPrint",
      "showResult",
      "derivedUnit",
      "toStandard",
      "fullSimplify",
      "approximatelyEqual",
      "errorMessage",
      "scalar",
      "scalar'",
      "convert",
      "convertTo",
      "asValueIn",
      "asValueIn'",
      "toScalar",
      "toScalar'",
      "isFinite",
      "qNegate",
      "qAdd",
      "qSubtract",
      "qMultiply",
      "qDivide",
      "pow",
      "abs",
      "sqrt"
    ],
    "Data.Units.Astronomical": [],
    "Data.Units.Bit": [],
    "Data.Units.CGS": [],
    "Data.Units.Currency": [],
    "Data.Units.Imperial": [],
    "Data.Units.Misc": [],
    "Data.Units.Nautical": [],
    "Data.Units.PartsPerX": [],
    "Data.Units.SI.Accepted": [],
    "Data.Units.SI.Derived": [],
    "Data.Units.SI": [
      "meter",
      "kilogram",
      "second",
      "gram",
      "ampere",
      "mole",
      "kelvin",
      "candela"
    ],
    "Data.Units.Time": [],
    "Data.Units.USCustomary": [],
    "Data.Units": [
      "decimalPrefix",
      "binaryPrefix",
      "removePrefix",
      "simplify",
      "splitByDimension",
      "baseRepresentation",
      "makeStandard",
      "makeNonStandard",
      "toStandardUnit",
      "prefixName",
      "toString",
      "power",
      "divideUnits",
      "unity",
      "atto",
      "femto",
      "pico",
      "nano",
      "micro",
      "centi",
      "deci",
      "hecto",
      "milli",
      "kilo",
      "mega",
      "giga",
      "tera",
      "peta",
      "exa",
      "kibi",
      "mebi",
      "gibi",
      "tebi",
      "pebi",
      "exbi",
      "zebi",
      "yobi"
    ],
    "Quantities": []
  },
  "quickcheck": {
    "Test.QuickCheck.Arbitrary": [
      "arbitrary",
      "coarbitrary",
      "genericArbitrary",
      "genericCoarbitrary",
      "arbitraryGenericSum",
      "arbitraryRecord"
    ],
    "Test.QuickCheck.Gen": [
      "unGen",
      "repeatable",
      "stateful",
      "variant",
      "suchThat",
      "sized",
      "resize",
      "choose",
      "chooseInt",
      "oneOf",
      "frequency",
      "arrayOf",
      "arrayOf1",
      "enum",
      "listOf",
      "vectorOf",
      "elements",
      "shuffle",
      "runGen",
      "evalGen",
      "perturbGen",
      "uniform",
      "sample",
      "randomSample",
      "randomSample'",
      "randomSampleOne"
    ],
    "Test.QuickCheck": [
      "quickCheck",
      "quickCheckGen",
      "quickCheck'",
      "quickCheckGen'",
      "quickCheckWithSeed",
      "quickCheckGenWithSeed",
      "quickCheckPure",
      "quickCheckPure'",
      "quickCheckGenPure",
      "quickCheckGenPure'",
      "checkResults",
      "printSummary",
      "test",
      "withHelp",
      "assertEquals",
      "assertNotEquals",
      "assertLessThan",
      "assertLessThanEq",
      "assertGreaterThan",
      "assertGreaterThanEq"
    ]
  },
  "quickcheck-combinators": {
    "Test.QuickCheck.Combinators": []
  },
  "quickcheck-laws": {
    "Test.QuickCheck.Laws.Control.Alt": [],
    "Test.QuickCheck.Laws.Control.Alternative": [],
    "Test.QuickCheck.Laws.Control.Applicative": [],
    "Test.QuickCheck.Laws.Control.Apply": [],
    "Test.QuickCheck.Laws.Control.Bind": [],
    "Test.QuickCheck.Laws.Control.Category": [],
    "Test.QuickCheck.Laws.Control.Comonad": [],
    "Test.QuickCheck.Laws.Control.Extend": [],
    "Test.QuickCheck.Laws.Control.Monad": [],
    "Test.QuickCheck.Laws.Control.MonadPlus": [],
    "Test.QuickCheck.Laws.Control.Plus": [],
    "Test.QuickCheck.Laws.Control.Semigroupoid": [],
    "Test.QuickCheck.Laws.Control": [],
    "Test.QuickCheck.Laws.Data.BooleanAlgebra": [],
    "Test.QuickCheck.Laws.Data.Bounded": [],
    "Test.QuickCheck.Laws.Data.BoundedEnum": [],
    "Test.QuickCheck.Laws.Data.CommutativeRing": [],
    "Test.QuickCheck.Laws.Data.DivisionRing": [],
    "Test.QuickCheck.Laws.Data.Enum": [],
    "Test.QuickCheck.Laws.Data.Eq": [],
    "Test.QuickCheck.Laws.Data.EuclideanRing": [],
    "Test.QuickCheck.Laws.Data.Field": [],
    "Test.QuickCheck.Laws.Data.Foldable": [],
    "Test.QuickCheck.Laws.Data.Functor": [],
    "Test.QuickCheck.Laws.Data.FunctorWithIndex": [],
    "Test.QuickCheck.Laws.Data.HeytingAlgebra": [],
    "Test.QuickCheck.Laws.Data.Monoid": [],
    "Test.QuickCheck.Laws.Data.Ord": [],
    "Test.QuickCheck.Laws.Data.Ring": [],
    "Test.QuickCheck.Laws.Data.Semigroup": [],
    "Test.QuickCheck.Laws.Data.Semiring": [],
    "Test.QuickCheck.Laws.Data": [],
    "Test.QuickCheck.Laws": []
  },
  "quickcheck-utf8": {
    "Test.QuickCheck.UTF8String": []
  },
  "random": {
    "Effect.Random": []
  },
  "rationals": {
    "Data.Ratio": [
      "reduce",
      "numerator",
      "denominator"
    ],
    "Data.Rational": [
      "toNumber",
      "fromInt"
    ]
  },
  "rdf": {
    "RDF.Prefixes": [],
    "RDF": [
      "namedNode",
      "namedNode'",
      "blankNode",
      "literalType",
      "literalLang",
      "variable",
      "defaultGraph",
      "quad",
      "triple",
      "termType",
      "value",
      "language",
      "datatype",
      "subject",
      "predicate",
      "object",
      "graph"
    ]
  },
  "react": {
    "React.DOM.Dynamic": [],
    "React.DOM.Props": [],
    "React.DOM.SVG.Dynamic": [],
    "React.DOM.SVG": [],
    "React.DOM": [],
    "React.Ref": [
      "fromRef",
      "fromEffect",
      "getCurrentRef",
      "createNodeRef",
      "createInstanceRef"
    ],
    "React.SyntheticEvent": [
      "bubbles",
      "cancelable",
      "currentTarget",
      "defaultPrevented",
      "eventPhase",
      "isTrusted",
      "nativeEvent",
      "preventDefault",
      "isDefaultPrevented",
      "stopPropagation",
      "isPropagationStopped",
      "target",
      "timeStamp",
      "type_",
      "persist",
      "animationName",
      "clipboardData",
      "data_",
      "relatedTarget",
      "charCode",
      "key",
      "keyCode",
      "locale",
      "location",
      "repeat",
      "which",
      "button",
      "buttons",
      "clientX",
      "clientY",
      "pageX",
      "pageY",
      "screenX",
      "screenY",
      "changedTouches",
      "targetTouches",
      "touches",
      "altKey",
      "ctrlKey",
      "getModifierState",
      "metaKey",
      "shiftKey",
      "propertyName",
      "pseudoElement",
      "elapsedTime",
      "detail",
      "view",
      "deltaMode",
      "deltaX",
      "deltaY",
      "deltaZ"
    ],
    "React": [
      "component",
      "componentWithDerivedState",
      "pureComponent",
      "pureComponentWithDerivedState",
      "statelessComponent",
      "getProps",
      "getState",
      "setState",
      "setStateWithCallback",
      "writeState",
      "writeStateWithCallback",
      "modifyState",
      "modifyStateWithCallback",
      "forceUpdate",
      "forceUpdateWithCallback",
      "createElement",
      "unsafeCreateElement",
      "createElementDynamic",
      "unsafeCreateElementDynamic",
      "createLeafElement",
      "unsafeCreateLeafElement",
      "createElementTagName",
      "createElementTagNameDynamic",
      "childrenToArray",
      "childrenCount",
      "toElement",
      "fragment",
      "fragmentWithKey",
      "createContext"
    ]
  },
  "react-aria": {
    "React.Aria.Button": [
      "useButton",
      "pressEvent"
    ],
    "React.Aria.Combobox": [],
    "React.Aria.Focus": [],
    "React.Aria.Interactions": [],
    "React.Aria.JSSet": [],
    "React.Aria.Listbox": [],
    "React.Aria.Overlays": [],
    "React.Aria.Types": [],
    "React.Aria.Utils": []
  },
  "react-basic": {
    "React.Basic.Events": [
      "unsafeEventFn",
      "handler",
      "handler_",
      "syntheticEvent",
      "merge",
      "mergeImpl"
    ],
    "React.Basic.StrictMode": [
      "strictMode"
    ],
    "React.Basic": []
  },
  "react-basic-classic": {
    "React.Basic.Classic.Components.Async": [
      "async",
      "asyncWithLoader"
    ],
    "React.Basic.Classic": [
      "createComponent",
      "readProps",
      "readState",
      "runUpdate",
      "make",
      "makeStateless",
      "displayNameFromComponent",
      "displayNameFromSelf",
      "toReactComponent"
    ]
  },
  "react-basic-dnd": {
    "React.Basic.ReactDND.Backends.HTML5Backend": [],
    "React.Basic.ReactDND.Backends.TestBackend": [],
    "React.Basic.ReactDND.Backends.TouchBackend": [],
    "React.Basic.ReactDND": [
      "dndProvider",
      "useDrag",
      "useDrop",
      "mergeTargets"
    ]
  },
  "react-basic-dom": {
    "React.Basic.DOM.Client": [],
    "React.Basic.DOM.Components.GlobalEvents": [
      "defaultOptions",
      "globalEvent",
      "globalEvents",
      "windowEvent",
      "windowEvents"
    ],
    "React.Basic.DOM.Components.Ref": [
      "ref",
      "selectorRef"
    ],
    "React.Basic.DOM.Events": [
      "capture",
      "capture_",
      "bubbles",
      "cancelable",
      "compositionData",
      "eventPhase",
      "eventPhaseNone",
      "eventPhaseCapturing",
      "eventPhaseAtTarget",
      "eventPhaseBubbling",
      "isTrusted",
      "nativeEvent",
      "preventDefault",
      "isDefaultPrevented",
      "stopPropagation",
      "isPropagationStopped",
      "target",
      "currentTarget",
      "relatedTarget",
      "targetChecked",
      "targetValue",
      "targetFiles",
      "timeStamp",
      "type_",
      "key",
      "code",
      "char",
      "location",
      "repeat",
      "locale",
      "ctrlKey",
      "shiftKey",
      "altKey",
      "metaKey",
      "detail",
      "screenX",
      "screenY",
      "clientX",
      "clientY",
      "button",
      "buttons",
      "dataTransfer",
      "clipboardData"
    ],
    "React.Basic.DOM.Generated": [],
    "React.Basic.DOM.Internal": [],
    "React.Basic.DOM.Server": [
      "renderToString",
      "renderToStaticMarkup"
    ],
    "React.Basic.DOM.Simplified.Generated": [],
    "React.Basic.DOM.Simplified.ToJSX": [
      "el",
      "toJSX"
    ],
    "React.Basic.DOM.SVG": [],
    "React.Basic.DOM": [
      "render",
      "render'",
      "hydrate",
      "hydrate'",
      "unmount",
      "createPortal",
      "text"
    ]
  },
  "react-basic-emotion": {
    "React.Basic.Emotion": [
      "absolute",
      "auto",
      "baseline",
      "block",
      "borderBox",
      "center",
      "ch",
      "ch2",
      "ch4",
      "cm",
      "cm2",
      "cm4",
      "color",
      "column",
      "contentBox",
      "css",
      "default",
      "element",
      "elementKeyed",
      "ellipsis",
      "em",
      "em2",
      "em4",
      "ex",
      "ex2",
      "ex4",
      "fallbacks",
      "fixed",
      "flex",
      "flexEnd",
      "flexStart",
      "global",
      "grid",
      "hidden",
      "important",
      "inches",
      "inches2",
      "inches4",
      "inherit",
      "initial",
      "inlineBlock",
      "inlineFlex",
      "inlineGrid",
      "int",
      "keyframes",
      "manipulation",
      "maxContent",
      "merge",
      "minContent",
      "mm",
      "mm2",
      "mm4",
      "nested",
      "none",
      "nowrap",
      "num",
      "pc",
      "pc2",
      "pc4",
      "percent",
      "percent2",
      "percent4",
      "pointer",
      "preWrap",
      "prop",
      "pt",
      "pt2",
      "pt4",
      "px",
      "px'",
      "px2",
      "px2'",
      "px4",
      "px4'",
      "relative",
      "rem",
      "rem2",
      "rem4",
      "revert",
      "row",
      "scroll",
      "solid",
      "spaceAround",
      "spaceBetween",
      "spaceEvenly",
      "sticky",
      "str",
      "stretch",
      "style",
      "underline",
      "unset",
      "url",
      "var",
      "vh",
      "vh2",
      "vh4",
      "visible",
      "vmax",
      "vmax2",
      "vmax4",
      "vmin",
      "vmin2",
      "vmin4",
      "vw",
      "vw2",
      "vw4",
      "wrap"
    ]
  },
  "react-basic-hooks": {
    "React.Basic.Hooks.Aff": [
      "useAff",
      "useAffReducer",
      "mkAffReducer",
      "runAffReducer",
      "noEffects"
    ],
    "React.Basic.Hooks.ErrorBoundary": [
      "mkErrorBoundary"
    ],
    "React.Basic.Hooks.Internal": [
      "coerceHook",
      "unsafeHook",
      "unsafeRenderEffect",
      "bind",
      "discard"
    ],
    "React.Basic.Hooks.ResetToken": [
      "useResetToken"
    ],
    "React.Basic.Hooks.Suspense.Store": [
      "mkSuspenseStore",
      "get",
      "get'"
    ],
    "React.Basic.Hooks.Suspense": [
      "suspend",
      "suspense"
    ],
    "React.Basic.Hooks": [
      "component",
      "reactComponent",
      "reactComponentWithChildren",
      "reactComponentFromHook",
      "reactChildrenToArray",
      "reactChildrenFromArray",
      "memo",
      "memo'",
      "useState",
      "useState'",
      "useEffect",
      "useEffectOnce",
      "useEffectAlways",
      "useLayoutEffect",
      "useLayoutEffectOnce",
      "useLayoutEffectAlways",
      "useInsertionEffect",
      "useInsertionEffectOnce",
      "useInsertionEffectAlways",
      "mkReducer",
      "runReducer",
      "useReducer",
      "readRef",
      "readRefMaybe",
      "writeRef",
      "useRef",
      "useContext",
      "useEqCache",
      "useMemo",
      "useDebugValue",
      "useId",
      "useTransition",
      "useDeferredValue",
      "useSyncExternalStore",
      "useSyncExternalStore'",
      "displayName"
    ]
  },
  "react-basic-storybook": {
    "Storybook.Addon.Actions": [],
    "Storybook.Addon.Docs": [],
    "Storybook.TestingLibrary.Types": [],
    "Storybook.TestingLibrary": [],
    "Storybook.Types": [],
    "Storybook": [
      "meta",
      "story_",
      "story",
      "simpleStory",
      "parameters",
      "playFunction",
      "loaderFunction",
      "metaDecorator"
    ]
  },
  "react-dom": {
    "ReactDOM": [
      "render",
      "hydrate",
      "unmountComponentAtNode",
      "findDOMNode",
      "renderToString",
      "renderToStaticMarkup"
    ]
  },
  "react-halo": {
    "React.Halo.Component": [],
    "React.Halo.Hook": [],
    "React.Halo.Internal.Control": [],
    "React.Halo.Internal.Eval": [],
    "React.Halo.Internal.State": [],
    "React.Halo.Internal.Types": [],
    "React.Halo": []
  },
  "react-icons": {
    "React.Icons.Ai": [],
    "React.Icons.Bi": [],
    "React.Icons.Bs": [],
    "React.Icons.Cg": [],
    "React.Icons.Di": [],
    "React.Icons.Fa": [],
    "React.Icons.Fc": [],
    "React.Icons.Fi": [],
    "React.Icons.Gi": [],
    "React.Icons.Go": [],
    "React.Icons.Gr": [],
    "React.Icons.Hi": [],
    "React.Icons.Im": [],
    "React.Icons.Io": [],
    "React.Icons.Md": [],
    "React.Icons.Ri": [],
    "React.Icons.Si": [],
    "React.Icons.Tb": [],
    "React.Icons.Ti": [],
    "React.Icons.Types": [],
    "React.Icons.Vsc": [],
    "React.Icons.Wi": [],
    "React.Icons": [
      "icon",
      "icon_"
    ]
  },
  "react-testing-library": {
    "React.TestingLibrary": [
      "cleanup",
      "defaultKeyboardEvent",
      "describeComponent",
      "findByText",
      "fireEvent",
      "fireEventAbort",
      "fireEventAnimationEnd",
      "fireEventAnimationIteration",
      "fireEventAnimationStart",
      "fireEventBlur",
      "fireEventCanPlay",
      "fireEventCanPlayThrough",
      "fireEventChange",
      "fireEventClick",
      "fireEventCompositionEnd",
      "fireEventCompositionStart",
      "fireEventCompositionUpdate",
      "fireEventContextMenu",
      "fireEventCopy",
      "fireEventCut",
      "fireEventDblClick",
      "fireEventDoubleClick",
      "fireEventDrag",
      "fireEventDragEnd",
      "fireEventDragEnter",
      "fireEventDragExit",
      "fireEventDragLeave",
      "fireEventDragOver",
      "fireEventDragStart",
      "fireEventDrop",
      "fireEventDurationChange",
      "fireEventEmptied",
      "fireEventEncrypted",
      "fireEventEnded",
      "fireEventError",
      "fireEventFocus",
      "fireEventFocusIn",
      "fireEventFocusOut",
      "fireEventGotPointerCapture",
      "fireEventInput",
      "fireEventInvalid",
      "fireEventKeyDown",
      "fireEventKeyPress",
      "fireEventKeyUp",
      "fireEventLoad",
      "fireEventLoadStart",
      "fireEventLoadedData",
      "fireEventLoadedMetadata",
      "fireEventLostPointerCapture",
      "fireEventMouseDown",
      "fireEventMouseEnter",
      "fireEventMouseLeave",
      "fireEventMouseMove",
      "fireEventMouseOut",
      "fireEventMouseOver",
      "fireEventMouseUp",
      "fireEventPaste",
      "fireEventPause",
      "fireEventPlay",
      "fireEventPlaying",
      "fireEventPointerCancel",
      "fireEventPointerDown",
      "fireEventPointerEnter",
      "fireEventPointerLeave",
      "fireEventPointerMove",
      "fireEventPointerOut",
      "fireEventPointerOver",
      "fireEventPointerUp",
      "fireEventProgress",
      "fireEventRateChange",
      "fireEventScroll",
      "fireEventSeeked",
      "fireEventSeeking",
      "fireEventSelect",
      "fireEventStalled",
      "fireEventSubmit",
      "fireEventSuspend",
      "fireEventTimeUpdate",
      "fireEventTouchCancel",
      "fireEventTouchEnd",
      "fireEventTouchMove",
      "fireEventTouchStart",
      "fireEventTransitionEnd",
      "fireEventVolumeChange",
      "fireEventWaiting",
      "fireEventWheel",
      "render",
      "renderComponent",
      "typeText"
    ],
    "Test.Spec.Assertions.DOM": []
  },
  "react-virtuoso": {
    "React.Virtuoso": [
      "components",
      "followOutputAuto",
      "followOutputFalse",
      "followOutputSmooth",
      "followOutputTrue",
      "scrollToIndex",
      "scrollerRefToHTMLElement",
      "scrollerRefToWindow",
      "virtuoso",
      "virtuosoImpl"
    ]
  },
  "read": {
    "Data.String.Read": [
      "read",
      "zero",
      "readDefault"
    ]
  },
  "record": {
    "Record.Builder": [
      "build",
      "buildFromScratch",
      "flip",
      "insert",
      "modify",
      "delete",
      "rename",
      "merge",
      "union",
      "disjointUnion",
      "nub"
    ],
    "Record.Unsafe.Union": [],
    "Record": [
      "get",
      "set",
      "modify",
      "insert",
      "delete",
      "rename",
      "equal",
      "merge",
      "union",
      "disjointUnion",
      "nub",
      "equalFields"
    ]
  },
  "record-extra": {
    "Record.Extra": []
  },
  "record-studio": {
    "Record.Studio.Keys": [
      "keys",
      "keysImpl",
      "recordKeys"
    ],
    "Record.Studio.Map": [],
    "Record.Studio.MapKind": [],
    "Record.Studio.MapUniform": [],
    "Record.Studio.Merge": [],
    "Record.Studio.SameKeys": [],
    "Record.Studio.Sequence": [],
    "Record.Studio.Shrink": [
      "shrink"
    ],
    "Record.Studio.SingletonRecord": [
      "key",
      "value",
      "singletonRecordFields"
    ],
    "Record.Studio": []
  },
  "refs": {
    "Effect.Ref": [
      "new",
      "newWithSelf",
      "read",
      "modify'",
      "modify",
      "modify_",
      "write"
    ]
  },
  "remotedata": {
    "Network.RemoteData": []
  },
  "resource": {
    "Codensity": [],
    "Ran": [],
    "Resource.Unsafe": [],
    "Resource": [
      "new",
      "run",
      "with"
    ]
  },
  "resourcet": {
    "Control.Monad.Resource.Aff.Pool": [],
    "Control.Monad.Resource.Class": [],
    "Control.Monad.Resource.Internal.Registry": [],
    "Control.Monad.Resource.Trans": [],
    "Control.Monad.Resource": [
      "register",
      "acquire",
      "deregister",
      "release",
      "release'",
      "isRegistered",
      "isReleased",
      "fork",
      "forkAff",
      "supervise"
    ]
  },
  "result": {
    "Data.Result": []
  },
  "return": {
    "Return.Folds": [],
    "Return": [
      "mkReturnable"
    ]
  },
  "ring-modules": {
    "Data.Ring.Module": [
      "mzeroL",
      "maddL",
      "msubL",
      "mmulL",
      "mnegateL",
      "mzeroR",
      "maddR",
      "msubR",
      "mmulR",
      "mnegateR"
    ]
  },
  "rito": {
    "Rito.BlendDst": [],
    "Rito.BlendEquation": [],
    "Rito.Blending": [],
    "Rito.BlendSrc": [],
    "Rito.Box3": [
      "box3"
    ],
    "Rito.BufferAttribute": [
      "bufferAttribute",
      "bufferAttributes",
      "internalDoNotUseBA"
    ],
    "Rito.BufferAttributeUnsafe": [],
    "Rito.Cameras.PerspectiveCamera": [
      "perspectiveCamera",
      "perspectiveCamera_",
      "toInitializePerspectiveCamera"
    ],
    "Rito.Color": [],
    "Rito.CombineOperation": [],
    "Rito.Core": [],
    "Rito.CSS.CSS2DObject": [
      "css2DObject"
    ],
    "Rito.CSS.CSS3DObject": [
      "css3DObject"
    ],
    "Rito.CubeTexture": [],
    "Rito.DepthMode": [],
    "Rito.Euler": [
      "euler"
    ],
    "Rito.FogExp2": [],
    "Rito.Geometries.Box": [
      "box",
      "toInitializeBox"
    ],
    "Rito.Geometries.BufferGeometry": [
      "bufferGeometry",
      "toInitializeBufferGeometry"
    ],
    "Rito.Geometries.Capsule": [
      "capsule",
      "toInitializeCapsule"
    ],
    "Rito.Geometries.Cylinder": [
      "cylinder",
      "toInitializeCylinder"
    ],
    "Rito.Geometries.Plane": [
      "plane",
      "toInitializePlane"
    ],
    "Rito.Geometries.Sphere": [
      "sphere",
      "toInitializeSphere"
    ],
    "Rito.GLTF": [],
    "Rito.Group": [
      "group",
      "unsafeInternalGroup"
    ],
    "Rito.InstancedBufferAttribute": [
      "instancedBufferAttribute",
      "instancedBufferAttributes",
      "internalDoNotUseBA"
    ],
    "Rito.Interpret": [
      "effectfulThreeInterpret",
      "makeFFIThreeSnapshot"
    ],
    "Rito.Lights.AmbientLight": [
      "ambientLight",
      "ambientLight_",
      "toInitializeAmbientLight"
    ],
    "Rito.Lights.DirectionalLight": [
      "directionalLight",
      "directionalLight_",
      "toInitializeDirectionalLight"
    ],
    "Rito.Lights.PointLight": [
      "pointLight",
      "pointLight_",
      "toInitializePointLight"
    ],
    "Rito.Materials.MeshBasicMaterial": [
      "meshBasicMaterial",
      "meshBasicMaterial_",
      "toInitializeMeshBasicMaterial"
    ],
    "Rito.Materials.MeshLambertMaterial": [
      "meshLambertMaterial",
      "meshLambertMaterial_",
      "toInitializeMeshLambertMaterial"
    ],
    "Rito.Materials.MeshPhongMaterial": [
      "meshPhongMaterial",
      "meshPhongMaterial_",
      "toInitializeMeshPhongMaterial"
    ],
    "Rito.Materials.MeshStandardMaterial": [
      "meshStandardMaterial",
      "meshStandardMaterial_",
      "toInitializeMeshStandardMaterial"
    ],
    "Rito.Materials.RawShaderMaterial": [
      "rawShaderMaterial",
      "rawShaderMaterial_",
      "toInitializeRawShaderMaterial"
    ],
    "Rito.Materials.ShaderMaterial": [
      "shaderMaterial",
      "shaderMaterial_",
      "toInitializeShaderMaterial"
    ],
    "Rito.Matrix4": [
      "matrix4",
      "ctor",
      "equals",
      "set",
      "compose",
      "determinant",
      "invert",
      "identity",
      "lookAt",
      "makeRotationAxis",
      "makeRotationFromEuler",
      "makeRotationFromQuaternion",
      "makeRotationX",
      "makeRotationY",
      "makeRotationZ",
      "makeScale",
      "makeShear",
      "makeTranslation",
      "multiply",
      "multiplyMatrices",
      "multiplyScalar",
      "premultiply",
      "scale",
      "setPosition",
      "transpose"
    ],
    "Rito.Mesh": [
      "mesh",
      "mesh'"
    ],
    "Rito.NormalMapType": [],
    "Rito.Points": [
      "points",
      "points'"
    ],
    "Rito.Portal": [],
    "Rito.Precision": [],
    "Rito.Properties": [],
    "Rito.Quaternion": [],
    "Rito.Renderers.CSS2D": [],
    "Rito.Renderers.CSS3D": [],
    "Rito.Renderers.Raycaster": [],
    "Rito.Renderers.WebGL.BloomPass": [],
    "Rito.Renderers.WebGL.EffectComposer": [],
    "Rito.Renderers.WebGL.EffectComposerPass": [],
    "Rito.Renderers.WebGL.GlitchPass": [],
    "Rito.Renderers.WebGL.RenderPass": [],
    "Rito.Renderers.WebGL.UnrealBloomPass": [],
    "Rito.Renderers.WebGL": [],
    "Rito.Renderers.WebGLRenderingPowerPreference": [],
    "Rito.Renderers.WebGLRenderingPrecision": [],
    "Rito.RoundRobin": [
      "singleInstance",
      "roundRobinInstancedMesh"
    ],
    "Rito.Run": [],
    "Rito.Scene": [
      "scene",
      "toInitializeScene"
    ],
    "Rito.Side": [],
    "Rito.Sphere": [
      "sphere"
    ],
    "Rito.ST.ForEach": [
      "foreachST"
    ],
    "Rito.Texture": [],
    "Rito.THREE": [],
    "Rito.Undefinable": [],
    "Rito.Uniforms": [],
    "Rito.Vector2": [
      "vector2",
      "normalize",
      "add",
      "mul",
      "div",
      "sub"
    ],
    "Rito.Vector3": [
      "vector3",
      "normalize",
      "add",
      "mul",
      "div",
      "sub"
    ],
    "Rito.WireframeLinecap": [],
    "Rito.WireframeLinejoin": []
  },
  "routing": {
    "Routing.Hash": [
      "getHash",
      "setHash",
      "modifyHash",
      "foldHashes",
      "hashes",
      "matches",
      "matchesWith"
    ],
    "Routing.Match.Error": [],
    "Routing.Match": [],
    "Routing.Parser": [
      "parse"
    ],
    "Routing.PushState": [
      "makeInterface",
      "foldLocations",
      "locations",
      "foldPaths",
      "paths",
      "matches",
      "matchesWith"
    ],
    "Routing.Types": [],
    "Routing": [
      "match",
      "matchWith"
    ]
  },
  "routing-duplex": {
    "Routing.Duplex.Generic.Syntax": [],
    "Routing.Duplex.Generic": [],
    "Routing.Duplex.Parser": [
      "runRouteParser",
      "parsePath",
      "run",
      "prefix",
      "take",
      "param",
      "flag",
      "many1",
      "many",
      "rest",
      "default",
      "optional",
      "as",
      "int",
      "boolean",
      "hash",
      "end"
    ],
    "Routing.Duplex.Printer": [
      "put",
      "param",
      "flag",
      "hash",
      "run",
      "printPath"
    ],
    "Routing.Duplex.Types": [],
    "Routing.Duplex": [
      "parse",
      "print",
      "prefix",
      "suffix",
      "path",
      "root",
      "end",
      "segment",
      "param",
      "flag",
      "hash",
      "many1",
      "many",
      "rest",
      "default",
      "optional",
      "as",
      "int",
      "boolean",
      "string",
      "record",
      "prop",
      "params",
      "buildParams"
    ]
  },
  "run": {
    "Run.Choose": [
      "liftChoose",
      "cempty",
      "calt",
      "runChoose"
    ],
    "Run.Except": [
      "_except",
      "liftExcept",
      "liftExceptAt",
      "runExcept",
      "runExceptAt",
      "runFail",
      "runFailAt",
      "throw",
      "throwAt",
      "fail",
      "failAt",
      "rethrow",
      "rethrowAt",
      "note",
      "noteAt",
      "fromJust",
      "fromJustAt",
      "catch",
      "catchAt"
    ],
    "Run.Internal": [
      "_choose",
      "toRows",
      "fromRows"
    ],
    "Run.Reader": [
      "_reader",
      "liftReader",
      "liftReaderAt",
      "ask",
      "asks",
      "askAt",
      "asksAt",
      "local",
      "localAt",
      "runReader",
      "runReaderAt"
    ],
    "Run.State": [
      "_state",
      "liftState",
      "liftStateAt",
      "modify",
      "modifyAt",
      "put",
      "putAt",
      "get",
      "getAt",
      "gets",
      "getsAt",
      "runState",
      "runStateAt",
      "evalState",
      "evalStateAt",
      "execState",
      "execStateAt"
    ],
    "Run.Writer": [
      "_writer",
      "liftWriter",
      "liftWriterAt",
      "tell",
      "tellAt",
      "censor",
      "censorAt",
      "foldWriter",
      "foldWriterAt",
      "runWriter",
      "runWriterAt"
    ],
    "Run": [
      "lift",
      "send",
      "extract",
      "interpret",
      "interpretRec",
      "run",
      "runRec",
      "runCont",
      "runPure",
      "runAccum",
      "runAccumRec",
      "runAccumCont",
      "runAccumPure",
      "peel",
      "resume",
      "expand",
      "liftEffect",
      "liftAff",
      "runBaseEffect",
      "runBaseAff",
      "runBaseAff'"
    ]
  },
  "safe-coerce": {
    "Safe.Coerce": [
      "coerce"
    ]
  },
  "safely": {
    "Control.Safely": [
      "safely",
      "replicateM_",
      "traverse_",
      "for_",
      "foldM"
    ]
  },
  "school-of-music": {
    "Data.Euterpea.DSL.Parser": [
      "parse"
    ],
    "Data.Euterpea.Dynamics": [
      "read"
    ],
    "Data.Euterpea.Midi.MEvent": [],
    "Data.Euterpea.Music": [],
    "Data.Euterpea.Music1": [],
    "Data.Euterpea.Notes": [],
    "Data.Euterpea.Transform": []
  },
  "selection-foldable": {
    "Data.SelectionFoldable": [
      "fromFoldable",
      "toFoldable",
      "select",
      "selectWith",
      "selectIndex",
      "selectWithIndex",
      "deselect",
      "selected",
      "mapSelected",
      "foldrSelected",
      "foldrWithIndexSelected",
      "foldlSelected",
      "foldlWithIndexSelected"
    ],
    "Data.SelectionFoldableWithData": [
      "fromFoldable",
      "toFoldable",
      "select",
      "selectWith",
      "selectIndex",
      "selectWithIndex",
      "deselect",
      "selected",
      "selected_",
      "mapSelected",
      "foldrSelected",
      "foldrWithIndexSelected",
      "foldlSelected",
      "foldlWithIndexSelected"
    ]
  },
  "semirings": {
    "Data.Semiring.Free": [
      "free",
      "liftFree",
      "lowerFree"
    ]
  },
  "signal": {
    "Signal.Aff": [
      "mapAff"
    ],
    "Signal.Channel": [
      "channel",
      "send",
      "subscribe"
    ],
    "Signal.DOM": [
      "animationFrame",
      "keyPressed",
      "mouseButton",
      "mouseButtonPressed",
      "touch",
      "tap",
      "mousePos",
      "windowDimensions"
    ],
    "Signal.Effect": [
      "mapEffect",
      "foldEffect"
    ],
    "Signal.Time": [
      "every",
      "delay",
      "since",
      "debounce",
      "millisecond",
      "now",
      "second"
    ],
    "Signal": [
      "constant",
      "merge",
      "mergeMany",
      "foldp",
      "sampleOn",
      "dropRepeats",
      "dropRepeats'",
      "runSignal",
      "unwrap",
      "get",
      "filter",
      "filterMap",
      "flatten",
      "flattenArray",
      "squigglyMap",
      "squigglyApply",
      "flippedMap",
      "map2",
      "map3",
      "map4",
      "map5"
    ]
  },
  "simple-emitter": {
    "SimpleEmitter": [
      "createEmitter",
      "subscribe",
      "unsubscribe",
      "emit"
    ]
  },
  "simple-i18n": {
    "Simple.I18n.Translation": [
      "fromRecord",
      "toRecord"
    ],
    "Simple.I18n.Translator": [
      "createTranslator",
      "currentLang",
      "setLang",
      "label",
      "translate"
    ]
  },
  "simple-json": {
    "Simple.JSON": [
      "readJSON",
      "readJSON'",
      "readJSON_",
      "writeJSON",
      "write",
      "read",
      "read'",
      "read_",
      "readAsForeign",
      "parseJSON",
      "undefined",
      "unsafeStringify",
      "readImpl",
      "getFields",
      "readVariantImpl",
      "writeImpl",
      "writeImplFields",
      "writeVariantImpl"
    ]
  },
  "simple-jwt": {
    "Node.Simple.Jwt": [
      "fromString",
      "toString",
      "decode",
      "encode"
    ]
  },
  "simple-ulid": {
    "Simple.ULID.Node": [
      "prng"
    ],
    "Simple.ULID.PRNG": [
      "toEffect"
    ],
    "Simple.ULID.Window": [
      "prng"
    ],
    "Simple.ULID": [
      "genULID",
      "genULID'",
      "toString"
    ]
  },
  "sized-matrices": {
    "Data.Matrix.Algorithms": [
      "det",
      "inverse",
      "cofactor",
      "cofactorMatrix",
      "adjunct"
    ],
    "Data.Matrix.Operations": [],
    "Data.Matrix.RegularMatrices": [],
    "Data.Matrix.Reps": [],
    "Data.Matrix.Transformations": [],
    "Data.Matrix": [
      "fill",
      "fromVec",
      "toArray",
      "replicate'",
      "height",
      "width",
      "size",
      "index",
      "index'",
      "unsafeIndex",
      "column",
      "columnUnsafe",
      "row",
      "rowUnsafe",
      "concatH",
      "concatV",
      "zipWithE",
      "zipE",
      "negateMatrix",
      "mulMatrix",
      "matrixOne",
      "matrixZero",
      "scalarMul"
    ]
  },
  "sized-vectors": {
    "Data.Vec": [
      "empty",
      "cons",
      "snoc",
      "uncons",
      "singleton",
      "vec2",
      "vec3",
      "fill",
      "range",
      "replicate",
      "replicate'",
      "fromArray",
      "length",
      "lengthT",
      "toArray",
      "toUnfoldable",
      "index",
      "index'",
      "concat",
      "updateAt",
      "modifyAt",
      "insertAt",
      "deleteAt",
      "head",
      "last",
      "tail",
      "init",
      "insert",
      "insertBy",
      "slice",
      "slice'",
      "take",
      "take'",
      "drop",
      "drop'",
      "zip",
      "zipWith",
      "zipWithE",
      "unzip",
      "sort",
      "sortBy",
      "reverse",
      "dotProduct"
    ]
  },
  "slug": {
    "Slug": [
      "generate",
      "parse",
      "toString",
      "truncate"
    ]
  },
  "small-ffi": {
    "Data.Foreign.SmallFFI": [
      "unsafeForeignFunction",
      "unsafeForeignProcedure"
    ]
  },
  "soundfonts": {
    "Audio.SoundFont.Decoder": [
      "midiJsToNoteMap",
      "debugNoteNames",
      "debugNoteIds"
    ],
    "Audio.SoundFont.Gleitz": [
      "gleitzUrl",
      "gleitzNoteName",
      "midiPitch",
      "debugNoteName"
    ],
    "Audio.SoundFont.Melody.Class": [],
    "Audio.SoundFont.Melody.Maker": [
      "toMelody",
      "toMelody_"
    ],
    "Audio.SoundFont.Melody": [
      "playPhrase",
      "playMelody"
    ],
    "Audio.SoundFont": [
      "canPlayOgg",
      "isWebAudioEnabled",
      "setNoteRing",
      "logLoadResource",
      "loadInstrument",
      "loadInstruments",
      "loadRemoteSoundFonts",
      "loadPianoSoundFont",
      "playNote",
      "playNotes",
      "instrumentChannels"
    ]
  },
  "sparse-matrices": {
    "Data.Sparse.Matrix": []
  },
  "sparse-polynomials": {
    "Data.Sparse.Polynomial": []
  },
  "spec": {
    "Test.Spec.Assertions.String": [
      "shouldContain",
      "shouldNotContain",
      "shouldStartWith",
      "shouldEndWith"
    ],
    "Test.Spec.Assertions": [
      "expectError",
      "fail",
      "shouldContain",
      "shouldEqual",
      "shouldNotContain",
      "shouldNotEqual",
      "shouldNotReturn",
      "shouldNotSatisfy",
      "shouldReturn",
      "shouldSatisfy"
    ],
    "Test.Spec.Console": [
      "tellLn",
      "tellLns",
      "write",
      "logWriter"
    ],
    "Test.Spec.Reporter.Base": [
      "defaultSummary",
      "defaultReporter",
      "defaultUpdate"
    ],
    "Test.Spec.Reporter.Console": [
      "consoleReporter"
    ],
    "Test.Spec.Reporter.Dot": [
      "dotReporter"
    ],
    "Test.Spec.Reporter.Spec": [
      "specReporter"
    ],
    "Test.Spec.Reporter.Tap": [
      "tapReporter"
    ],
    "Test.Spec.Reporter.TeamCity": [
      "teamcityReporter",
      "teamcity"
    ],
    "Test.Spec.Reporter": [],
    "Test.Spec.Result": [],
    "Test.Spec.Runner.Event": [],
    "Test.Spec.Runner": [
      "run",
      "runSpecT",
      "runSpec",
      "runSpec'",
      "defaultConfig"
    ],
    "Test.Spec.Speed": [],
    "Test.Spec.Style": [],
    "Test.Spec.Summary": [
      "summarize",
      "successful"
    ],
    "Test.Spec.Tree": [
      "bimapTree",
      "countTests",
      "isAllParallelizable",
      "discardUnfocused",
      "modifyAroundAction",
      "parentSuiteName",
      "parentSuite"
    ],
    "Test.Spec": [
      "mapSpecTree",
      "collect",
      "hoistSpec",
      "evaluateExample",
      "parallel",
      "sequential",
      "focus",
      "describeOnly",
      "itOnly",
      "describe",
      "it",
      "pending",
      "pending'",
      "aroundWith",
      "around",
      "around_",
      "before",
      "before_",
      "beforeWith",
      "beforeAll",
      "beforeAll_",
      "after",
      "after_",
      "afterAll",
      "afterAll_"
    ]
  },
  "spec-discovery": {
    "Test.Spec.Discovery": [
      "discover"
    ]
  },
  "spec-quickcheck": {
    "Test.Spec.QuickCheck": [
      "quickCheck",
      "quickCheck'",
      "quickCheckPure"
    ]
  },
  "splitmix": {
    "Random.SplitMix": [
      "mk",
      "nextInt",
      "nextNumber",
      "nextUInt64",
      "split"
    ]
  },
  "ssrs": {
    "SSRS.Algebra": [],
    "SSRS.Coalgebra": [],
    "SSRS.Fold": [],
    "SSRS.Refold": [],
    "SSRS.Transform": [],
    "SSRS.Unfold": [],
    "SSRS": []
  },
  "st": {
    "Control.Monad.ST.Class": [],
    "Control.Monad.ST.Global": [
      "toEffect"
    ],
    "Control.Monad.ST.Internal": [
      "run",
      "while",
      "for",
      "foreach",
      "new",
      "read",
      "modify'",
      "modify",
      "write"
    ],
    "Control.Monad.ST.Ref": [],
    "Control.Monad.ST.Uncurried": [],
    "Control.Monad.ST": []
  },
  "strictlypositiveint": {
    "Data.StrictlyPositiveInt": [
      "fromInt",
      "toInt",
      "minus",
      "plus",
      "one"
    ]
  },
  "string-parsers": {
    "StringParser.CodePoints": [
      "eof",
      "anyChar",
      "anyCodePoint",
      "anyDigit",
      "string",
      "satisfy",
      "satisfyCodePoint",
      "char",
      "codePoint",
      "whiteSpace",
      "skipSpaces",
      "oneOf",
      "noneOf",
      "lowerCaseChar",
      "upperCaseChar",
      "anyLetter",
      "alphaNum",
      "regex"
    ],
    "StringParser.CodeUnits": [
      "eof",
      "anyChar",
      "anyDigit",
      "string",
      "satisfy",
      "char",
      "whiteSpace",
      "skipSpaces",
      "oneOf",
      "noneOf",
      "lowerCaseChar",
      "upperCaseChar",
      "anyLetter",
      "alphaNum",
      "regex"
    ],
    "StringParser.Combinators": [
      "try",
      "lookAhead",
      "tryAhead",
      "many",
      "many1",
      "manyTill",
      "many1Till",
      "assertConsume",
      "withError",
      "between",
      "option",
      "optional",
      "optionMaybe",
      "sepBy",
      "sepBy1",
      "sepEndBy",
      "sepEndBy1",
      "endBy1",
      "endBy",
      "chainr",
      "chainl",
      "chainl1",
      "chainr1",
      "choice"
    ],
    "StringParser.Expr": [
      "buildExprParser"
    ],
    "StringParser.Parser": [],
    "StringParser": []
  },
  "strings": {
    "Data.Char.Gen": [],
    "Data.Char": [
      "toCharCode",
      "fromCharCode"
    ],
    "Data.String.CaseInsensitive": [],
    "Data.String.CodePoints": [
      "codePointFromChar",
      "singleton",
      "fromCodePointArray",
      "toCodePointArray",
      "codePointAt",
      "uncons",
      "length",
      "countPrefix",
      "indexOf",
      "indexOf'",
      "lastIndexOf",
      "lastIndexOf'",
      "take",
      "takeWhile",
      "drop",
      "dropWhile",
      "splitAt"
    ],
    "Data.String.CodeUnits": [
      "stripPrefix",
      "stripSuffix",
      "contains",
      "singleton",
      "fromCharArray",
      "toCharArray",
      "charAt",
      "toChar",
      "uncons",
      "length",
      "countPrefix",
      "indexOf",
      "indexOf'",
      "lastIndexOf",
      "lastIndexOf'",
      "take",
      "takeRight",
      "takeWhile",
      "drop",
      "dropRight",
      "dropWhile",
      "slice",
      "splitAt"
    ],
    "Data.String.Common": [
      "null",
      "localeCompare",
      "replace",
      "replaceAll",
      "split",
      "toLower",
      "toUpper",
      "trim",
      "joinWith"
    ],
    "Data.String.Gen": [],
    "Data.String.NonEmpty.CaseInsensitive": [],
    "Data.String.NonEmpty.CodePoints": [
      "fromCodePointArray",
      "fromNonEmptyCodePointArray",
      "singleton",
      "cons",
      "snoc",
      "fromFoldable1",
      "toCodePointArray",
      "toNonEmptyCodePointArray",
      "codePointAt",
      "indexOf",
      "indexOf'",
      "lastIndexOf",
      "lastIndexOf'",
      "uncons",
      "length",
      "take",
      "takeWhile",
      "drop",
      "dropWhile",
      "countPrefix",
      "splitAt"
    ],
    "Data.String.NonEmpty.CodeUnits": [
      "fromCharArray",
      "fromNonEmptyCharArray",
      "singleton",
      "cons",
      "snoc",
      "fromFoldable1",
      "toCharArray",
      "toNonEmptyCharArray",
      "charAt",
      "toChar",
      "indexOf",
      "indexOf'",
      "lastIndexOf",
      "lastIndexOf'",
      "uncons",
      "length",
      "take",
      "takeRight",
      "takeWhile",
      "drop",
      "dropRight",
      "dropWhile",
      "countPrefix",
      "splitAt"
    ],
    "Data.String.NonEmpty.Internal": [],
    "Data.String.NonEmpty": [],
    "Data.String.Pattern": [],
    "Data.String.Regex.Flags": [],
    "Data.String.Regex.Unsafe": [
      "unsafeRegex"
    ],
    "Data.String.Regex": [
      "regex",
      "source",
      "flags",
      "renderFlags",
      "parseFlags",
      "test",
      "match",
      "replace",
      "replace'",
      "search",
      "split"
    ],
    "Data.String.Unsafe": [
      "char",
      "charAt"
    ],
    "Data.String": []
  },
  "strings-extra": {
    "Data.String.Extra": [
      "camelCase",
      "kebabCase",
      "pascalCase",
      "snakeCase",
      "upperCaseFirst",
      "words",
      "levenshtein",
      "sorensenDiceCoefficient"
    ]
  },
  "stringutils": {
    "Data.Char.Utils": [
      "fromCodePoint",
      "isSurrogate",
      "toCodePoint",
      "unsafeFromCodePoint"
    ],
    "Data.String.Utils": [
      "charAt",
      "codePointAt",
      "codePointAt'",
      "endsWith",
      "endsWith'",
      "escapeRegex",
      "filter",
      "fromCharArray",
      "includes",
      "includes'",
      "length",
      "lines",
      "mapChars",
      "normalize",
      "normalize'",
      "padEnd",
      "padEnd'",
      "padStart",
      "padStart'",
      "repeat",
      "replaceAll",
      "startsWith",
      "startsWith'",
      "stripChars",
      "stripDiacritics",
      "stripMargin",
      "stripMarginWith",
      "toCharArray",
      "trimEnd",
      "trimStart",
      "unsafeCodePointAt",
      "unsafeCodePointAt'",
      "unsafeRepeat",
      "words"
    ]
  },
  "substitute": {
    "Substitute": [
      "normalize",
      "makeSubstituter",
      "defaultOptions",
      "substitute",
      "minimalOptions"
    ]
  },
  "sunde": {
    "Sunde": []
  },
  "supply": {
    "Supply": []
  },
  "svg-parser": {
    "Svg.Parser": [
      "parseToSvgNode"
    ]
  },
  "systemd-journald": {
    "Node.Systemd.Journald": [
      "alert",
      "crit",
      "debug",
      "emerg",
      "err",
      "info",
      "journald",
      "notice",
      "warning"
    ]
  },
  "tagged": {
    "Data.Functor.Tagged": [
      "tagged",
      "untagged"
    ]
  },
  "tailrec": {
    "Control.Monad.Rec.Class": [
      "tailRec",
      "tailRec2",
      "tailRec3",
      "tailRecM",
      "tailRecM2",
      "tailRecM3",
      "forever",
      "whileJust",
      "untilJust",
      "loop2",
      "loop3"
    ]
  },
  "tecton": {
    "Tecton.Internal": [
      "a",
      "abbr",
      "absolute",
      "accept",
      "acceptCharset",
      "accesskey",
      "acronym",
      "action",
      "active",
      "add",
      "adjacentSibling",
      "after",
      "alignContent",
      "alignItems",
      "alignSelf",
      "alignmentBaseline",
      "all",
      "alphabetic",
      "alt",
      "alternate",
      "alternateReverse",
      "animationDelay",
      "animationDirection",
      "animationDuration",
      "animationFillMode",
      "animationIterationCount",
      "animationName",
      "animationPlayState",
      "animationTimingFunction",
      "appearance",
      "arabicIndic",
      "armenian",
      "article",
      "aside",
      "assoc",
      "async",
      "att",
      "attContains",
      "attElemWhitespace",
      "attEndsWith",
      "attEq",
      "attStartsWith",
      "attStartsWithHyphen",
      "audio",
      "auto",
      "autoFill",
      "autoFit",
      "autocomplete",
      "autofocus",
      "autoplay",
      "b",
      "backgroundAttachment",
      "backgroundClip",
      "backgroundColor",
      "backgroundImage",
      "backgroundOrigin",
      "backgroundPosition",
      "backgroundRepeat",
      "backgroundSize",
      "backwards",
      "baseline",
      "baselineShift",
      "baselineSource",
      "before",
      "bengali",
      "blink",
      "block",
      "blockquote",
      "body",
      "bold",
      "bolder",
      "borderBottomColor",
      "borderBottomLeftRadius",
      "borderBottomRightRadius",
      "borderBottomStyle",
      "borderBottomWidth",
      "borderBox",
      "borderColor",
      "borderLeftColor",
      "borderLeftStyle",
      "borderLeftWidth",
      "borderRadius",
      "borderRightColor",
      "borderRightStyle",
      "borderRightWidth",
      "borderStyle",
      "borderTopColor",
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderTopStyle",
      "borderTopWidth",
      "borderWidth",
      "both",
      "bottom",
      "boxShadow",
      "breakSpaces",
      "button",
      "byAtt",
      "byClass",
      "byId",
      "byPseudo",
      "cambodian",
      "canvas",
      "capitalize",
      "caption",
      "center",
      "central",
      "ch",
      "charset",
      "checked",
      "child",
      "circle",
      "cite",
      "cjkDecimal",
      "cjkEarthlyBranch",
      "cjkHeavenlyStem",
      "class'",
      "clear",
      "clip",
      "closestCorner",
      "closestSide",
      "cm",
      "code",
      "col",
      "colgroup",
      "collapse",
      "collectMediaFeatures",
      "collection",
      "color",
      "cols",
      "colspan",
      "column",
      "columnGap",
      "columnReverse",
      "combine",
      "compact",
      "condensed",
      "contain",
      "content",
      "contentBox",
      "contenteditable",
      "contents",
      "controls",
      "coords",
      "cover",
      "cubicBezier",
      "currentColor",
      "cursive",
      "dashed",
      "data'",
      "datetime",
      "dd",
      "decimal",
      "decimalLeadingZero",
      "default",
      "defer",
      "deg",
      "dense",
      "descendant",
      "details",
      "devanagari",
      "dir",
      "direction",
      "dirname",
      "disabled",
      "disc",
      "disclosureClosed",
      "disclosureOpen",
      "display",
      "div",
      "divide",
      "dl",
      "dominantBaseline",
      "dotted",
      "double",
      "download",
      "dpcm",
      "dpi",
      "draggable",
      "dt",
      "ease",
      "easeIn",
      "easeInOut",
      "easeOut",
      "ellipse",
      "ellipsis",
      "em",
      "em'",
      "embeddedOpentype",
      "emoji",
      "empty",
      "enabled",
      "enctype",
      "end",
      "even",
      "ex",
      "expanded",
      "extraCondensed",
      "extraExpanded",
      "fangsong",
      "fantasy",
      "farthestCorner",
      "farthestSide",
      "fdval",
      "fieldset",
      "first",
      "firstChild",
      "firstLetter",
      "firstLine",
      "firstOfType",
      "fitContent",
      "fixed",
      "flex",
      "flexBasis",
      "flexDirection",
      "flexEnd",
      "flexGrow",
      "flexShrink",
      "flexStart",
      "flexWrap",
      "float",
      "flowRoot",
      "focus",
      "focusWithin",
      "foldlMultiVal",
      "foldLineNames",
      "fontFace",
      "fontFamily",
      "fontSize",
      "fontSizeAdjust",
      "fontStretch",
      "fontStyle",
      "fontWeight",
      "footer",
      "for",
      "form",
      "formaction",
      "format",
      "forwards",
      "fr",
      "fullSizeKana",
      "fullWidth",
      "gap",
      "generalSibling",
      "georgian",
      "grid",
      "gridAutoColumns",
      "gridAutoFlow",
      "gridAutoRows",
      "gridColumnEnd",
      "gridColumnStart",
      "gridRowEnd",
      "gridRowStart",
      "gridTemplateColumns",
      "gridTemplateRows",
      "groove",
      "gujarati",
      "gurmukhi",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "hanging",
      "header",
      "headers",
      "hebrew",
      "height",
      "hidden",
      "high",
      "hiragana",
      "hiraganaIroha",
      "hover",
      "hr",
      "href",
      "hreflang",
      "html",
      "httpEquiv",
      "i",
      "id",
      "ideographic",
      "img",
      "inch",
      "indeterminate",
      "infinite",
      "inherit",
      "initial",
      "inline",
      "inlineBlock",
      "inlineFlex",
      "inlineGrid",
      "inlineTable",
      "input",
      "inset",
      "insetBlock",
      "insetBlockEnd",
      "insetBlockStart",
      "insetInline",
      "insetInlineEnd",
      "insetInlineStart",
      "inside",
      "invert",
      "ismap",
      "italic",
      "jumpBoth",
      "jumpEnd",
      "jumpNone",
      "jumpStart",
      "justify",
      "justifyAll",
      "justifyContent",
      "justifyItems",
      "justifySelf",
      "kannada",
      "katakana",
      "katakanaIroha",
      "keyframes",
      "keyframesName",
      "khmer",
      "kind",
      "label",
      "landscape",
      "lang",
      "lang'",
      "lao",
      "large",
      "larger",
      "last",
      "lastChild",
      "lastOfType",
      "left",
      "legacy",
      "legend",
      "letterSpacing",
      "li",
      "lighter",
      "line",
      "lineHeight",
      "lineName",
      "lineThrough",
      "linear",
      "linearGradient",
      "link",
      "list",
      "listItem",
      "listStyleImage",
      "listStylePosition",
      "listStyleType",
      "local",
      "local'",
      "loop",
      "low",
      "lowerAlpha",
      "lowerArmenian",
      "lowerGreek",
      "lowerLatin",
      "lowerRoman",
      "lowercase",
      "ltr",
      "main'",
      "malayalam",
      "mapVal",
      "margin",
      "marginBottom",
      "marginLeft",
      "marginRight",
      "marginTop",
      "mark",
      "marker",
      "maskImage",
      "matchParent",
      "math",
      "mathematical",
      "matrix",
      "matrix3d",
      "max",
      "maxContent",
      "maxHeight",
      "maxWidth",
      "maxlength",
      "media",
      "media'",
      "medium",
      "menu",
      "menulistButton",
      "method",
      "middle",
      "min",
      "minContent",
      "minHeight",
      "minWidth",
      "minmax",
      "mkStatement",
      "mm",
      "mongolian",
      "monospace",
      "ms",
      "multiple",
      "multiply",
      "multiplyFlipped",
      "muted",
      "myanmar",
      "name",
      "nav",
      "nil",
      "noRepeat",
      "none",
      "normal",
      "not",
      "novalidate",
      "nowrap",
      "nth",
      "nthChild",
      "nthLastChild",
      "nthOfType",
      "number",
      "oblique",
      "odd",
      "ol",
      "onabort",
      "onafterprint",
      "onbeforeprint",
      "onbeforeunload",
      "onblur",
      "oncanplay",
      "oncanplaythrough",
      "onchange",
      "onclick",
      "oncontextmenu",
      "oncopy",
      "oncuechange",
      "oncut",
      "ondblclick",
      "ondrag",
      "ondragend",
      "ondragenter",
      "ondragleave",
      "ondragover",
      "ondragstart",
      "ondrop",
      "ondurationchange",
      "onemptied",
      "onended",
      "onerror",
      "onfocus",
      "onhashchange",
      "oninput",
      "oninvalid",
      "onkeydown",
      "onkeypress",
      "onkeyup",
      "onload",
      "onloadeddata",
      "onloadedmetadata",
      "onloadstart",
      "onlyChild",
      "onlyOfType",
      "onmousedown",
      "onmousemove",
      "onmouseout",
      "onmouseover",
      "onmouseup",
      "onmousewheel",
      "onoffline",
      "ononline",
      "onpagehide",
      "onpageshow",
      "onpaste",
      "onpause",
      "onplay",
      "onplaying",
      "onpopstate",
      "onprogress",
      "onratechange",
      "onreset",
      "onresize",
      "onscroll",
      "onsearch",
      "onseeked",
      "onseeking",
      "onselect",
      "onstalled",
      "onstorage",
      "onsubmit",
      "onsuspend",
      "ontimeupdate",
      "ontoggle",
      "onunload",
      "onvolumechange",
      "onwaiting",
      "onwheel",
      "opacity",
      "open",
      "opentype",
      "optgroup",
      "optimum",
      "option",
      "order",
      "oriya",
      "outlineColor",
      "outlineOffset",
      "outlineStyle",
      "outlineWidth",
      "outset",
      "outside",
      "overflow",
      "overflowX",
      "overflowY",
      "overline",
      "p",
      "padding",
      "paddingBottom",
      "paddingBox",
      "paddingLeft",
      "paddingRight",
      "paddingTop",
      "path",
      "pattern",
      "paused",
      "pc",
      "pct",
      "persian",
      "perspective",
      "placeholder",
      "polygon",
      "polyline",
      "portrait",
      "position",
      "poster",
      "pre",
      "preLine",
      "preWrap",
      "preload",
      "pretty",
      "print",
      "progress",
      "pseudoPrefix",
      "pt",
      "pval",
      "px",
      "q",
      "rad",
      "radialGradient",
      "readonly",
      "rect",
      "rel",
      "relative",
      "rem",
      "renderInline",
      "renderInline'",
      "renderSheet",
      "repeat",
      "repeat'",
      "repeatX",
      "repeatY",
      "repeating",
      "required",
      "reverse",
      "reversed",
      "ridge",
      "right",
      "role",
      "root",
      "rotate",
      "rotate3d",
      "rotateX",
      "rotateY",
      "rotateZ",
      "round",
      "row",
      "rowGap",
      "rowReverse",
      "rows",
      "rowspan",
      "rtl",
      "runVal",
      "running",
      "safe",
      "sandbox",
      "sansSerif",
      "scale",
      "scale3d",
      "scaleX",
      "scaleY",
      "scaleZ",
      "scope",
      "screen",
      "scroll",
      "sec",
      "section",
      "select",
      "selected",
      "selection",
      "selfEnd",
      "selfStart",
      "semiCondensed",
      "semiExpanded",
      "serif",
      "shape",
      "size",
      "sizes",
      "skewX",
      "skewY",
      "small",
      "smaller",
      "solid",
      "space",
      "spaceAround",
      "spaceBetween",
      "spaceEvenly",
      "span",
      "spellcheck",
      "square",
      "src",
      "srcdoc",
      "srclang",
      "srcset",
      "start",
      "static",
      "step",
      "stepEnd",
      "stepStart",
      "steps",
      "sticky",
      "stretch",
      "strong",
      "style",
      "sub",
      "subtract",
      "summary",
      "sup",
      "super",
      "svg",
      "systemUI",
      "tabindex",
      "table",
      "tableCaption",
      "tableCell",
      "tableColumn",
      "tableColumnGroup",
      "tableFooterGroup",
      "tableHeaderGroup",
      "tableRow",
      "tableRowGroup",
      "tamil",
      "target",
      "tbody",
      "td",
      "telugu",
      "textAlign",
      "textBottom",
      "textDecorationColor",
      "textDecorationLine",
      "textDecorationStyle",
      "textIndent",
      "textOverflow",
      "textShadow",
      "textTop",
      "textTransform",
      "textarea",
      "textfield",
      "tfoot",
      "th",
      "thai",
      "thead",
      "thick",
      "thin",
      "tibetan",
      "time",
      "title",
      "top",
      "tr",
      "transform",
      "transformOrigin",
      "transitionDelay",
      "transitionDuration",
      "transitionProperty",
      "transitionTimingFunction",
      "translate",
      "translate'",
      "translate3d",
      "translateX",
      "translateY",
      "translateZ",
      "transparent",
      "truetype",
      "turn",
      "type'",
      "uiMonospace",
      "uiRounded",
      "uiSansSerif",
      "uiSerif",
      "ul",
      "ultraCondensed",
      "ultraExpanded",
      "underline",
      "universal",
      "unsafe",
      "unset",
      "upperAlpha",
      "upperArmenian",
      "upperLatin",
      "upperRoman",
      "uppercase",
      "url",
      "usemap",
      "val",
      "value",
      "verticalAlign",
      "vh",
      "video",
      "visibility",
      "visible",
      "visited",
      "vmax",
      "vmin",
      "vw",
      "wavy",
      "whiteSpace",
      "width",
      "woff",
      "woff2",
      "wordSpacing",
      "wrap",
      "wrapReverse",
      "xLarge",
      "xSmall",
      "xxLarge",
      "xxSmall",
      "zIndex"
    ],
    "Tecton.Rule": [],
    "Tecton": []
  },
  "tecton-halogen": {
    "Tecton.Halogen.Internal": [
      "byClass",
      "style",
      "styleSheet"
    ],
    "Tecton.Halogen": []
  },
  "test-unit": {
    "Test.Unit.Assert": [
      "assert",
      "assertFalse",
      "expectFailure",
      "equal",
      "equal'",
      "shouldEqual"
    ],
    "Test.Unit.Console": [],
    "Test.Unit.Main": [
      "runTest",
      "runTestWith",
      "run",
      "exit"
    ],
    "Test.Unit.Output.Fancy": [
      "runTest"
    ],
    "Test.Unit.Output.Simple": [
      "runTest"
    ],
    "Test.Unit.Output.TAP": [
      "runTest",
      "requested"
    ],
    "Test.Unit.QuickCheck": [
      "quickCheck",
      "quickCheck'"
    ],
    "Test.Unit": [
      "success",
      "failure",
      "timeout",
      "test",
      "testOnly",
      "testSkip",
      "suite",
      "suiteOnly",
      "suiteSkip",
      "walkSuite",
      "filterTests",
      "collectTests",
      "collectResults",
      "countSkippedTests",
      "keepErrors",
      "describe",
      "it"
    ]
  },
  "thermite": {
    "Thermite": [
      "defaultPerformAction",
      "defaultRender",
      "writeState",
      "modifyState",
      "_performAction",
      "_render",
      "createClass",
      "createReactConstructor",
      "withState",
      "withProps",
      "focus",
      "focusState",
      "match",
      "split",
      "foreach",
      "cmapProps"
    ]
  },
  "thermite-dom": {
    "Thermite.DOM": []
  },
  "these": {
    "Data.Align": [],
    "Data.These.Gen": [],
    "Data.These": [],
    "Test.QuickCheck.Laws.Control.Align": [],
    "Test.QuickCheck.Laws.Control.Alignable": [],
    "Test.QuickCheck.Laws.Control.Crosswalk": []
  },
  "toppokki": {
    "Toppokki": []
  },
  "transformers": {
    "Control.Comonad.Env.Class": [],
    "Control.Comonad.Env.Trans": [],
    "Control.Comonad.Env": [
      "runEnv",
      "withEnv",
      "mapEnv",
      "env"
    ],
    "Control.Comonad.Store.Class": [],
    "Control.Comonad.Store.Trans": [],
    "Control.Comonad.Store": [
      "runStore",
      "store"
    ],
    "Control.Comonad.Traced.Class": [],
    "Control.Comonad.Traced.Trans": [],
    "Control.Comonad.Traced": [
      "runTraced",
      "traced"
    ],
    "Control.Comonad.Trans.Class": [],
    "Control.Monad.Cont.Class": [
      "callCC"
    ],
    "Control.Monad.Cont.Trans": [
      "runContT",
      "mapContT",
      "withContT"
    ],
    "Control.Monad.Cont": [
      "cont",
      "runCont",
      "mapCont",
      "withCont"
    ],
    "Control.Monad.Error.Class": [],
    "Control.Monad.Except.Trans": [
      "runExceptT",
      "withExceptT",
      "mapExceptT",
      "except"
    ],
    "Control.Monad.Except": [
      "runExcept",
      "mapExcept",
      "withExcept"
    ],
    "Control.Monad.Identity.Trans": [],
    "Control.Monad.List.Trans": [
      "catMaybes",
      "cons",
      "drop",
      "dropWhile",
      "filter",
      "foldl",
      "foldlRec",
      "foldl'",
      "foldlRec'",
      "fromEffect",
      "head",
      "iterate",
      "mapMaybe",
      "nil",
      "prepend",
      "prepend'",
      "repeat",
      "runListT",
      "runListTRec",
      "scanl",
      "singleton",
      "tail",
      "take",
      "takeWhile",
      "uncons",
      "unfold",
      "wrapEffect",
      "wrapLazy",
      "zipWith",
      "zipWith'"
    ],
    "Control.Monad.Maybe.Trans": [
      "runMaybeT",
      "mapMaybeT"
    ],
    "Control.Monad.Reader.Class": [],
    "Control.Monad.Reader.Trans": [
      "runReaderT",
      "withReaderT",
      "mapReaderT"
    ],
    "Control.Monad.Reader": [
      "runReader",
      "mapReader",
      "withReader"
    ],
    "Control.Monad.RWS.Trans": [
      "runRWST",
      "evalRWST",
      "execRWST",
      "mapRWST",
      "withRWST"
    ],
    "Control.Monad.RWS": [
      "rws",
      "runRWS",
      "evalRWS",
      "execRWS",
      "mapRWS",
      "withRWS"
    ],
    "Control.Monad.State.Class": [],
    "Control.Monad.State.Trans": [
      "runStateT",
      "evalStateT",
      "execStateT",
      "mapStateT",
      "withStateT"
    ],
    "Control.Monad.State": [
      "runState",
      "evalState",
      "execState",
      "mapState",
      "withState"
    ],
    "Control.Monad.Trans.Class": [],
    "Control.Monad.Writer.Class": [],
    "Control.Monad.Writer.Trans": [
      "runWriterT",
      "execWriterT",
      "mapWriterT"
    ],
    "Control.Monad.Writer": [
      "writer",
      "runWriter",
      "execWriter",
      "mapWriter"
    ]
  },
  "tree-rose": {
    "Data.Tree.Zipper": [],
    "Data.Tree": []
  },
  "tuples": {
    "Data.Tuple.Nested": [],
    "Data.Tuple": []
  },
  "two-or-more": {
    "Data.TwoOrMore": [
      "twoOrMore",
      "fromArray",
      "pushFront",
      "pushBack",
      "toArray",
      "length",
      "head",
      "neck",
      "tail",
      "last",
      "zip",
      "findIndex",
      "mapWithIndex",
      "toNonEmptyArray",
      "index"
    ]
  },
  "type-equality": {
    "Type.Equality": [
      "proof",
      "to",
      "from"
    ]
  },
  "typelevel": {
    "Data.Typelevel.Bool": [
      "trueT",
      "falseT",
      "reifyBool",
      "toBool",
      "not",
      "and",
      "or",
      "xor",
      "imp",
      "eq"
    ],
    "Data.Typelevel.Num.Aliases": [],
    "Data.Typelevel.Num.Ops": [],
    "Data.Typelevel.Num.Reps": [
      "d0",
      "d1",
      "d2",
      "d3",
      "d4",
      "d5",
      "d6",
      "d7",
      "d8",
      "d9"
    ],
    "Data.Typelevel.Num.Sets": [],
    "Data.Typelevel.Num": [],
    "Data.Typelevel.Undefined": [
      "undefined"
    ]
  },
  "typelevel-lists": {
    "Type.Data.List": []
  },
  "typelevel-peano": {
    "Type.Data.Peano.Int.Definition": [],
    "Type.Data.Peano.Int.Parse": [],
    "Type.Data.Peano.Int.TypeAliases": [],
    "Type.Data.Peano.Int": [],
    "Type.Data.Peano.Nat.Definition": [],
    "Type.Data.Peano.Nat.Parse": [],
    "Type.Data.Peano.Nat.TypeAliases": [],
    "Type.Data.Peano.Nat": [],
    "Type.Data.Peano": []
  },
  "typelevel-prelude": {
    "Type.Data.Boolean": [
      "reflectBoolean",
      "reifyBoolean",
      "and",
      "or",
      "not",
      "if_"
    ],
    "Type.Data.Ordering": [
      "reflectOrdering",
      "reifyOrdering",
      "append",
      "invert",
      "equals"
    ],
    "Type.Data.Symbol": [
      "append",
      "compare",
      "uncons",
      "equals"
    ],
    "Type.Function": [],
    "Type.Prelude": [],
    "Type.Row.Homogeneous": [],
    "Type.Row": [],
    "Type.RowList": []
  },
  "typelevel-rows": {
    "Rows.Map": []
  },
  "uint": {
    "Data.UInt.Gen": [],
    "Data.UInt": [
      "fromInt",
      "fromInt'",
      "toInt",
      "toInt'",
      "fromNumber",
      "fromNumber'",
      "toNumber",
      "floor",
      "ceil",
      "round",
      "even",
      "odd",
      "pow",
      "and",
      "or",
      "xor",
      "shl",
      "shr",
      "zshr",
      "complement",
      "toString",
      "fromString"
    ]
  },
  "ulid": {
    "Ulid": [
      "ulid",
      "seededUlid",
      "parseUlid",
      "toString",
      "monotonicFactory"
    ]
  },
  "uncurried-transformers": {
    "Uncurried.Reader": [],
    "Uncurried.ReaderT": [],
    "Uncurried.RWSE": [
      "rwse",
      "runRWSE",
      "evalRWSE",
      "execRWSE",
      "mapRWSE",
      "withRWSE"
    ],
    "Uncurried.RWSET": [
      "rwseT",
      "runRWSET",
      "evalRWSET",
      "execRWSET",
      "hoistRWSET",
      "mapRWSET",
      "withRWSET"
    ],
    "Uncurried.State": [],
    "Uncurried.StateT": [],
    "Uncurried.Writer": [],
    "Uncurried.WriterT": []
  },
  "undefined": {
    "Undefined": []
  },
  "undefined-is-not-a-problem": {
    "Data.Undefined.NoProblem.Closed": [],
    "Data.Undefined.NoProblem.Open": [],
    "Data.Undefined.NoProblem": []
  },
  "unfoldable": {
    "Data.Unfoldable": [
      "unfoldr",
      "replicate",
      "replicateA",
      "none",
      "fromMaybe"
    ],
    "Data.Unfoldable1": [
      "unfoldr1",
      "replicate1",
      "replicate1A",
      "singleton",
      "range",
      "iterateN"
    ]
  },
  "unicode": {
    "Data.CodePoint.Unicode.Internal.Casing": [],
    "Data.CodePoint.Unicode.Internal": [],
    "Data.CodePoint.Unicode": [
      "isAscii",
      "isAsciiLower",
      "isAsciiUpper",
      "isLatin1",
      "isLower",
      "isUpper",
      "isAlpha",
      "isAlphaNum",
      "isLetter",
      "isDigit",
      "isDecDigit",
      "isOctDigit",
      "isHexDigit",
      "isControl",
      "isPrint",
      "isSpace",
      "isSymbol",
      "isSeparator",
      "isPunctuation",
      "isMark",
      "isNumber",
      "digitToInt",
      "hexDigitToInt",
      "decDigitToInt",
      "octDigitToInt",
      "toLower",
      "toUpper",
      "toTitle",
      "caseFold",
      "toLowerSimple",
      "toUpperSimple",
      "toTitleSimple",
      "caseFoldSimple",
      "unicodeCatToGeneralCat",
      "generalCatToInt",
      "generalCatToUnicodeCat",
      "generalCategory"
    ],
    "Data.String.Unicode": [
      "toUpper",
      "toLower",
      "caseFold",
      "caselessMatch",
      "toUpperSimple",
      "toLowerSimple",
      "caseFoldSimple"
    ]
  },
  "unlift": {
    "Control.Monad.Unlift": [],
    "Effect.Aff.Unlift": [],
    "Effect.Unlift": []
  },
  "unordered-collections": {
    "Data.Hashable": [
      "hash",
      "hashRecord"
    ],
    "Data.HashMap": [
      "empty",
      "singleton",
      "lookup",
      "insert",
      "delete",
      "size",
      "isEmpty",
      "member",
      "upsert",
      "insertWith",
      "update",
      "alter",
      "filter",
      "filterWithKey",
      "filterKeys",
      "mapMaybe",
      "mapMaybeWithKey",
      "fromArray",
      "fromFoldable",
      "fromArrayBy",
      "fromFoldableBy",
      "fromFoldableWithIndex",
      "toArrayBy",
      "keys",
      "values",
      "union",
      "unionWith",
      "intersection",
      "intersectionWith",
      "difference",
      "nubHash",
      "debugShow"
    ],
    "Data.HashSet": [
      "empty",
      "singleton",
      "insert",
      "member",
      "delete",
      "map",
      "filter",
      "mapMaybe",
      "union",
      "unions",
      "intersection",
      "difference",
      "size",
      "isEmpty",
      "fromArray",
      "fromFoldable",
      "fromMap",
      "toArray",
      "toMap",
      "toUnfoldable"
    ]
  },
  "unsafe-coerce": {
    "Unsafe.Coerce": [
      "unsafeCoerce"
    ]
  },
  "unsafe-reference": {
    "Unsafe.Reference": [
      "unsafeRefEq",
      "reallyUnsafeRefEq"
    ]
  },
  "untagged-to-tagged": {
    "Data.UntaggedToTagged.Tagged": [],
    "Data.UntaggedToTagged.Untagged": []
  },
  "untagged-union": {
    "Untagged.Castable": [
      "cast"
    ],
    "Untagged.TypeCheck": [
      "hasRuntimeType",
      "newtypeHasRuntimeType",
      "hasRuntimeTypeRecRL",
      "cast"
    ],
    "Untagged.Union": [
      "asOneOf",
      "fromOneOf",
      "toEither1",
      "getLeft",
      "getLeft'",
      "getRight",
      "getRight'",
      "defined",
      "uorToMaybe",
      "maybeToUor",
      "withUor",
      "fromUndefinedOr",
      "reduce"
    ]
  },
  "uri": {
    "URI.AbsoluteURI": [
      "parser",
      "print",
      "_scheme",
      "_hierPart",
      "_query"
    ],
    "URI.Authority": [
      "parser",
      "print",
      "_userInfo",
      "_hosts"
    ],
    "URI.Common": [
      "wrapParser",
      "alpha",
      "alphaNum",
      "unreserved",
      "pctEncoded",
      "subDelims",
      "printEncoded",
      "printEncoded'",
      "decodeURIComponent'"
    ],
    "URI.Extra.MultiHostPortPair": [
      "parser",
      "print"
    ],
    "URI.Extra.QueryPairs": [
      "parse",
      "print",
      "keyPartChar",
      "valuePartChar",
      "keyFromString",
      "keyToString",
      "unsafeKeyFromString",
      "unsafeKeyToString",
      "valueFromString",
      "valueToString",
      "unsafeValueFromString",
      "unsafeValueToString"
    ],
    "URI.Extra.UserPassInfo": [
      "parse",
      "print",
      "userPassInfoChar"
    ],
    "URI.Fragment": [
      "fromString",
      "toString",
      "unsafeFromString",
      "unsafeToString",
      "parser",
      "print",
      "fragmentChar"
    ],
    "URI.HierarchicalPart": [
      "parser",
      "print",
      "_authority",
      "_path",
      "_hierPath"
    ],
    "URI.Host.Gen": [],
    "URI.Host.IPv4Address": [
      "fromInts",
      "unsafeFromInts",
      "parser",
      "print"
    ],
    "URI.Host.IPv6Address": [
      "unsafeFromString",
      "unsafeToString",
      "parser"
    ],
    "URI.Host.RegName": [
      "fromString",
      "toString",
      "unsafeFromString",
      "unsafeToString",
      "parser",
      "print",
      "regNameChar"
    ],
    "URI.Host": [
      "parser",
      "print",
      "_IPv6Address",
      "_IPv4Address",
      "_NameAddress"
    ],
    "URI.HostPortPair.Gen": [
      "genHostPortPair"
    ],
    "URI.HostPortPair": [],
    "URI.Path.Absolute": [],
    "URI.Path.NoScheme": [],
    "URI.Path.Rootless": [],
    "URI.Path.Segment": [
      "segmentFromString",
      "segmentToString",
      "unsafeSegmentFromString",
      "unsafeSegmentToString",
      "parseSegment",
      "printSegment",
      "segmentNZFromString",
      "segmentNZToString",
      "unsafeSegmentNZFromString",
      "unsafeSegmentNZToString",
      "parseSegmentNZ",
      "printSegmentNZ",
      "segmentNZNCFromString",
      "segmentNZNCToString",
      "unsafeSegmentNZNCFromString",
      "unsafeSegmentNZNCToString",
      "parseSegmentNZNC",
      "printSegmentNZNC",
      "segmentChar",
      "segmentNCChar"
    ],
    "URI.Path": [],
    "URI.Port.Gen": [],
    "URI.Port": [
      "toInt",
      "fromInt",
      "unsafeFromInt",
      "parser",
      "print"
    ],
    "URI.Query": [
      "fromString",
      "toString",
      "unsafeFromString",
      "unsafeToString",
      "parser",
      "print",
      "queryChar"
    ],
    "URI.RelativePart": [
      "parser",
      "print",
      "_authority",
      "_path",
      "_relPath"
    ],
    "URI.RelativeRef": [
      "parser",
      "print",
      "_relPart",
      "_query",
      "_fragment"
    ],
    "URI.Scheme.Common": [],
    "URI.Scheme": [
      "fromString",
      "toString",
      "unsafeFromString",
      "parser",
      "print"
    ],
    "URI.URI": [
      "parser",
      "print",
      "_scheme",
      "_hierPart",
      "_query",
      "_fragment"
    ],
    "URI.URIRef": [
      "parser",
      "print"
    ],
    "URI.UserInfo": [
      "fromString",
      "toString",
      "unsafeFromString",
      "unsafeToString",
      "parser",
      "print",
      "userInfoChar"
    ],
    "URI": []
  },
  "uuid": {
    "Data.UUID": [
      "emptyUUID",
      "genUUID",
      "parseUUID",
      "genv3UUID",
      "genv5UUID",
      "toString"
    ]
  },
  "uuidv4": {
    "Data.UUID.Random": [
      "make",
      "make'",
      "toString",
      "fromString"
    ]
  },
  "validation": {
    "Data.Validation.Semigroup": [
      "validation",
      "invalid",
      "isValid",
      "toEither",
      "andThen"
    ],
    "Data.Validation.Semiring": [
      "validation",
      "invalid",
      "isValid",
      "toEither",
      "andThen"
    ]
  },
  "variant": {
    "Data.Functor.Variant": [
      "inj",
      "prj",
      "on",
      "onMatch",
      "over",
      "overOne",
      "overSome",
      "case_",
      "match",
      "default",
      "traverse",
      "traverseOne",
      "traverseSome",
      "expand",
      "contract",
      "unvariantF",
      "revariantF",
      "variantFShows",
      "variantFMaps",
      "traverseVFRL",
      "foldrVFRL",
      "foldlVFRL",
      "foldMapVFRL"
    ],
    "Data.Variant.Internal": [
      "variantTags",
      "contractWith",
      "lookup",
      "lookupTag",
      "lookupEq",
      "lookupOrd",
      "lookupLast",
      "lookupFirst",
      "lookupPred",
      "lookupSucc",
      "lookupCardinality",
      "lookupFromEnum",
      "lookupToEnum",
      "impossible"
    ],
    "Data.Variant": [
      "inj",
      "prj",
      "on",
      "onMatch",
      "over",
      "overOne",
      "overSome",
      "case_",
      "match",
      "default",
      "traverse",
      "traverseOne",
      "traverseSome",
      "expand",
      "contract",
      "unvariant",
      "revariant",
      "variantEqs",
      "variantOrds",
      "variantShows",
      "variantBounded",
      "variantBoundedEnums"
    ]
  },
  "vectorfield": {
    "Data.VectorField": []
  },
  "vectors": {
    "Data.Vector2": [
      "vec",
      "oneX",
      "oneY",
      "unVec",
      "getX",
      "getY",
      "swap",
      "vdiv",
      "vmod",
      "half",
      "twice",
      "setX",
      "setY",
      "modifyX",
      "modifyY",
      "_x",
      "_y"
    ],
    "Data.Vector3": [
      "vec",
      "oneX",
      "oneY",
      "oneZ",
      "unVec",
      "getX",
      "getY",
      "getZ",
      "rotRight",
      "rotLeft",
      "vdiv",
      "vmod",
      "half",
      "twice",
      "setX",
      "setY",
      "setZ",
      "modifyX",
      "modifyY",
      "modifyZ",
      "_x",
      "_y",
      "_z"
    ]
  },
  "versions": {
    "Data.Version.Haskell": [],
    "Data.Version.Internal": [],
    "Data.Version": [
      "version",
      "runVersion",
      "major",
      "minor",
      "patch",
      "preRelease",
      "buildMetadata",
      "isPreRelease",
      "bumpMajor",
      "bumpMinor",
      "bumpPatch",
      "textual",
      "numeric",
      "showVersion",
      "parseVersion",
      "versionParser"
    ]
  },
  "visx": {
    "D3.Format": [],
    "D3.TimeFormat": [],
    "Topojson.Client": [],
    "VISX.Annotation": [],
    "VISX.Axis": [
      "axis",
      "axisBottom",
      "labelProps",
      "axisLeft",
      "axisRight",
      "axisTop"
    ],
    "VISX.Curve": [],
    "VISX.FFI": [
      "write",
      "read",
      "read'",
      "read_",
      "undefined",
      "readImpl",
      "getFields",
      "writeImpl",
      "writeImplFields",
      "toOptions"
    ],
    "VISX.Glyph": [],
    "VISX.Grid": [],
    "VISX.Interaction.Brush": [],
    "VISX.Interaction.Drag": [],
    "VISX.Interaction.Voronoi": [],
    "VISX.Interaction.Zoom": [],
    "VISX.Layout.Chord": [],
    "VISX.Layout.Geo": [],
    "VISX.Layout.Heatmap": [],
    "VISX.Layout.Hierarchy": [],
    "VISX.Layout.Network": [],
    "VISX.Layout.Stats": [],
    "VISX.Layout.Threshold": [],
    "VISX.Layout.XYChart": [],
    "VISX.Legend": [],
    "VISX.Marker": [],
    "VISX.Scale": [
      "scaled",
      "invert",
      "scaleLinear",
      "scaleTime",
      "scaleQuantize",
      "scaleOrdinal",
      "scaleBand",
      "bandwidth"
    ],
    "VISX.Shape": [],
    "VISX.Tooltip": [],
    "VISX.Util.Data.Bounds": [],
    "VISX.Util.Data.MockData": [],
    "VISX.Util.Data.Point": [],
    "VISX.Util.Data.Responsive": [
      "parentSize",
      "scaleSVG",
      "withParentSize",
      "withParentSizeModern",
      "withScreenSize"
    ],
    "VISX.Util.SVG.ClipPath": [],
    "VISX.Util.SVG.Event": [],
    "VISX.Util.SVG.Gradient": [
      "gradientDarkgreenGreen",
      "gradientLightgreenGreen",
      "gradientOrangeRed",
      "gradientPinkBlue",
      "gradientPinkRed",
      "gradientPurpleOrange",
      "gradientPurpleRed",
      "gradientPurpleTeal",
      "gradientSteelPurple",
      "gradientTealBlue",
      "linearGradient",
      "radialGradient"
    ],
    "VISX.Util.SVG.Group": [
      "group"
    ],
    "VISX.Util.SVG.Pattern": [
      "pattern",
      "circles",
      "lines",
      "horizontal",
      "vertical",
      "diagonal",
      "diagonalLeftToRight"
    ]
  },
  "web-clipboard": {
    "Web.Clipboard": [],
    "Web.Clipboard.ClipboardEvent.EventTypes": [],
    "Web.Clipboard.ClipboardEvent": [
      "fromEvent",
      "toEvent",
      "clipboardData"
    ]
  },
  "web-cssom": {
    "Web.CSSOM.CSSStyleDeclaration": [
      "length",
      "getPropertyPriority",
      "getPropertyValue",
      "removeProperty",
      "setProperty"
    ],
    "Web.DOM.CSSStyleSheet": [
      "disabled",
      "setDisabled",
      "toggleDisabled",
      "href",
      "ownerNode",
      "parentStyleSheet",
      "title",
      "typeString"
    ],
    "Web.CSSOM.ElementCSSInlineStyle": [
      "style",
      "fromHTMLElement"
    ],
    "Web.CSSOM.Internal.Types": [],
    "Web.CSSOM.MouseEvent": [
      "offsetX",
      "offsetY"
    ],
    "Web.DOM.StyleSheetList": [
      "length",
      "item",
      "toArray"
    ],
    "Web.CSSOM": [
      "getStyleSheets"
    ]
  },
  "web-dom": {
    "Web.DOM.CharacterData": [],
    "Web.DOM.ChildNode": [],
    "Web.DOM.Comment": [],
    "Web.DOM.Document": [
      "fromNode",
      "fromParentNode",
      "fromNonElementParentNode",
      "fromEventTarget",
      "toNode",
      "toParentNode",
      "toNonElementParentNode",
      "toEventTarget",
      "url",
      "documentURI",
      "origin",
      "compatMode",
      "characterSet",
      "contentType",
      "doctype",
      "documentElement",
      "getElementsByTagName",
      "getElementsByTagNameNS",
      "getElementsByClassName",
      "createElement",
      "createElementNS",
      "createDocumentFragment",
      "createTextNode",
      "createComment",
      "createProcessingInstruction",
      "importNode",
      "adoptNode"
    ],
    "Web.DOM.DocumentFragment": [],
    "Web.DOM.DocumentType": [],
    "Web.DOM.DOMTokenList": [
      "add",
      "contains",
      "item",
      "remove",
      "toggle",
      "toggleForce"
    ],
    "Web.DOM.Element": [
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "namespaceURI",
      "prefix",
      "localName",
      "tagName",
      "id",
      "setId",
      "className",
      "classList",
      "setClassName",
      "getElementsByTagName",
      "getElementsByTagNameNS",
      "getElementsByClassName",
      "setAttribute",
      "getAttribute",
      "hasAttribute",
      "removeAttribute",
      "matches",
      "closest",
      "scrollTop",
      "setScrollTop",
      "scrollLeft",
      "setScrollLeft",
      "scrollWidth",
      "scrollHeight",
      "clientTop",
      "clientLeft",
      "clientWidth",
      "clientHeight",
      "getBoundingClientRect",
      "attachShadow"
    ],
    "Web.DOM.HTMLCollection": [
      "length",
      "item",
      "namedItem",
      "toArray"
    ],
    "Web.DOM.Internal.Types": [],
    "Web.DOM.MutationObserver": [
      "mutationObserver",
      "observe",
      "disconnect",
      "takeRecords"
    ],
    "Web.DOM.MutationRecord": [
      "typeString",
      "type_",
      "target",
      "addedNodes",
      "removedNodes",
      "nextSibling",
      "previousSibling",
      "attributeName",
      "attributeNamespace",
      "oldValue"
    ],
    "Web.DOM.Node": [
      "fromEventTarget",
      "toEventTarget",
      "nodeType",
      "nodeTypeIndex",
      "nodeName",
      "baseURI",
      "ownerDocument",
      "parentNode",
      "parentElement",
      "hasChildNodes",
      "childNodes",
      "firstChild",
      "lastChild",
      "previousSibling",
      "nextSibling",
      "nodeValue",
      "setNodeValue",
      "textContent",
      "setTextContent",
      "normalize",
      "clone",
      "deepClone",
      "isEqualNode",
      "compareDocumentPositionBits",
      "contains",
      "lookupPrefix",
      "lookupNamespaceURI",
      "isDefaultNamespace",
      "insertBefore",
      "appendChild",
      "replaceChild",
      "removeChild"
    ],
    "Web.DOM.NodeList": [
      "length",
      "item",
      "toArray"
    ],
    "Web.DOM.NodeType": [],
    "Web.DOM.NonDocumentTypeChildNode": [
      "previousElementSibling",
      "nextElementSibling"
    ],
    "Web.DOM.NonElementParentNode": [
      "getElementById"
    ],
    "Web.DOM.ParentNode": [
      "children",
      "firstElementChild",
      "lastElementChild",
      "childElementCount",
      "querySelector",
      "querySelectorAll"
    ],
    "Web.DOM.ProcessingInstruction": [],
    "Web.DOM.ShadowRoot": [
      "toNode",
      "host",
      "mode"
    ],
    "Web.DOM.Text": [],
    "Web.DOM": []
  },
  "web-dom-parser": {
    "Web.DOM.DOMParser": [
      "makeDOMParser",
      "parseFromString",
      "parseHTMLFromString",
      "parseSVGFromString",
      "parseXMLFromString",
      "_getParserError"
    ],
    "Web.DOM.XMLSerializer": [
      "makeXMLSerializer",
      "serializeToString"
    ]
  },
  "web-dom-xpath": {
    "Web.DOM.Document.XPath.ResultType": [],
    "Web.DOM.Document.XPath": []
  },
  "web-encoding": {
    "Web.Encoding.TextDecoder": [],
    "Web.Encoding.TextEncoder": [],
    "Web.Encoding.UtfLabel": []
  },
  "web-events": {
    "Web.Event.CustomEvent": [],
    "Web.Event.Event": [
      "type_",
      "target",
      "currentTarget",
      "eventPhase",
      "stopPropagation",
      "stopImmediatePropagation",
      "bubbles",
      "cancelable",
      "preventDefault",
      "defaultPrevented",
      "timeStamp"
    ],
    "Web.Event.EventPhase": [],
    "Web.Event.EventTarget": [
      "eventListener",
      "addEventListener",
      "addEventListenerWithOptions",
      "removeEventListener",
      "dispatchEvent"
    ],
    "Web.Event.Internal.Types": [],
    "Web.Internal.FFI": [
      "unsafeReadProtoTagged"
    ]
  },
  "web-fetch": {
    "Web.Fetch.AbortController": [],
    "Web.Fetch.Headers": [
      "fromFoldable",
      "fromRecord",
      "fromObject",
      "toArray",
      "toUnfoldable",
      "empty"
    ],
    "Web.Fetch.Integrity": [],
    "Web.Fetch.Referrer": [],
    "Web.Fetch.ReferrerPolicy": [],
    "Web.Fetch.Request": [
      "new",
      "new'",
      "unsafeNew",
      "buildRequestOptions",
      "defaultOptions",
      "defaultUnsafeOptions",
      "convertOptions",
      "convertOption"
    ],
    "Web.Fetch.RequestBody": [],
    "Web.Fetch.RequestCache": [],
    "Web.Fetch.RequestCredentials": [],
    "Web.Fetch.RequestMode": [],
    "Web.Fetch.RequestRedirect": [],
    "Web.Fetch.Response": [],
    "Web.Fetch": [
      "fetch",
      "fetchWithOptions"
    ]
  },
  "web-file": {
    "Web.File.Blob": [
      "fromString",
      "fromArray",
      "type_",
      "size",
      "idxFromInt",
      "idxFromNumber",
      "slice",
      "slice'"
    ],
    "Web.File.File": [],
    "Web.File.FileList": [
      "length",
      "item",
      "items"
    ],
    "Web.File.FileReader.ReadyState": [],
    "Web.File.FileReader": [
      "fromEventTarget",
      "toEventTarget",
      "fileReader",
      "error",
      "readyState",
      "result",
      "abort",
      "readAsText",
      "readAsArrayBuffer",
      "readAsDataURL"
    ],
    "Web.File.Url": [
      "createObjectURL",
      "revokeObjectURL"
    ]
  },
  "web-html": {
    "Web.HTML.Common": [],
    "Web.HTML.Event.BeforeUnloadEvent.EventTypes": [],
    "Web.HTML.Event.BeforeUnloadEvent": [],
    "Web.HTML.Event.DataTransfer.DataTransferItem": [
      "dataTransferItem",
      "kind",
      "length",
      "type_"
    ],
    "Web.HTML.Event.DataTransfer": [
      "files",
      "items",
      "types",
      "getData",
      "setData",
      "setDragImage",
      "dropEffect",
      "setDropEffect"
    ],
    "Web.HTML.Event.DragEvent.EventTypes": [],
    "Web.HTML.Event.DragEvent": [],
    "Web.HTML.Event.ErrorEvent": [],
    "Web.HTML.Event.EventTypes": [],
    "Web.HTML.Event.HashChangeEvent.EventTypes": [],
    "Web.HTML.Event.HashChangeEvent": [],
    "Web.HTML.Event.PageTransitionEvent.EventTypes": [],
    "Web.HTML.Event.PageTransitionEvent": [],
    "Web.HTML.Event.PopStateEvent.EventTypes": [],
    "Web.HTML.Event.PopStateEvent": [],
    "Web.HTML.Event.TrackEvent.EventTypes": [],
    "Web.HTML.Event.TrackEvent": [],
    "Web.HTML.History": [],
    "Web.HTML.HTMLAnchorElement": [],
    "Web.HTML.HTMLAreaElement": [],
    "Web.HTML.HTMLAudioElement": [
      "fromHTMLMediaElement",
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLMediaElement",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "create",
      "create'"
    ],
    "Web.HTML.HTMLBaseElement": [],
    "Web.HTML.HTMLBodyElement": [],
    "Web.HTML.HTMLBRElement": [],
    "Web.HTML.HTMLButtonElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "autofocus",
      "setAutofocus",
      "disabled",
      "setDisabled",
      "form",
      "formAction",
      "setFormAction",
      "formEnctype",
      "setFormEnctype",
      "formMethod",
      "setFormMethod",
      "formNoValidate",
      "setFormNoValidate",
      "formTarget",
      "setFormTarget",
      "name",
      "setName",
      "type_",
      "setType",
      "value",
      "setValue",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels"
    ],
    "Web.HTML.HTMLCanvasElement": [],
    "Web.HTML.HTMLDataElement": [],
    "Web.HTML.HTMLDataListElement": [],
    "Web.HTML.HTMLDivElement": [],
    "Web.HTML.HTMLDListElement": [],
    "Web.HTML.HTMLDocument.ReadyState": [],
    "Web.HTML.HTMLDocument.VisibilityState": [],
    "Web.HTML.HTMLDocument": [
      "fromDocument",
      "fromNode",
      "fromParentNode",
      "fromNonElementParentNode",
      "fromEventTarget",
      "toDocument",
      "toNode",
      "toParentNode",
      "toNonElementParentNode",
      "toEventTarget",
      "documentElement",
      "head",
      "body",
      "readyState",
      "visibilityState",
      "activeElement",
      "currentScript",
      "referrer",
      "title",
      "setTitle"
    ],
    "Web.HTML.HTMLElement": [
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "title",
      "setTitle",
      "lang",
      "setLang",
      "dir",
      "setDir",
      "hidden",
      "setHidden",
      "tabIndex",
      "setTabIndex",
      "draggable",
      "setDraggable",
      "contentEditable",
      "setContentEditable",
      "isContentEditable",
      "spellcheck",
      "setSpellcheck",
      "click",
      "focus",
      "blur",
      "offsetParent",
      "offsetTop",
      "offsetLeft",
      "offsetWidth",
      "offsetHeight"
    ],
    "Web.HTML.HTMLEmbedElement": [],
    "Web.HTML.HTMLFieldSetElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "disabled",
      "setDisabled",
      "form",
      "name",
      "setName",
      "type_",
      "setType",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity"
    ],
    "Web.HTML.HTMLFormElement": [],
    "Web.HTML.HTMLHeadElement": [],
    "Web.HTML.HTMLHeadingElement": [],
    "Web.HTML.HTMLHRElement": [],
    "Web.HTML.HTMLHtmlElement": [],
    "Web.HTML.HTMLHyperlinkElementUtils": [],
    "Web.HTML.HTMLIFrameElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "src",
      "setSrc",
      "srcdoc",
      "setSrcdoc",
      "name",
      "setName",
      "width",
      "setWidth",
      "height",
      "setHeight",
      "contentDocument",
      "contentWindow"
    ],
    "Web.HTML.HTMLImageElement.CORSMode": [
      "parse",
      "print"
    ],
    "Web.HTML.HTMLImageElement.DecodingHint": [
      "parse",
      "print"
    ],
    "Web.HTML.HTMLImageElement.Laziness": [
      "parse",
      "print"
    ],
    "Web.HTML.HTMLImageElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "create",
      "create'",
      "alt",
      "setAlt",
      "src",
      "setSrc",
      "srcset",
      "setSrcset",
      "currentSrc",
      "sizes",
      "setSizes",
      "crossOrigin",
      "setCrossOrigin",
      "useMap",
      "setUseMap",
      "isMap",
      "setIsMap",
      "width",
      "setWidth",
      "height",
      "setHeight",
      "naturalWidth",
      "naturalHeight",
      "referrerPolicy",
      "setReferrerPolicy",
      "decoding",
      "setDecoding",
      "loading",
      "setLoading",
      "complete"
    ],
    "Web.HTML.HTMLInputElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "accept",
      "setAccept",
      "alt",
      "setAlt",
      "autocomplete",
      "setAutocomplete",
      "autofocus",
      "setAutofocus",
      "defaultChecked",
      "setDefaultChecked",
      "checked",
      "setChecked",
      "dirName",
      "setDirName",
      "disabled",
      "setDisabled",
      "form",
      "files",
      "formAction",
      "setFormAction",
      "formEnctype",
      "setFormEnctype",
      "formMethod",
      "setFormMethod",
      "formNoValidate",
      "setFormNoValidate",
      "formTarget",
      "setFormTarget",
      "height",
      "setHeight",
      "indeterminate",
      "setIndeterminate",
      "list",
      "max",
      "setMax",
      "maxLength",
      "setMaxLength",
      "min",
      "setMin",
      "minLength",
      "setMinLength",
      "multiple",
      "setMultiple",
      "name",
      "setName",
      "pattern",
      "setPattern",
      "placeholder",
      "setPlaceholder",
      "readOnly",
      "setReadOnly",
      "required",
      "setRequired",
      "size",
      "setSize",
      "src",
      "setSrc",
      "step",
      "setStep",
      "type_",
      "setType",
      "defaultValue",
      "setDefaultValue",
      "value",
      "setValue",
      "valueAsDate",
      "setValueAsDate",
      "valueAsNumber",
      "setValueAsNumber",
      "width",
      "setWidth",
      "stepUp",
      "stepUp'",
      "stepDown",
      "stepDown'",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels",
      "select",
      "selectionStart",
      "setSelectionStart",
      "selectionEnd",
      "setSelectionEnd",
      "selectionDirection",
      "setSelectionDirection",
      "setRangeText",
      "setRangeText'",
      "setSelectionRange"
    ],
    "Web.HTML.HTMLKeygenElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "autofocus",
      "setAutofocus",
      "challenge",
      "setChallenge",
      "disabled",
      "setDisabled",
      "form",
      "keytype",
      "setKeytype",
      "name",
      "setName",
      "type_",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels"
    ],
    "Web.HTML.HTMLLabelElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "form",
      "htmlFor",
      "setHtmlFor",
      "control"
    ],
    "Web.HTML.HTMLLegendElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "form"
    ],
    "Web.HTML.HTMLLIElement": [],
    "Web.HTML.HTMLLinkElement": [],
    "Web.HTML.HTMLMapElement": [],
    "Web.HTML.HTMLMediaElement.CanPlayType": [],
    "Web.HTML.HTMLMediaElement.NetworkState": [],
    "Web.HTML.HTMLMediaElement.ReadyState": [],
    "Web.HTML.HTMLMediaElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "src",
      "setSrc",
      "currentSrc",
      "crossOrigin",
      "setCrossOrigin",
      "networkState",
      "preload",
      "setPreload",
      "load",
      "canPlayType",
      "readyState",
      "seeking",
      "currentTime",
      "setCurrentTime",
      "duration",
      "getStartDate",
      "paused",
      "defaultPlaybackRate",
      "setDefaultPlaybackRate",
      "playbackRate",
      "setPlaybackRate",
      "ended",
      "autoplay",
      "setAutoplay",
      "loop",
      "setLoop",
      "play",
      "pause",
      "mediaGroup",
      "setMediaGroup",
      "controls",
      "setControls",
      "volume",
      "setVolume",
      "muted",
      "setMuted",
      "defaultMuted",
      "setDefaultMuted"
    ],
    "Web.HTML.HTMLMetaElement": [],
    "Web.HTML.HTMLMeterElement": [],
    "Web.HTML.HTMLModElement": [],
    "Web.HTML.HTMLObjectElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "data_",
      "setData",
      "type_",
      "setType",
      "typeMustMatch",
      "name",
      "setName",
      "useMap",
      "setUseMap",
      "form",
      "width",
      "setWidth",
      "height",
      "setHeight",
      "contentDocument",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity"
    ],
    "Web.HTML.HTMLOListElement": [],
    "Web.HTML.HTMLOptGroupElement": [],
    "Web.HTML.HTMLOptionElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "disabled",
      "setDisabled",
      "form",
      "label",
      "setLabel",
      "defaultSelected",
      "setDefaultSelected",
      "selected",
      "setSelected",
      "value",
      "setValue",
      "text",
      "setText",
      "index"
    ],
    "Web.HTML.HTMLOutputElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "form",
      "name",
      "setName",
      "type_",
      "defaultValue",
      "setDefaultValue",
      "value",
      "setValue",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels"
    ],
    "Web.HTML.HTMLParagraphElement": [],
    "Web.HTML.HTMLParamElement": [],
    "Web.HTML.HTMLPreElement": [],
    "Web.HTML.HTMLProgressElement": [],
    "Web.HTML.HTMLQuoteElement": [],
    "Web.HTML.HTMLScriptElement": [],
    "Web.HTML.HTMLSelectElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "autofocus",
      "setAutofocus",
      "disabled",
      "setDisabled",
      "form",
      "multiple",
      "setMultiple",
      "name",
      "setName",
      "required",
      "setRequired",
      "size",
      "setSize",
      "type_",
      "length",
      "setLength",
      "selectedOptions",
      "selectedIndex",
      "setSelectedIndex",
      "value",
      "setValue",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels"
    ],
    "Web.HTML.HTMLSourceElement": [],
    "Web.HTML.HTMLSpanElement": [],
    "Web.HTML.HTMLStyleElement": [],
    "Web.HTML.HTMLTableCaptionElement": [],
    "Web.HTML.HTMLTableCellElement": [],
    "Web.HTML.HTMLTableColElement": [],
    "Web.HTML.HTMLTableDataCellElement": [],
    "Web.HTML.HTMLTableElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "caption",
      "setCaption",
      "createCaption",
      "deleteCaption",
      "tHead",
      "setTHead",
      "createTHead",
      "deleteTHead",
      "tFoot",
      "setTFoot",
      "createTFoot",
      "deleteTFoot",
      "tBodies",
      "createTBody",
      "rows",
      "insertRow",
      "insertRow'",
      "deleteRow",
      "border",
      "setBorder"
    ],
    "Web.HTML.HTMLTableHeaderCellElement": [],
    "Web.HTML.HTMLTableRowElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "rowIndex",
      "sectionRowIndex",
      "cells",
      "insertCell",
      "insertCell'",
      "deleteCell"
    ],
    "Web.HTML.HTMLTableSectionElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "rows",
      "insertRow",
      "insertRow'",
      "deleteRow"
    ],
    "Web.HTML.HTMLTemplateElement": [],
    "Web.HTML.HTMLTextAreaElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "autocomplete",
      "setAutocomplete",
      "autofocus",
      "setAutofocus",
      "cols",
      "setCols",
      "dirName",
      "setDirName",
      "disabled",
      "setDisabled",
      "form",
      "maxLength",
      "setMaxLength",
      "minLength",
      "setMinLength",
      "name",
      "setName",
      "placeholder",
      "setPlaceholder",
      "readOnly",
      "setReadOnly",
      "required",
      "setRequired",
      "rows",
      "setRows",
      "wrap",
      "setWrap",
      "type_",
      "defaultValue",
      "setDefaultValue",
      "value",
      "setValue",
      "textLength",
      "willValidate",
      "validity",
      "validationMessage",
      "checkValidity",
      "reportValidity",
      "setCustomValidity",
      "labels",
      "select",
      "selectionStart",
      "setSelectionStart",
      "selectionEnd",
      "setSelectionEnd",
      "selectionDirection",
      "setSelectionDirection",
      "setRangeText",
      "setRangeText'",
      "setSelectionRange"
    ],
    "Web.HTML.HTMLTimeElement": [],
    "Web.HTML.HTMLTitleElement": [],
    "Web.HTML.HTMLTrackElement.ReadyState": [],
    "Web.HTML.HTMLTrackElement": [
      "fromHTMLElement",
      "fromElement",
      "fromNode",
      "fromChildNode",
      "fromNonDocumentTypeChildNode",
      "fromParentNode",
      "fromEventTarget",
      "toHTMLElement",
      "toElement",
      "toNode",
      "toChildNode",
      "toNonDocumentTypeChildNode",
      "toParentNode",
      "toEventTarget",
      "kind",
      "setKind",
      "src",
      "setSrc",
      "srclang",
      "setSrclang",
      "label",
      "setLabel",
      "default",
      "setDefault",
      "readyState"
    ],
    "Web.HTML.HTMLUListElement": [],
    "Web.HTML.HTMLVideoElement": [],
    "Web.HTML.Location": [
      "hash",
      "setHash",
      "host",
      "setHost",
      "hostname",
      "setHostname",
      "href",
      "setHref",
      "origin",
      "setOrigin",
      "pathname",
      "setPathname",
      "port",
      "setPort",
      "protocol",
      "setProtocol",
      "search",
      "setSearch",
      "assign",
      "replace",
      "reload"
    ],
    "Web.HTML.Navigator": [],
    "Web.HTML.SelectionMode": [],
    "Web.HTML.ValidityState": [
      "valueMissing",
      "typeMismatch",
      "patternMismatch",
      "tooLong",
      "tooShort",
      "rangeUnderflow",
      "rangeOverflow",
      "stepMismatch",
      "badInput",
      "customError",
      "valid"
    ],
    "Web.HTML.Window": [
      "toEventTarget",
      "fromEventTarget",
      "document",
      "navigator",
      "location",
      "history",
      "innerWidth",
      "innerHeight",
      "alert",
      "confirm",
      "moveBy",
      "moveTo",
      "open",
      "close",
      "outerHeight",
      "outerWidth",
      "print",
      "prompt",
      "promptDefault",
      "resizeBy",
      "resizeTo",
      "screenX",
      "screenY",
      "scroll",
      "scrollBy",
      "scrollX",
      "scrollY",
      "localStorage",
      "sessionStorage",
      "requestAnimationFrame",
      "cancelAnimationFrame",
      "requestIdleCallback",
      "cancelIdleCallback",
      "parent",
      "opener"
    ],
    "Web.HTML": [
      "window"
    ]
  },
  "web-pointerevents": {
    "Web.PointerEvent.Element": [
      "hasPointerCapture",
      "releasePointerCapture",
      "setPointerCapture"
    ],
    "Web.PointerEvent.EventTypes": [
      "gotpointercapture",
      "lostpointercapture",
      "pointercancel",
      "pointerdown",
      "pointerenter",
      "pointerleave",
      "pointermove",
      "pointerout",
      "pointerover",
      "pointerup"
    ],
    "Web.PointerEvent.Navigator": [],
    "Web.PointerEvent.PointerEvent": [
      "altitudeAngle",
      "azimuthAngle",
      "fromEvent",
      "fromMouseEvent",
      "fromUIEvent",
      "getCoalescedEvents",
      "getPredictedEvents",
      "height",
      "isPrimary",
      "pointerId",
      "pointerType",
      "pressure",
      "tiltX",
      "tiltY",
      "toEvent",
      "toMouseEvent",
      "toUIEvent",
      "twist",
      "width"
    ],
    "Web.PointerEvent": []
  },
  "web-proletarian": {
    "Yoga.WebBoss": [],
    "Yoga.WebProletarian.Types": [],
    "Yoga.WebWorker": []
  },
  "web-promise": {
    "Web.Promise.Internal": [],
    "Web.Promise.Lazy": [],
    "Web.Promise.Rejection": [
      "fromError",
      "toError"
    ],
    "Web.Promise": []
  },
  "web-resize-observer": {
    "Web.ResizeObserver": [
      "resizeObserver",
      "observe",
      "unobserve",
      "disconnect"
    ]
  },
  "web-router": {
    "Web.Router.Hash": [],
    "Web.Router.Internal.Control": [],
    "Web.Router.Internal.Types": [],
    "Web.Router.PushState": [],
    "Web.Router": [
      "mkInterface"
    ]
  },
  "web-socket": {
    "Web.Socket.BinaryType": [],
    "Web.Socket.Event.CloseEvent": [],
    "Web.Socket.Event.EventTypes": [],
    "Web.Socket.Event.MessageEvent": [],
    "Web.Socket.ReadyState": [],
    "Web.Socket.WebSocket": [
      "fromEventTarget",
      "toEventTarget",
      "create",
      "url",
      "readyState",
      "bufferedAmount",
      "extensions",
      "protocol",
      "close",
      "getBinaryType",
      "setBinaryType",
      "sendString",
      "sendBlob",
      "sendArrayBuffer",
      "sendArrayBufferView"
    ]
  },
  "web-storage": {
    "Web.Storage.Event.StorageEvent": [
      "fromEvent",
      "toEvent",
      "key",
      "oldValue",
      "newValue",
      "url",
      "storageArea"
    ],
    "Web.Storage.Storage": [
      "length",
      "key",
      "getItem",
      "setItem",
      "removeItem",
      "clear"
    ]
  },
  "web-streams": {
    "Web.Streams.QueuingStrategy": [],
    "Web.Streams.ReadableStream": [
      "new",
      "cancel",
      "locked",
      "getReader",
      "tee"
    ],
    "Web.Streams.ReadableStreamController": [],
    "Web.Streams.Reader": [],
    "Web.Streams.Source": [
      "make"
    ]
  },
  "web-touchevents": {
    "Web.TouchEvent.EventTypes": [],
    "Web.TouchEvent.Touch": [],
    "Web.TouchEvent.TouchEvent": [],
    "Web.TouchEvent.TouchList": [
      "length",
      "item"
    ],
    "Web.TouchEvent": []
  },
  "web-uievents": {
    "Web.UIEvent.CompositionEvent.EventTypes": [],
    "Web.UIEvent.CompositionEvent": [],
    "Web.UIEvent.EventTypes": [],
    "Web.UIEvent.FocusEvent.EventTypes": [],
    "Web.UIEvent.FocusEvent": [
      "fromUIEvent",
      "fromEvent",
      "toUIEvent",
      "toEvent",
      "relatedTarget"
    ],
    "Web.UIEvent.InputEvent.EventTypes": [],
    "Web.UIEvent.InputEvent": [],
    "Web.UIEvent.KeyboardEvent.EventTypes": [],
    "Web.UIEvent.KeyboardEvent": [
      "fromUIEvent",
      "fromEvent",
      "toUIEvent",
      "toEvent",
      "key",
      "code",
      "locationIndex",
      "location",
      "toEnumKeyLocation",
      "fromEnumKeyLocation",
      "ctrlKey",
      "shiftKey",
      "altKey",
      "metaKey",
      "repeat",
      "isComposing",
      "getModifierState"
    ],
    "Web.UIEvent.MouseEvent.EventTypes": [],
    "Web.UIEvent.MouseEvent": [
      "fromUIEvent",
      "fromEvent",
      "toUIEvent",
      "toEvent",
      "screenX",
      "screenY",
      "clientX",
      "clientY",
      "pageX",
      "pageY",
      "ctrlKey",
      "shiftKey",
      "altKey",
      "metaKey",
      "button",
      "relatedTarget",
      "buttons",
      "getModifierState"
    ],
    "Web.UIEvent.UIEvent": [
      "fromEvent",
      "toEvent",
      "view",
      "detail"
    ],
    "Web.UIEvent.WheelEvent.EventTypes": [],
    "Web.UIEvent.WheelEvent": [
      "fromMouseEvent",
      "fromUIEvent",
      "fromEvent",
      "toMouseEvent",
      "toUIEvent",
      "toEvent",
      "deltaX",
      "deltaY",
      "deltaZ",
      "deltaModeIndex",
      "deltaMode",
      "toEnumDeltaMode",
      "fromEnumDeltaMode"
    ]
  },
  "web-url": {
    "Web.URL.URLSearchParams": [
      "fromString",
      "append",
      "delete",
      "entries",
      "get",
      "getAll",
      "has",
      "keys",
      "set",
      "sort",
      "toString",
      "values"
    ],
    "Web.URL": [
      "fromAbsolute",
      "fromRelative",
      "unsafeFromAbsolute",
      "unsafeFromRelative",
      "toString",
      "href",
      "setHref",
      "protocol",
      "setProtocol",
      "host",
      "setHost",
      "hostname",
      "setHostname",
      "username",
      "setUsername",
      "password",
      "setPassword",
      "port",
      "setPort",
      "pathname",
      "setPathname",
      "search",
      "setSearch",
      "searchParams",
      "hash",
      "setHash",
      "origin"
    ]
  },
  "web-workers":,
  "web-xhr": {
    "Web.XHR.EventTypes": [],
    "Web.XHR.FormData": [
      "new",
      "fromFormElement",
      "append",
      "appendBlob",
      "delete",
      "has",
      "set",
      "setBlob"
    ],
    "Web.XHR.ProgressEvent": [],
    "Web.XHR.ReadyState": [],
    "Web.XHR.ResponseType": [
      "arrayBuffer",
      "blob",
      "document",
      "string"
    ],
    "Web.XHR.XMLHttpRequest": [
      "toEventTarget",
      "xmlHttpRequest",
      "abort",
      "getAllResponseHeaders",
      "getResponseHeader",
      "open",
      "open'",
      "overrideMimeType",
      "send",
      "sendString",
      "sendDocument",
      "sendBlob",
      "sendArrayView",
      "sendFormData",
      "setRequestHeader",
      "readyState",
      "response",
      "responseURL",
      "status",
      "statusText",
      "timeout",
      "setTimeout",
      "upload",
      "withCredentials",
      "setWithCredentials"
    ],
    "Web.XHR.XMLHttpRequestUpload": []
  },
  "which": {
    "Which": [
      "whichSync",
      "whichAllSync",
      "path",
      "pathExt"
    ]
  },
  "yoga-fetch": {
    "Yoga.Fetch": [
      "defaultFetchOptions",
      "getMethod",
      "postMethod",
      "putMethod",
      "patchMethod",
      "deleteMethod",
      "headMethod",
      "redirectError",
      "redirectFollow",
      "redirectManual",
      "omitCredentials",
      "sameOriginCredentials",
      "includeCredentials",
      "fetch",
      "json",
      "text",
      "headers",
      "arrayBuffer",
      "makeHeaders",
      "statusCode",
      "url"
    ],
    "Yoga.Fetch.Impl": [],
    "Yoga.Fetch.Impl.Node": [
      "nodeFetch"
    ],
    "Yoga.Fetch.Impl.Window": [
      "windowFetch"
    ]
  },
  "yoga-json": {
    "Yoga.JSON.Error": [],
    "Yoga.JSON.Generics.EnumSumRep": [],
    "Yoga.JSON.Generics.TaggedSumRep": [],
    "Yoga.JSON.Generics.UntaggedProductRep": [],
    "Yoga.JSON.Generics.UntaggedSumRep": [],
    "Yoga.JSON.Generics": [],
    "Yoga.JSON.Variant": [],
    "Yoga.JSON": [
      "readJSON",
      "readJSON'",
      "readJSON_",
      "writeJSON",
      "write",
      "read",
      "read'",
      "read_",
      "parseJSON",
      "undefined",
      "unsafeStringify",
      "readImpl",
      "getFields",
      "readVariantImpl",
      "readTupleImpl",
      "tupleSize",
      "writeImpl",
      "writeImplFields",
      "writeVariantImpl"
    ]
  },
  "yoga-om": {
    "Yoga.Om.Error": [],
    "Yoga.Om": [
      "delay",
      "error",
      "expand",
      "expandCtx",
      "expandErr",
      "fromAff",
      "handleErrors",
      "launchOm",
      "launchOm_",
      "note",
      "noteM",
      "parOmToAff",
      "race",
      "inParallel",
      "readerT",
      "runOm",
      "runReader",
      "throw",
      "throwLeftAs",
      "throwLeftAsM",
      "unliftAff",
      "unliftAffFn",
      "widenCtx"
    ]
  },
  "yoga-postgres": {
    "Yoga.Postgres.SqlValue": [
      "toSql"
    ],
    "Yoga.Postgres.Transaction": [],
    "Yoga.Postgres": [
      "connectionInfoFromConfig",
      "connectionInfoFromString",
      "defaultPoolConfig",
      "connect",
      "release",
      "end",
      "execute",
      "execute_",
      "query",
      "query_",
      "queryValue",
      "queryValue_",
      "queryOne",
      "queryOne_",
      "withClient",
      "mkPool"
    ]
  },
  "yoga-tree": {
    "Yoga.Tree.Zipper": [],
    "Yoga.Tree": []
  }
}
